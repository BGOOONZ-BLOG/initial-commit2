{"expireTime":9007200903816787000,"key":"transformer-remark-markdown-html-ast-c13284290ca90724c1c6982ba9c44e3e--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"const","position":{"start":{"line":2,"column":3,"offset":4},"end":{"line":2,"column":8,"offset":9}}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":8,"offset":9}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Constants are block-scoped, much like variables declared using the ","position":{"start":{"line":4,"column":1,"offset":13},"end":{"line":4,"column":68,"offset":80}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let"}],"position":{"start":{"line":4,"column":68,"offset":80},"end":{"line":4,"column":73,"offset":85}}},{"type":"text","value":" keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared.","position":{"start":{"line":4,"column":73,"offset":85},"end":{"line":4,"column":173,"offset":185}}}],"position":{"start":{"line":4,"column":1,"offset":13},"end":{"line":4,"column":173,"offset":185}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":6,"column":4,"offset":192},"end":{"line":6,"column":10,"offset":198}}}],"position":{"start":{"line":6,"column":1,"offset":189},"end":{"line":6,"column":10,"offset":198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];\n"}],"position":{"start":{"line":8,"column":1,"offset":202},"end":{"line":8,"column":72,"offset":273}}}],"position":{"start":{"line":8,"column":1,"offset":202},"end":{"line":8,"column":72,"offset":273}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nameN"}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":10,"column":8,"offset":284}}},{"type":"text","value":"\nThe constant's name, which can be any legal ","position":{"start":{"line":10,"column":8,"offset":284},"end":{"line":11,"column":45,"offset":330}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Identifier"},"children":[{"type":"text","value":"identifier","position":{"start":{"line":11,"column":46,"offset":331},"end":{"line":11,"column":56,"offset":341}}}],"position":{"start":{"line":11,"column":45,"offset":330},"end":{"line":11,"column":119,"offset":404}}},{"type":"text","value":".","position":{"start":{"line":11,"column":119,"offset":404},"end":{"line":11,"column":120,"offset":405}}}],"position":{"start":{"line":10,"column":1,"offset":277},"end":{"line":11,"column":120,"offset":405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"valueN"}],"position":{"start":{"line":13,"column":1,"offset":409},"end":{"line":13,"column":9,"offset":417}}},{"type":"text","value":"\nThe constant's value. This can be any legal ","position":{"start":{"line":13,"column":9,"offset":417},"end":{"line":14,"column":45,"offset":463}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#expressions"},"children":[{"type":"text","value":"expression","position":{"start":{"line":14,"column":46,"offset":464},"end":{"line":14,"column":56,"offset":474}}}],"position":{"start":{"line":14,"column":45,"offset":463},"end":{"line":14,"column":158,"offset":576}}},{"type":"text","value":", including a function expression.","position":{"start":{"line":14,"column":158,"offset":576},"end":{"line":14,"column":192,"offset":610}}}],"position":{"start":{"line":13,"column":1,"offset":409},"end":{"line":14,"column":192,"offset":610}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":16,"column":1,"offset":614},"end":{"line":16,"column":5,"offset":618}}},{"type":"element","tagName":"a","properties":{"href":"../operators/destructuring_assignment"},"children":[{"type":"text","value":"Destructuring Assignment","position":{"start":{"line":16,"column":6,"offset":619},"end":{"line":16,"column":30,"offset":643}}}],"position":{"start":{"line":16,"column":5,"offset":618},"end":{"line":16,"column":70,"offset":683}}},{"type":"text","value":" syntax can also be used to declare variables.","position":{"start":{"line":16,"column":70,"offset":683},"end":{"line":16,"column":116,"offset":729}}}],"position":{"start":{"line":16,"column":1,"offset":614},"end":{"line":16,"column":116,"offset":729}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const { bar } = foo; // where foo = { bar:10, baz:12 };\n/* This creates a constant with the name 'bar', which has a value of 10 */\n"}],"position":{"start":{"line":18,"column":1,"offset":733},"end":{"line":19,"column":79,"offset":872}}}],"position":{"start":{"line":18,"column":1,"offset":733},"end":{"line":19,"column":79,"offset":872}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Description","position":{"start":{"line":21,"column":4,"offset":879},"end":{"line":21,"column":15,"offset":890}}}],"position":{"start":{"line":21,"column":1,"offset":876},"end":{"line":21,"column":15,"offset":890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do ","position":{"start":{"line":23,"column":1,"offset":894},"end":{"line":23,"column":137,"offset":1030}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":23,"column":139,"offset":1032},"end":{"line":23,"column":142,"offset":1035}}}],"position":{"start":{"line":23,"column":137,"offset":1030},"end":{"line":23,"column":144,"offset":1037}}},{"type":"text","value":" become properties of the ","position":{"start":{"line":23,"column":144,"offset":1037},"end":{"line":23,"column":170,"offset":1063}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Window"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"window"}],"position":{"start":{"line":23,"column":171,"offset":1064},"end":{"line":23,"column":179,"offset":1072}}}],"position":{"start":{"line":23,"column":170,"offset":1063},"end":{"line":23,"column":237,"offset":1130}}},{"type":"text","value":" object, unlike ","position":{"start":{"line":23,"column":237,"offset":1130},"end":{"line":23,"column":253,"offset":1146}}},{"type":"element","tagName":"a","properties":{"href":"var"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"var"}],"position":{"start":{"line":23,"column":254,"offset":1147},"end":{"line":23,"column":259,"offset":1152}}}],"position":{"start":{"line":23,"column":253,"offset":1146},"end":{"line":23,"column":265,"offset":1158}}},{"type":"text","value":" variables.","position":{"start":{"line":23,"column":265,"offset":1158},"end":{"line":23,"column":276,"offset":1169}}}],"position":{"start":{"line":23,"column":1,"offset":894},"end":{"line":23,"column":276,"offset":1169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An initializer for a constant is required. You must specify its value in the same statement in which it's declared. (This makes sense, given that it can't be changed later.)","position":{"start":{"line":25,"column":1,"offset":1173},"end":{"line":25,"column":174,"offset":1346}}}],"position":{"start":{"line":25,"column":1,"offset":1173},"end":{"line":25,"column":174,"offset":1346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":27,"column":1,"offset":1350},"end":{"line":27,"column":5,"offset":1354}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const"}],"position":{"start":{"line":27,"column":5,"offset":1354},"end":{"line":27,"column":12,"offset":1361}}},{"type":"text","value":" creates a read-only reference to a value. It does ","position":{"start":{"line":27,"column":12,"offset":1361},"end":{"line":27,"column":63,"offset":1412}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":27,"column":65,"offset":1414},"end":{"line":27,"column":68,"offset":1417}}}],"position":{"start":{"line":27,"column":63,"offset":1412},"end":{"line":27,"column":70,"offset":1419}}},{"type":"text","value":" mean the value it holds is immutableâ€”just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.","position":{"start":{"line":27,"column":70,"offset":1419},"end":{"line":27,"column":293,"offset":1642}}}],"position":{"start":{"line":27,"column":1,"offset":1350},"end":{"line":27,"column":293,"offset":1642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"All the considerations about the \"","position":{"start":{"line":29,"column":1,"offset":1646},"end":{"line":29,"column":35,"offset":1680}}},{"type":"element","tagName":"a","properties":{"href":"let#temporal_dead_zone_tdz"},"children":[{"type":"text","value":"temporal dead zone","position":{"start":{"line":29,"column":36,"offset":1681},"end":{"line":29,"column":54,"offset":1699}}}],"position":{"start":{"line":29,"column":35,"offset":1680},"end":{"line":29,"column":83,"offset":1728}}},{"type":"text","value":"\" apply to both ","position":{"start":{"line":29,"column":83,"offset":1728},"end":{"line":29,"column":99,"offset":1744}}},{"type":"element","tagName":"a","properties":{"href":"let"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let"}],"position":{"start":{"line":29,"column":100,"offset":1745},"end":{"line":29,"column":105,"offset":1750}}}],"position":{"start":{"line":29,"column":99,"offset":1744},"end":{"line":29,"column":111,"offset":1756}}},{"type":"text","value":" and ","position":{"start":{"line":29,"column":111,"offset":1756},"end":{"line":29,"column":116,"offset":1761}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const"}],"position":{"start":{"line":29,"column":116,"offset":1761},"end":{"line":29,"column":123,"offset":1768}}},{"type":"text","value":".","position":{"start":{"line":29,"column":123,"offset":1768},"end":{"line":29,"column":124,"offset":1769}}}],"position":{"start":{"line":29,"column":1,"offset":1646},"end":{"line":29,"column":124,"offset":1769}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A constant cannot share its name with a function or a variable in the same scope.","position":{"start":{"line":31,"column":1,"offset":1773},"end":{"line":31,"column":82,"offset":1854}}}],"position":{"start":{"line":31,"column":1,"offset":1773},"end":{"line":31,"column":82,"offset":1854}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Examples","position":{"start":{"line":33,"column":4,"offset":1861},"end":{"line":33,"column":12,"offset":1869}}}],"position":{"start":{"line":33,"column":1,"offset":1858},"end":{"line":33,"column":12,"offset":1869}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Basic const usage","position":{"start":{"line":35,"column":5,"offset":1877},"end":{"line":35,"column":22,"offset":1894}}}],"position":{"start":{"line":35,"column":1,"offset":1873},"end":{"line":35,"column":22,"offset":1894}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Constants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters.","position":{"start":{"line":37,"column":1,"offset":1898},"end":{"line":37,"column":112,"offset":2009}}}],"position":{"start":{"line":37,"column":1,"offset":1898},"end":{"line":37,"column":112,"offset":2009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\n// this will throw an error - Uncaught TypeError: Assignment to constant variable.\nMY_FAV = 20;\n\n// MY_FAV is 7\nconsole.log('my favorite number is: ' + MY_FAV);\n\n// trying to redeclare a constant throws an error\n// Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared\nconst MY_FAV = 20;\n\n// the name MY_FAV is reserved for constant above, so this will fail too\nvar MY_FAV = 20;\n\n// this throws an error too\nlet MY_FAV = 20;\n"}],"position":{"start":{"line":39,"column":1,"offset":2013},"end":{"line":56,"column":21,"offset":2594}}}],"position":{"start":{"line":39,"column":1,"offset":2013},"end":{"line":56,"column":21,"offset":2594}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Block scoping","position":{"start":{"line":58,"column":5,"offset":2602},"end":{"line":58,"column":18,"offset":2615}}}],"position":{"start":{"line":58,"column":1,"offset":2598},"end":{"line":58,"column":18,"offset":2615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's important to note the nature of block scoping.","position":{"start":{"line":60,"column":1,"offset":2619},"end":{"line":60,"column":52,"offset":2670}}}],"position":{"start":{"line":60,"column":1,"offset":2619},"end":{"line":60,"column":52,"offset":2670}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if (MY_FAV === 7) {\n  // this is fine and creates a block scoped MY_FAV variable\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n\n  // MY_FAV is now 20\n  console.log('my favorite number is ' + MY_FAV);\n\n  // this gets hoisted into the global context and throws an error\n  var MY_FAV = 20;\n}\n\n// MY_FAV is still 7\nconsole.log('my favorite number is ' + MY_FAV);\n"}],"position":{"start":{"line":62,"column":1,"offset":2674},"end":{"line":75,"column":52,"offset":3142}}}],"position":{"start":{"line":62,"column":1,"offset":2674},"end":{"line":75,"column":52,"offset":3142}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"const needs to be initialized","position":{"start":{"line":77,"column":5,"offset":3150},"end":{"line":77,"column":34,"offset":3179}}}],"position":{"start":{"line":77,"column":1,"offset":3146},"end":{"line":77,"column":34,"offset":3179}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// throws an error\n// Uncaught SyntaxError: Missing initializer in const declaration\n\nconst FOO;\n"}],"position":{"start":{"line":79,"column":1,"offset":3183},"end":{"line":82,"column":15,"offset":3294}}}],"position":{"start":{"line":79,"column":1,"offset":3183},"end":{"line":82,"column":15,"offset":3294}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"const in objects and arrays","position":{"start":{"line":84,"column":5,"offset":3302},"end":{"line":84,"column":32,"offset":3329}}}],"position":{"start":{"line":84,"column":1,"offset":3298},"end":{"line":84,"column":32,"offset":3329}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"const also works on objects and arrays.","position":{"start":{"line":86,"column":1,"offset":3333},"end":{"line":86,"column":40,"offset":3372}}}],"position":{"start":{"line":86,"column":1,"offset":3333},"end":{"line":86,"column":40,"offset":3372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const MY_OBJECT = {'key': 'value'};\n\n// Attempting to overwrite the object throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_OBJECT = {'OTHER_KEY': 'value'};\n\n// However, object keys are not protected,\n// so the following statement is executed without problem\nMY_OBJECT.key = 'otherValue'; // Use Object.freeze() to make object immutable\n\n// The same applies to arrays\nconst MY_ARRAY = [];\n// It's possible to push items into the array\nMY_ARRAY.push('A'); // [\"A\"]\n// However, assigning a new array to the variable throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_ARRAY = ['B'];\n"}],"position":{"start":{"line":88,"column":1,"offset":3376},"end":{"line":104,"column":22,"offset":4077}}}],"position":{"start":{"line":88,"column":1,"offset":3376},"end":{"line":104,"column":22,"offset":4077}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":105,"column":1,"offset":4079}}}}