{"expireTime":9007200903816783000,"key":"transformer-remark-markdown-ast-6d901594ca62922fd7843878f99b45cc--","val":{"type":"root","children":[{"type":"html","value":"<details>","position":{"start":{"line":5,"column":1,"offset":8},"end":{"line":5,"column":10,"offset":17},"indent":[]}},{"type":"html","value":"<summary> Description</summary>   ","position":{"start":{"line":7,"column":1,"offset":21},"end":{"line":7,"column":35,"offset":55},"indent":[]}},{"type":"blockquote","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Excerpt","position":{"start":{"line":9,"column":6,"offset":64},"end":{"line":9,"column":13,"offset":71},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":61},"end":{"line":9,"column":13,"offset":71},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Fetch API provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It also provides a global fetch() method that provides an easy, logical way to fetch resources asynchronously across the network.","position":{"start":{"line":10,"column":3,"offset":75},"end":{"line":10,"column":269,"offset":341},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":75},"end":{"line":10,"column":269,"offset":341},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":59},"end":{"line":10,"column":269,"offset":341},"indent":[1]}},{"type":"thematicBreak","position":{"start":{"line":12,"column":1,"offset":345},"end":{"line":12,"column":4,"offset":348},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":13,"column":1,"offset":350},"end":{"line":13,"column":5,"offset":354},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API","children":[{"type":"text","value":"Fetch API","position":{"start":{"line":13,"column":6,"offset":355},"end":{"line":13,"column":15,"offset":364},"indent":[]}}],"position":{"start":{"line":13,"column":5,"offset":354},"end":{"line":13,"column":76,"offset":425},"indent":[]}},{"type":"text","value":" provides a JavaScript interface for accessing and manipulating parts of the HTTP pipeline, such as requests and responses. It also provides a global ","position":{"start":{"line":13,"column":76,"offset":425},"end":{"line":13,"column":226,"offset":575},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"inlineCode","value":"fetch()","position":{"start":{"line":13,"column":227,"offset":576},"end":{"line":13,"column":236,"offset":585},"indent":[]}}],"position":{"start":{"line":13,"column":226,"offset":575},"end":{"line":13,"column":293,"offset":642},"indent":[]}},{"type":"text","value":" method that provides an easy, logical way to fetch resources asynchronously across the network.","position":{"start":{"line":13,"column":293,"offset":642},"end":{"line":13,"column":389,"offset":738},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":350},"end":{"line":13,"column":389,"offset":738},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This kind of functionality was previously achieved using ","position":{"start":{"line":15,"column":1,"offset":742},"end":{"line":15,"column":58,"offset":799},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest","children":[{"type":"inlineCode","value":"XMLHttpRequest","position":{"start":{"line":15,"column":59,"offset":800},"end":{"line":15,"column":75,"offset":816},"indent":[]}}],"position":{"start":{"line":15,"column":58,"offset":799},"end":{"line":15,"column":141,"offset":882},"indent":[]}},{"type":"text","value":". Fetch provides a better alternative that can be easily used by other technologies such as ","position":{"start":{"line":15,"column":141,"offset":882},"end":{"line":15,"column":233,"offset":974},"indent":[]}},{"type":"link","title":"Service Workers","url":"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API","children":[{"type":"inlineCode","value":"Service Workers","position":{"start":{"line":15,"column":234,"offset":975},"end":{"line":15,"column":251,"offset":992},"indent":[]}}],"position":{"start":{"line":15,"column":233,"offset":974},"end":{"line":15,"column":339,"offset":1080},"indent":[]}},{"type":"text","value":". Fetch also provides a single logical place to define other HTTP-related concepts such as ","position":{"start":{"line":15,"column":339,"offset":1080},"end":{"line":15,"column":430,"offset":1171},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS","children":[{"type":"text","value":"CORS","position":{"start":{"line":15,"column":431,"offset":1172},"end":{"line":15,"column":435,"offset":1176},"indent":[]}}],"position":{"start":{"line":15,"column":430,"offset":1171},"end":{"line":15,"column":492,"offset":1233},"indent":[]}},{"type":"text","value":" and extensions to HTTP.","position":{"start":{"line":15,"column":492,"offset":1233},"end":{"line":15,"column":516,"offset":1257},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":742},"end":{"line":15,"column":516,"offset":1257},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":17,"column":1,"offset":1261},"end":{"line":17,"column":5,"offset":1265},"indent":[]}},{"type":"inlineCode","value":"fetch","position":{"start":{"line":17,"column":5,"offset":1265},"end":{"line":17,"column":12,"offset":1272},"indent":[]}},{"type":"text","value":" specification differs from ","position":{"start":{"line":17,"column":12,"offset":1272},"end":{"line":17,"column":40,"offset":1300},"indent":[]}},{"type":"inlineCode","value":"jQuery.ajax()","position":{"start":{"line":17,"column":40,"offset":1300},"end":{"line":17,"column":55,"offset":1315},"indent":[]}},{"type":"text","value":" in the following significant ways:","position":{"start":{"line":17,"column":55,"offset":1315},"end":{"line":17,"column":90,"offset":1350},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":1261},"end":{"line":17,"column":90,"offset":1350},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The Promise returned from ","position":{"start":{"line":19,"column":5,"offset":1358},"end":{"line":19,"column":31,"offset":1384},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":19,"column":31,"offset":1384},"end":{"line":19,"column":40,"offset":1393},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":19,"column":40,"offset":1393},"end":{"line":19,"column":41,"offset":1394},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"won't reject on HTTP error status","position":{"start":{"line":19,"column":43,"offset":1396},"end":{"line":19,"column":76,"offset":1429},"indent":[]}}],"position":{"start":{"line":19,"column":41,"offset":1394},"end":{"line":19,"column":78,"offset":1431},"indent":[]}},{"type":"text","value":" even if the response is an HTTP 404 or 500. Instead, as soon as the server responds with headers, the Promise will resolve normally (with the ","position":{"start":{"line":19,"column":78,"offset":1431},"end":{"line":19,"column":221,"offset":1574},"indent":[]}},{"type":"link","title":"ok","url":"https://developer.mozilla.org/en-US/docs/Web/API/Response/ok","children":[{"type":"inlineCode","value":"ok","position":{"start":{"line":19,"column":222,"offset":1575},"end":{"line":19,"column":226,"offset":1579},"indent":[]}}],"position":{"start":{"line":19,"column":221,"offset":1574},"end":{"line":19,"column":294,"offset":1647},"indent":[]}},{"type":"text","value":" property of the response set to false if the response isn't in the range 200 -299), and it will only reject on network failure or if anything prevented the request from completing.","position":{"start":{"line":19,"column":294,"offset":1647},"end":{"line":19,"column":475,"offset":1828},"indent":[]}}],"position":{"start":{"line":19,"column":5,"offset":1358},"end":{"line":19,"column":475,"offset":1828},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1354},"end":{"line":19,"column":475,"offset":1828},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"fetch()","position":{"start":{"line":20,"column":5,"offset":1834},"end":{"line":20,"column":14,"offset":1843},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":20,"column":14,"offset":1843},"end":{"line":20,"column":15,"offset":1844},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"won't send cross-origin cookies","position":{"start":{"line":20,"column":17,"offset":1846},"end":{"line":20,"column":48,"offset":1877},"indent":[]}}],"position":{"start":{"line":20,"column":15,"offset":1844},"end":{"line":20,"column":50,"offset":1879},"indent":[]}},{"type":"text","value":" unless you set the ","position":{"start":{"line":20,"column":50,"offset":1879},"end":{"line":20,"column":70,"offset":1899},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"credentials","position":{"start":{"line":20,"column":71,"offset":1900},"end":{"line":20,"column":82,"offset":1911},"indent":[]}}],"position":{"start":{"line":20,"column":70,"offset":1899},"end":{"line":20,"column":83,"offset":1912},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":20,"column":83,"offset":1912},"end":{"line":20,"column":84,"offset":1913},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch#parameters","children":[{"type":"text","value":"init option","position":{"start":{"line":20,"column":85,"offset":1914},"end":{"line":20,"column":96,"offset":1925},"indent":[]}}],"position":{"start":{"line":20,"column":84,"offset":1913},"end":{"line":20,"column":164,"offset":1993},"indent":[]}},{"type":"text","value":". (Since ","position":{"start":{"line":20,"column":164,"offset":1993},"end":{"line":20,"column":173,"offset":2002},"indent":[]}},{"type":"link","title":null,"url":"https://github.com/whatwg/fetch/pull/585","children":[{"type":"text","value":"April 2018","position":{"start":{"line":20,"column":174,"offset":2003},"end":{"line":20,"column":184,"offset":2013},"indent":[]}}],"position":{"start":{"line":20,"column":173,"offset":2002},"end":{"line":20,"column":227,"offset":2056},"indent":[]}},{"type":"text","value":". The spec changed the default credentials policy to ","position":{"start":{"line":20,"column":227,"offset":2056},"end":{"line":20,"column":280,"offset":2109},"indent":[]}},{"type":"inlineCode","value":"same-origin","position":{"start":{"line":20,"column":280,"offset":2109},"end":{"line":20,"column":293,"offset":2122},"indent":[]}},{"type":"text","value":". Firefox changed since 61.0b13.)","position":{"start":{"line":20,"column":293,"offset":2122},"end":{"line":20,"column":326,"offset":2155},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":1834},"end":{"line":20,"column":326,"offset":2155},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":1830},"end":{"line":20,"column":326,"offset":2155},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":1354},"end":{"line":20,"column":326,"offset":2155},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"A basic fetch request is really simple to set up. Have a look at the following code:","position":{"start":{"line":22,"column":1,"offset":2159},"end":{"line":22,"column":85,"offset":2243},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":2159},"end":{"line":22,"column":85,"offset":2243},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"fetch('http://example.com/movies.json')\n  .then(response => response.json())\n  .then(data => console.log(data));","position":{"start":{"line":24,"column":1,"offset":2247},"end":{"line":28,"column":4,"offset":2373},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here we are fetching a JSON file across the network and printing it to the console. The simplest use of ","position":{"start":{"line":30,"column":1,"offset":2377},"end":{"line":30,"column":105,"offset":2481},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":30,"column":105,"offset":2481},"end":{"line":30,"column":114,"offset":2490},"indent":[]}},{"type":"text","value":" takes one argument — the path to the resource you want to fetch — and does not directly return the JSON response body but instead returns a promise that resolves with a ","position":{"start":{"line":30,"column":114,"offset":2490},"end":{"line":30,"column":284,"offset":2660},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response","children":[{"type":"inlineCode","value":"Response","position":{"start":{"line":30,"column":285,"offset":2661},"end":{"line":30,"column":295,"offset":2671},"indent":[]}}],"position":{"start":{"line":30,"column":284,"offset":2660},"end":{"line":30,"column":355,"offset":2731},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":30,"column":355,"offset":2731},"end":{"line":30,"column":363,"offset":2739},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2377},"end":{"line":30,"column":363,"offset":2739},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":32,"column":1,"offset":2743},"end":{"line":32,"column":5,"offset":2747},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response","children":[{"type":"inlineCode","value":"Response","position":{"start":{"line":32,"column":6,"offset":2748},"end":{"line":32,"column":16,"offset":2758},"indent":[]}}],"position":{"start":{"line":32,"column":5,"offset":2747},"end":{"line":32,"column":76,"offset":2818},"indent":[]}},{"type":"text","value":" object, in turn, does not directly contain the actual JSON response body but is instead a representation of the entire HTTP response. So, to extract the JSON body content from the ","position":{"start":{"line":32,"column":76,"offset":2818},"end":{"line":32,"column":257,"offset":2999},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response","children":[{"type":"inlineCode","value":"Response","position":{"start":{"line":32,"column":258,"offset":3000},"end":{"line":32,"column":268,"offset":3010},"indent":[]}}],"position":{"start":{"line":32,"column":257,"offset":2999},"end":{"line":32,"column":328,"offset":3070},"indent":[]}},{"type":"text","value":" object, we use the ","position":{"start":{"line":32,"column":328,"offset":3070},"end":{"line":32,"column":348,"offset":3090},"indent":[]}},{"type":"link","title":"json()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Response/json","children":[{"type":"inlineCode","value":"json()","position":{"start":{"line":32,"column":349,"offset":3091},"end":{"line":32,"column":357,"offset":3099},"indent":[]}}],"position":{"start":{"line":32,"column":348,"offset":3090},"end":{"line":32,"column":431,"offset":3173},"indent":[]}},{"type":"text","value":" method, which returns a second promise that resolves with the result of parsing the response body text as JSON.","position":{"start":{"line":32,"column":431,"offset":3173},"end":{"line":32,"column":543,"offset":3285},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2743},"end":{"line":32,"column":543,"offset":3285},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":34,"column":3,"offset":3291},"end":{"line":34,"column":8,"offset":3296},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3289},"end":{"line":34,"column":10,"offset":3298},"indent":[]}},{"type":"text","value":" See the ","position":{"start":{"line":34,"column":10,"offset":3298},"end":{"line":34,"column":19,"offset":3307},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#body","children":[{"type":"text","value":"Body","position":{"start":{"line":34,"column":20,"offset":3308},"end":{"line":34,"column":24,"offset":3312},"indent":[]}}],"position":{"start":{"line":34,"column":19,"offset":3307},"end":{"line":34,"column":102,"offset":3390},"indent":[]}},{"type":"text","value":" section for similar methods to extract other types of body content.","position":{"start":{"line":34,"column":102,"offset":3390},"end":{"line":34,"column":170,"offset":3458},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":3289},"end":{"line":34,"column":170,"offset":3458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Fetch requests are controlled by the ","position":{"start":{"line":36,"column":1,"offset":3462},"end":{"line":36,"column":38,"offset":3499},"indent":[]}},{"type":"inlineCode","value":"connect-src","position":{"start":{"line":36,"column":38,"offset":3499},"end":{"line":36,"column":51,"offset":3512},"indent":[]}},{"type":"text","value":" directive of ","position":{"start":{"line":36,"column":51,"offset":3512},"end":{"line":36,"column":65,"offset":3526},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy","children":[{"type":"text","value":"Content Security Policy","position":{"start":{"line":36,"column":66,"offset":3527},"end":{"line":36,"column":89,"offset":3550},"indent":[]}}],"position":{"start":{"line":36,"column":65,"offset":3526},"end":{"line":36,"column":173,"offset":3634},"indent":[]}},{"type":"text","value":" rather than the directive of the resources it's retrieving.","position":{"start":{"line":36,"column":173,"offset":3634},"end":{"line":36,"column":233,"offset":3694},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":3462},"end":{"line":36,"column":233,"offset":3694},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Supplying request options","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options","children":[{"type":"text","value":"Supplying request options","position":{"start":{"line":38,"column":6,"offset":3703},"end":{"line":38,"column":31,"offset":3728},"indent":[]}}],"position":{"start":{"line":38,"column":5,"offset":3702},"end":{"line":38,"column":171,"offset":3868},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":3698},"end":{"line":38,"column":171,"offset":3868},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":40,"column":1,"offset":3872},"end":{"line":40,"column":5,"offset":3876},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":40,"column":5,"offset":3876},"end":{"line":40,"column":14,"offset":3885},"indent":[]}},{"type":"text","value":" method can optionally accept a second parameter, an ","position":{"start":{"line":40,"column":14,"offset":3885},"end":{"line":40,"column":67,"offset":3938},"indent":[]}},{"type":"inlineCode","value":"init","position":{"start":{"line":40,"column":67,"offset":3938},"end":{"line":40,"column":73,"offset":3944},"indent":[]}},{"type":"text","value":" object that allows you to control a number of different settings:","position":{"start":{"line":40,"column":73,"offset":3944},"end":{"line":40,"column":139,"offset":4010},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":3872},"end":{"line":40,"column":139,"offset":4010},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"See ","position":{"start":{"line":42,"column":1,"offset":4014},"end":{"line":42,"column":5,"offset":4018},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"inlineCode","value":"fetch()","position":{"start":{"line":42,"column":6,"offset":4019},"end":{"line":42,"column":15,"offset":4028},"indent":[]}}],"position":{"start":{"line":42,"column":5,"offset":4018},"end":{"line":42,"column":72,"offset":4085},"indent":[]}},{"type":"text","value":" for the full options available, and more details.","position":{"start":{"line":42,"column":72,"offset":4085},"end":{"line":42,"column":122,"offset":4135},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":4014},"end":{"line":42,"column":122,"offset":4135},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"js\n// Example POST method implementation:\nasync function postData(url = '', data = {}) {\n  // Default options are marked with *\n  const response = await fetch(url, {\n    method: 'POST', // *GET, POST, PUT, DELETE, etc.\n    mode: 'cors', // no-cors, *cors, same-origin\n    cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n    credentials: 'same-origin', // include, *same-origin, omit\n    headers: {\n      'Content-Type': 'application/json'\n      // 'Content-Type': 'application/x-www-form-urlencoded',\n    },\n    redirect: 'follow', // manual, *follow, error\n    referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url\n    body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  });\n  return response.json(); // parses JSON response into native JavaScript objects\n}\n\npostData('https://example.com/answer', { answer: 42 })\n  .then(data => {\n    console.log(data); // JSON data parsed by `data.json()` call\n  });","position":{"start":{"line":44,"column":1,"offset":4139},"end":{"line":69,"column":4,"offset":5263},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Note that ","position":{"start":{"line":71,"column":1,"offset":5267},"end":{"line":71,"column":11,"offset":5277},"indent":[]}},{"type":"inlineCode","value":"mode: \"no-cors\"","position":{"start":{"line":71,"column":11,"offset":5277},"end":{"line":71,"column":28,"offset":5294},"indent":[]}},{"type":"text","value":" only allows a limited set of headers in the request:","position":{"start":{"line":71,"column":28,"offset":5294},"end":{"line":71,"column":81,"offset":5347},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":5267},"end":{"line":71,"column":81,"offset":5347},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Accept","position":{"start":{"line":73,"column":5,"offset":5355},"end":{"line":73,"column":13,"offset":5363},"indent":[]}}],"position":{"start":{"line":73,"column":5,"offset":5355},"end":{"line":73,"column":13,"offset":5363},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":5351},"end":{"line":73,"column":13,"offset":5363},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Accept-Language","position":{"start":{"line":74,"column":5,"offset":5369},"end":{"line":74,"column":22,"offset":5386},"indent":[]}}],"position":{"start":{"line":74,"column":5,"offset":5369},"end":{"line":74,"column":22,"offset":5386},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":5365},"end":{"line":74,"column":22,"offset":5386},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Content-Language","position":{"start":{"line":75,"column":5,"offset":5392},"end":{"line":75,"column":23,"offset":5410},"indent":[]}}],"position":{"start":{"line":75,"column":5,"offset":5392},"end":{"line":75,"column":23,"offset":5410},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":5388},"end":{"line":75,"column":23,"offset":5410},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"Content-Type","position":{"start":{"line":76,"column":5,"offset":5416},"end":{"line":76,"column":19,"offset":5430},"indent":[]}},{"type":"text","value":" with a value of ","position":{"start":{"line":76,"column":19,"offset":5430},"end":{"line":76,"column":36,"offset":5447},"indent":[]}},{"type":"inlineCode","value":"application/x-www-form-urlencoded","position":{"start":{"line":76,"column":36,"offset":5447},"end":{"line":76,"column":71,"offset":5482},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":76,"column":71,"offset":5482},"end":{"line":76,"column":73,"offset":5484},"indent":[]}},{"type":"inlineCode","value":"multipart/form-data","position":{"start":{"line":76,"column":73,"offset":5484},"end":{"line":76,"column":94,"offset":5505},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":76,"column":94,"offset":5505},"end":{"line":76,"column":99,"offset":5510},"indent":[]}},{"type":"inlineCode","value":"text/plain","position":{"start":{"line":76,"column":99,"offset":5510},"end":{"line":76,"column":111,"offset":5522},"indent":[]}}],"position":{"start":{"line":76,"column":5,"offset":5416},"end":{"line":76,"column":111,"offset":5522},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":5412},"end":{"line":76,"column":111,"offset":5522},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":5351},"end":{"line":76,"column":111,"offset":5522},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Sending a request with credentials included","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#sending_a_request_with_credentials_included","children":[{"type":"text","value":"Sending a request with credentials included","position":{"start":{"line":78,"column":6,"offset":5531},"end":{"line":78,"column":49,"offset":5574},"indent":[]}}],"position":{"start":{"line":78,"column":5,"offset":5530},"end":{"line":78,"column":225,"offset":5750},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":5526},"end":{"line":78,"column":225,"offset":5750},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To cause browsers to send a request with credentials included on both same-origin and cross-origin calls, add ","position":{"start":{"line":80,"column":1,"offset":5754},"end":{"line":80,"column":111,"offset":5864},"indent":[]}},{"type":"inlineCode","value":"credentials: 'include'","position":{"start":{"line":80,"column":111,"offset":5864},"end":{"line":80,"column":135,"offset":5888},"indent":[]}},{"type":"text","value":" to the ","position":{"start":{"line":80,"column":135,"offset":5888},"end":{"line":80,"column":143,"offset":5896},"indent":[]}},{"type":"inlineCode","value":"init","position":{"start":{"line":80,"column":143,"offset":5896},"end":{"line":80,"column":149,"offset":5902},"indent":[]}},{"type":"text","value":" object you pass to the ","position":{"start":{"line":80,"column":149,"offset":5902},"end":{"line":80,"column":173,"offset":5926},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":80,"column":173,"offset":5926},"end":{"line":80,"column":182,"offset":5935},"indent":[]}},{"type":"text","value":" method.","position":{"start":{"line":80,"column":182,"offset":5935},"end":{"line":80,"column":190,"offset":5943},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":5754},"end":{"line":80,"column":190,"offset":5943},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"fetch('https://example.com', {\n  credentials: 'include'\n});","position":{"start":{"line":82,"column":1,"offset":5947},"end":{"line":87,"column":4,"offset":6022},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":89,"column":3,"offset":6028},"end":{"line":89,"column":8,"offset":6033},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":6026},"end":{"line":89,"column":10,"offset":6035},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":89,"column":10,"offset":6035},"end":{"line":89,"column":11,"offset":6036},"indent":[]}},{"type":"inlineCode","value":"Access-Control-Allow-Origin","position":{"start":{"line":89,"column":11,"offset":6036},"end":{"line":89,"column":40,"offset":6065},"indent":[]}},{"type":"text","value":" is prohibited from using a wildcard for requests with ","position":{"start":{"line":89,"column":40,"offset":6065},"end":{"line":89,"column":95,"offset":6120},"indent":[]}},{"type":"inlineCode","value":"credentials: 'include'","position":{"start":{"line":89,"column":95,"offset":6120},"end":{"line":89,"column":119,"offset":6144},"indent":[]}},{"type":"text","value":". In such cases, the exact origin must be provided; even if you are using a CORS unblocker extension, the requests will still fail.","position":{"start":{"line":89,"column":119,"offset":6144},"end":{"line":89,"column":250,"offset":6275},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":6026},"end":{"line":89,"column":250,"offset":6275},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":91,"column":3,"offset":6281},"end":{"line":91,"column":8,"offset":6286},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":6279},"end":{"line":91,"column":10,"offset":6288},"indent":[]}},{"type":"text","value":" Browsers should not send credentials in ","position":{"start":{"line":91,"column":10,"offset":6288},"end":{"line":91,"column":51,"offset":6329},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"preflight requests","position":{"start":{"line":91,"column":52,"offset":6330},"end":{"line":91,"column":70,"offset":6348},"indent":[]}}],"position":{"start":{"line":91,"column":51,"offset":6329},"end":{"line":91,"column":71,"offset":6349},"indent":[]}},{"type":"text","value":" irrespective of this setting. For more information see: ","position":{"start":{"line":91,"column":71,"offset":6349},"end":{"line":91,"column":128,"offset":6406},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#requests_with_credentials","children":[{"type":"text","value":"CORS > Requests with credentials","position":{"start":{"line":91,"column":129,"offset":6407},"end":{"line":91,"column":161,"offset":6439},"indent":[]}}],"position":{"start":{"line":91,"column":128,"offset":6406},"end":{"line":91,"column":244,"offset":6522},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":91,"column":244,"offset":6522},"end":{"line":91,"column":245,"offset":6523},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":6279},"end":{"line":91,"column":245,"offset":6523},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you only want to send credentials if the request URL is on the same origin as the calling script, add ","position":{"start":{"line":93,"column":1,"offset":6527},"end":{"line":93,"column":106,"offset":6632},"indent":[]}},{"type":"inlineCode","value":"credentials: 'same-origin'","position":{"start":{"line":93,"column":106,"offset":6632},"end":{"line":93,"column":134,"offset":6660},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":93,"column":134,"offset":6660},"end":{"line":93,"column":135,"offset":6661},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":6527},"end":{"line":93,"column":135,"offset":6661},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"// The calling script is on the origin 'https://example.com'\n\nfetch('https://example.com', {\n  credentials: 'same-origin'\n});","position":{"start":{"line":95,"column":1,"offset":6665},"end":{"line":102,"column":4,"offset":6808},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"To instead ensure browsers don't include credentials in the request, use ","position":{"start":{"line":104,"column":1,"offset":6812},"end":{"line":104,"column":74,"offset":6885},"indent":[]}},{"type":"inlineCode","value":"credentials: 'omit'","position":{"start":{"line":104,"column":74,"offset":6885},"end":{"line":104,"column":95,"offset":6906},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":104,"column":95,"offset":6906},"end":{"line":104,"column":96,"offset":6907},"indent":[]}}],"position":{"start":{"line":104,"column":1,"offset":6812},"end":{"line":104,"column":96,"offset":6907},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"fetch('https://example.com', {\n  credentials: 'omit'\n})","position":{"start":{"line":106,"column":1,"offset":6911},"end":{"line":111,"column":4,"offset":6982},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Uploading JSON data","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#uploading_json_data","children":[{"type":"text","value":"Uploading JSON data","position":{"start":{"line":113,"column":6,"offset":6991},"end":{"line":113,"column":25,"offset":7010},"indent":[]}}],"position":{"start":{"line":113,"column":5,"offset":6990},"end":{"line":113,"column":153,"offset":7138},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":6986},"end":{"line":113,"column":153,"offset":7138},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Use ","position":{"start":{"line":115,"column":1,"offset":7142},"end":{"line":115,"column":5,"offset":7146},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"inlineCode","value":"fetch()","position":{"start":{"line":115,"column":6,"offset":7147},"end":{"line":115,"column":15,"offset":7156},"indent":[]}}],"position":{"start":{"line":115,"column":5,"offset":7146},"end":{"line":115,"column":72,"offset":7213},"indent":[]}},{"type":"text","value":" to POST JSON-encoded data.","position":{"start":{"line":115,"column":72,"offset":7213},"end":{"line":115,"column":99,"offset":7240},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":7142},"end":{"line":115,"column":99,"offset":7240},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const data = { username: 'example' };\n\nfetch('https://example.com/profile', {\n  method: 'POST', // or 'PUT'\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify(data),\n})\n.then(response => response.json())\n.then(data => {\n  console.log('Success:', data);\n})\n.catch((error) => {\n  console.error('Error:', error);\n});","position":{"start":{"line":117,"column":1,"offset":7244},"end":{"line":135,"column":4,"offset":7616},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Uploading a file","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#uploading_a_file","children":[{"type":"text","value":"Uploading a file","position":{"start":{"line":137,"column":6,"offset":7625},"end":{"line":137,"column":22,"offset":7641},"indent":[]}}],"position":{"start":{"line":137,"column":5,"offset":7624},"end":{"line":137,"column":144,"offset":7763},"indent":[]}}],"position":{"start":{"line":137,"column":1,"offset":7620},"end":{"line":137,"column":144,"offset":7763},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Files can be uploaded using an HTML ","position":{"start":{"line":139,"column":1,"offset":7767},"end":{"line":139,"column":37,"offset":7803},"indent":[]}},{"type":"inlineCode","value":"<input type=\"file\" />","position":{"start":{"line":139,"column":37,"offset":7803},"end":{"line":139,"column":60,"offset":7826},"indent":[]}},{"type":"text","value":" input element, ","position":{"start":{"line":139,"column":60,"offset":7826},"end":{"line":139,"column":76,"offset":7842},"indent":[]}},{"type":"link","title":"FormData()","url":"https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData","children":[{"type":"inlineCode","value":"FormData()","position":{"start":{"line":139,"column":77,"offset":7843},"end":{"line":139,"column":89,"offset":7855},"indent":[]}}],"position":{"start":{"line":139,"column":76,"offset":7842},"end":{"line":139,"column":171,"offset":7937},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":139,"column":171,"offset":7937},"end":{"line":139,"column":176,"offset":7942},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"inlineCode","value":"fetch()","position":{"start":{"line":139,"column":177,"offset":7943},"end":{"line":139,"column":186,"offset":7952},"indent":[]}}],"position":{"start":{"line":139,"column":176,"offset":7942},"end":{"line":139,"column":243,"offset":8009},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":139,"column":243,"offset":8009},"end":{"line":139,"column":244,"offset":8010},"indent":[]}}],"position":{"start":{"line":139,"column":1,"offset":7767},"end":{"line":139,"column":244,"offset":8010},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const formData = new FormData();\nconst fileField = document.querySelector('input[type=\"file\"]');\n\nformData.append('username', 'abc123');\nformData.append('avatar', fileField.files[0]);\n\nfetch('https://example.com/profile/avatar', {\n  method: 'PUT',\n  body: formData\n})\n.then(response => response.json())\n.then(result => {\n  console.log('Success:', result);\n})\n.catch(error => {\n  console.error('Error:', error);\n});","position":{"start":{"line":141,"column":1,"offset":8014},"end":{"line":160,"column":4,"offset":8458},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Uploading multiple files","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#uploading_multiple_files","children":[{"type":"text","value":"Uploading multiple files","position":{"start":{"line":162,"column":6,"offset":8467},"end":{"line":162,"column":30,"offset":8491},"indent":[]}}],"position":{"start":{"line":162,"column":5,"offset":8466},"end":{"line":162,"column":168,"offset":8629},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":8462},"end":{"line":162,"column":168,"offset":8629},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Files can be uploaded using an HTML ","position":{"start":{"line":164,"column":1,"offset":8633},"end":{"line":164,"column":37,"offset":8669},"indent":[]}},{"type":"inlineCode","value":"<input type=\"file\" multiple />","position":{"start":{"line":164,"column":37,"offset":8669},"end":{"line":164,"column":69,"offset":8701},"indent":[]}},{"type":"text","value":" input element, ","position":{"start":{"line":164,"column":69,"offset":8701},"end":{"line":164,"column":85,"offset":8717},"indent":[]}},{"type":"link","title":"FormData()","url":"https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData","children":[{"type":"inlineCode","value":"FormData()","position":{"start":{"line":164,"column":86,"offset":8718},"end":{"line":164,"column":98,"offset":8730},"indent":[]}}],"position":{"start":{"line":164,"column":85,"offset":8717},"end":{"line":164,"column":180,"offset":8812},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":164,"column":180,"offset":8812},"end":{"line":164,"column":185,"offset":8817},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"inlineCode","value":"fetch()","position":{"start":{"line":164,"column":186,"offset":8818},"end":{"line":164,"column":195,"offset":8827},"indent":[]}}],"position":{"start":{"line":164,"column":185,"offset":8817},"end":{"line":164,"column":252,"offset":8884},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":164,"column":252,"offset":8884},"end":{"line":164,"column":253,"offset":8885},"indent":[]}}],"position":{"start":{"line":164,"column":1,"offset":8633},"end":{"line":164,"column":253,"offset":8885},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const formData = new FormData();\nconst photos = document.querySelector('input[type=\"file\"][multiple]');\n\nformData.append('title', 'My Vegas Vacation');\nfor (let i = 0; i < photos.files.length; i++) {\n  formData.append(`photos_${i}`, photos.files[i]);\n}\n\nfetch('https://example.com/posts', {\n  method: 'POST',\n  body: formData,\n})\n.then(response => response.json())\n.then(result => {\n  console.log('Success:', result);\n})\n.catch(error => {\n  console.error('Error:', error);\n});","position":{"start":{"line":166,"column":1,"offset":8889},"end":{"line":187,"column":4,"offset":9397},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Processing a text file line by line","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#processing_a_text_file_line_by_line","children":[{"type":"text","value":"Processing a text file line by line","position":{"start":{"line":189,"column":6,"offset":9406},"end":{"line":189,"column":41,"offset":9441},"indent":[]}}],"position":{"start":{"line":189,"column":5,"offset":9405},"end":{"line":189,"column":201,"offset":9601},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":9401},"end":{"line":189,"column":201,"offset":9601},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The chunks that are read from a response are not broken neatly at line boundaries and are Uint8Arrays, not strings. If you want to fetch a text file and process it line by line, it is up to you to handle these complications. The following example shows one way to do this by creating a line iterator (for simplicity, it assumes the text is UTF-8, and doesn't handle fetch errors).","position":{"start":{"line":191,"column":1,"offset":9605},"end":{"line":191,"column":381,"offset":9985},"indent":[]}}],"position":{"start":{"line":191,"column":1,"offset":9605},"end":{"line":191,"column":381,"offset":9985},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"async function* makeTextFileLineIterator(fileURL) {\n  const utf8Decoder = new TextDecoder('utf-8');\n  const response = await fetch(fileURL);\n  const reader = response.body.getReader();\n  let { value: chunk, done: readerDone } = await reader.read();\n  chunk = chunk ? utf8Decoder.decode(chunk) : '';\n\n  const re = /\\n|\\r|\\r\\n/gm;\n  let startIndex = 0;\n  let result;\n\n  for (;;) {\n    let result = re.exec(chunk);\n    if (!result) {\n      if (readerDone) {\n        break;\n      }\n      let remainder = chunk.substr(startIndex);\n      ({ value: chunk, done: readerDone } = await reader.read());\n      chunk = remainder + (chunk ? utf8Decoder.decode(chunk) : '');\n      startIndex = re.lastIndex = 0;\n      continue;\n    }\n    yield chunk.substring(startIndex, result.index);\n    startIndex = re.lastIndex;\n  }\n  if (startIndex < chunk.length) {\n    // last line didn't end in a newline char\n    yield chunk.substr(startIndex);\n  }\n}\n\nasync function run() {\n  for await (let line of makeTextFileLineIterator(urlOfFile)) {\n    processLine(line);\n  }\n}\n\nrun();","position":{"start":{"line":193,"column":1,"offset":9989},"end":{"line":234,"column":4,"offset":11095},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Checking that the fetch was successful","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#checking_that_the_fetch_was_successful","children":[{"type":"text","value":"Checking that the fetch was successful","position":{"start":{"line":236,"column":6,"offset":11104},"end":{"line":236,"column":44,"offset":11142},"indent":[]}}],"position":{"start":{"line":236,"column":5,"offset":11103},"end":{"line":236,"column":210,"offset":11308},"indent":[]}}],"position":{"start":{"line":236,"column":1,"offset":11099},"end":{"line":236,"column":210,"offset":11308},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":238,"column":1,"offset":11312},"end":{"line":238,"column":3,"offset":11314},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/fetch","children":[{"type":"inlineCode","value":"fetch()","position":{"start":{"line":238,"column":4,"offset":11315},"end":{"line":238,"column":13,"offset":11324},"indent":[]}}],"position":{"start":{"line":238,"column":3,"offset":11314},"end":{"line":238,"column":70,"offset":11381},"indent":[]}},{"type":"text","value":" promise will reject with a ","position":{"start":{"line":238,"column":70,"offset":11381},"end":{"line":238,"column":98,"offset":11409},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError","children":[{"type":"inlineCode","value":"TypeError","position":{"start":{"line":238,"column":99,"offset":11410},"end":{"line":238,"column":110,"offset":11421},"indent":[]}}],"position":{"start":{"line":238,"column":98,"offset":11409},"end":{"line":238,"column":203,"offset":11514},"indent":[]}},{"type":"text","value":" when a network error is encountered or CORS is misconfigured on the server-side, although this usually means permission issues or similar — a 404 does not constitute a network error, for example. An accurate check for a successful ","position":{"start":{"line":238,"column":203,"offset":11514},"end":{"line":238,"column":435,"offset":11746},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":238,"column":435,"offset":11746},"end":{"line":238,"column":444,"offset":11755},"indent":[]}},{"type":"text","value":" would include checking that the promise resolved, then checking that the ","position":{"start":{"line":238,"column":444,"offset":11755},"end":{"line":238,"column":518,"offset":11829},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Response/ok","children":[{"type":"inlineCode","value":"Response.ok","position":{"start":{"line":238,"column":519,"offset":11830},"end":{"line":238,"column":532,"offset":11843},"indent":[]}}],"position":{"start":{"line":238,"column":518,"offset":11829},"end":{"line":238,"column":595,"offset":11906},"indent":[]}},{"type":"text","value":" property has a value of true. The code would look something like this:","position":{"start":{"line":238,"column":595,"offset":11906},"end":{"line":238,"column":666,"offset":11977},"indent":[]}}],"position":{"start":{"line":238,"column":1,"offset":11312},"end":{"line":238,"column":666,"offset":11977},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"fetch('flowers.jpg')\n  .then(response => {\n    if (!response.ok) {\n      throw new Error('Network response was not OK');\n    }\n    return response.blob();\n  })\n  .then(myBlob => {\n    myImage.src = URL.createObjectURL(myBlob);\n  })\n  .catch(error => {\n    console.error('There has been a problem with your fetch operation:', error);\n  });","position":{"start":{"line":240,"column":1,"offset":11981},"end":{"line":254,"column":4,"offset":12341},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Supplying your own request object","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_your_own_request_object","children":[{"type":"text","value":"Supplying your own request object","position":{"start":{"line":256,"column":6,"offset":12350},"end":{"line":256,"column":39,"offset":12383},"indent":[]}}],"position":{"start":{"line":256,"column":5,"offset":12349},"end":{"line":256,"column":195,"offset":12539},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":12345},"end":{"line":256,"column":195,"offset":12539},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Instead of passing a path to the resource you want to request into the ","position":{"start":{"line":258,"column":1,"offset":12543},"end":{"line":258,"column":72,"offset":12614},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":258,"column":72,"offset":12614},"end":{"line":258,"column":81,"offset":12623},"indent":[]}},{"type":"text","value":" call, you can create a request object using the ","position":{"start":{"line":258,"column":81,"offset":12623},"end":{"line":258,"column":130,"offset":12672},"indent":[]}},{"type":"link","title":"Request()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Request/Request","children":[{"type":"inlineCode","value":"Request()","position":{"start":{"line":258,"column":131,"offset":12673},"end":{"line":258,"column":142,"offset":12684},"indent":[]}}],"position":{"start":{"line":258,"column":130,"offset":12672},"end":{"line":258,"column":221,"offset":12763},"indent":[]}},{"type":"text","value":" constructor, and pass that in as a ","position":{"start":{"line":258,"column":221,"offset":12763},"end":{"line":258,"column":257,"offset":12799},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":258,"column":257,"offset":12799},"end":{"line":258,"column":266,"offset":12808},"indent":[]}},{"type":"text","value":" method argument:","position":{"start":{"line":258,"column":266,"offset":12808},"end":{"line":258,"column":283,"offset":12825},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":12543},"end":{"line":258,"column":283,"offset":12825},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const myHeaders = new Headers();\n\nconst myRequest = new Request('flowers.jpg', {\n  method: 'GET',\n  headers: myHeaders,\n  mode: 'cors',\n  cache: 'default',\n});\n\nfetch(myRequest)\n  .then(response => response.blob())\n  .then(myBlob => {\n    myImage.src = URL.createObjectURL(myBlob);\n  });","position":{"start":{"line":260,"column":1,"offset":12829},"end":{"line":275,"column":4,"offset":13139},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Request()","position":{"start":{"line":277,"column":1,"offset":13143},"end":{"line":277,"column":12,"offset":13154},"indent":[]}},{"type":"text","value":" accepts exactly the same parameters as the ","position":{"start":{"line":277,"column":12,"offset":13154},"end":{"line":277,"column":56,"offset":13198},"indent":[]}},{"type":"inlineCode","value":"fetch()","position":{"start":{"line":277,"column":56,"offset":13198},"end":{"line":277,"column":65,"offset":13207},"indent":[]}},{"type":"text","value":" method. You can even pass in an existing request object to create a copy of it:","position":{"start":{"line":277,"column":65,"offset":13207},"end":{"line":277,"column":145,"offset":13287},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":13143},"end":{"line":277,"column":145,"offset":13287},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const anotherRequest = new Request(myRequest, myInit);","position":{"start":{"line":279,"column":1,"offset":13291},"end":{"line":281,"column":4,"offset":13355},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is pretty useful, as request and response bodies are one use only. Making a copy like this allows you to make use of the request/response again while varying the ","position":{"start":{"line":283,"column":1,"offset":13359},"end":{"line":283,"column":168,"offset":13526},"indent":[]}},{"type":"inlineCode","value":"init","position":{"start":{"line":283,"column":168,"offset":13526},"end":{"line":283,"column":174,"offset":13532},"indent":[]}},{"type":"text","value":" options if desired. The copy must be made before the body is read, and reading the body in the copy will also mark it as read in the original request.","position":{"start":{"line":283,"column":174,"offset":13532},"end":{"line":283,"column":325,"offset":13683},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":13359},"end":{"line":283,"column":325,"offset":13683},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":285,"column":3,"offset":13689},"end":{"line":285,"column":8,"offset":13694},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":13687},"end":{"line":285,"column":10,"offset":13696},"indent":[]}},{"type":"text","value":" There is also a ","position":{"start":{"line":285,"column":10,"offset":13696},"end":{"line":285,"column":27,"offset":13713},"indent":[]}},{"type":"link","title":"clone()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Request/clone","children":[{"type":"inlineCode","value":"clone()","position":{"start":{"line":285,"column":28,"offset":13714},"end":{"line":285,"column":37,"offset":13723},"indent":[]}}],"position":{"start":{"line":285,"column":27,"offset":13713},"end":{"line":285,"column":112,"offset":13798},"indent":[]}},{"type":"text","value":" method that creates a copy. Both methods of creating a copy will fail if the body of the original request or response has already been read, but reading the body of a cloned response or request will not cause it to be marked as read in the original.","position":{"start":{"line":285,"column":112,"offset":13798},"end":{"line":285,"column":362,"offset":14048},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":13687},"end":{"line":285,"column":362,"offset":14048},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":287,"column":1,"offset":14052},"end":{"line":287,"column":5,"offset":14056},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Headers","children":[{"type":"inlineCode","value":"Headers","position":{"start":{"line":287,"column":6,"offset":14057},"end":{"line":287,"column":15,"offset":14066},"indent":[]}}],"position":{"start":{"line":287,"column":5,"offset":14056},"end":{"line":287,"column":74,"offset":14125},"indent":[]}},{"type":"text","value":" interface allows you to create your own headers object via the ","position":{"start":{"line":287,"column":74,"offset":14125},"end":{"line":287,"column":138,"offset":14189},"indent":[]}},{"type":"link","title":"Headers()","url":"https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers","children":[{"type":"inlineCode","value":"Headers()","position":{"start":{"line":287,"column":139,"offset":14190},"end":{"line":287,"column":150,"offset":14201},"indent":[]}}],"position":{"start":{"line":287,"column":138,"offset":14189},"end":{"line":287,"column":229,"offset":14280},"indent":[]}},{"type":"text","value":" constructor. A headers object is a simple multi-map of names to values:","position":{"start":{"line":287,"column":229,"offset":14280},"end":{"line":287,"column":301,"offset":14352},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":14052},"end":{"line":287,"column":301,"offset":14352},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const content = 'Hello World';\nconst myHeaders = new Headers();\nmyHeaders.append('Content-Type', 'text/plain');\nmyHeaders.append('Content-Length', content.length.toString());\nmyHeaders.append('X-Custom-Header', 'ProcessThisImmediately');","position":{"start":{"line":289,"column":1,"offset":14356},"end":{"line":295,"column":4,"offset":14607},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The same can be achieved by passing an array of arrays or an object literal to the constructor:","position":{"start":{"line":297,"column":1,"offset":14611},"end":{"line":297,"column":96,"offset":14706},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":14611},"end":{"line":297,"column":96,"offset":14706},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const myHeaders = new Headers({\n  'Content-Type': 'text/plain',\n  'Content-Length': content.length.toString(),\n  'X-Custom-Header': 'ProcessThisImmediately'\n});","position":{"start":{"line":299,"column":1,"offset":14710},"end":{"line":305,"column":4,"offset":14884},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The contents can be queried and retrieved:","position":{"start":{"line":307,"column":1,"offset":14888},"end":{"line":307,"column":43,"offset":14930},"indent":[]}}],"position":{"start":{"line":307,"column":1,"offset":14888},"end":{"line":307,"column":43,"offset":14930},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"console.log(myHeaders.has('Content-Type')); // true\nconsole.log(myHeaders.has('Set-Cookie')); // false\nmyHeaders.set('Content-Type', 'text/html');\nmyHeaders.append('X-Custom-Header', 'AnotherValue');\n\nconsole.log(myHeaders.get('Content-Length')); // 11\nconsole.log(myHeaders.get('X-Custom-Header')); // ['ProcessThisImmediately', 'AnotherValue']\n\nmyHeaders.delete('X-Custom-Header');\nconsole.log(myHeaders.get('X-Custom-Header')); // null","position":{"start":{"line":309,"column":1,"offset":14934},"end":{"line":320,"column":4,"offset":15391},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Some of these operations are only useful in ","position":{"start":{"line":322,"column":1,"offset":15395},"end":{"line":322,"column":45,"offset":15439},"indent":[]}},{"type":"link","title":"ServiceWorkers","url":"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API","children":[{"type":"inlineCode","value":"ServiceWorkers","position":{"start":{"line":322,"column":46,"offset":15440},"end":{"line":322,"column":62,"offset":15456},"indent":[]}}],"position":{"start":{"line":322,"column":45,"offset":15439},"end":{"line":322,"column":149,"offset":15543},"indent":[]}},{"type":"text","value":", but they provide a much nicer API for manipulating headers.","position":{"start":{"line":322,"column":149,"offset":15543},"end":{"line":322,"column":210,"offset":15604},"indent":[]}}],"position":{"start":{"line":322,"column":1,"offset":15395},"end":{"line":322,"column":210,"offset":15604},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All of the Headers methods throw a ","position":{"start":{"line":324,"column":1,"offset":15608},"end":{"line":324,"column":36,"offset":15643},"indent":[]}},{"type":"inlineCode","value":"TypeError","position":{"start":{"line":324,"column":36,"offset":15643},"end":{"line":324,"column":47,"offset":15654},"indent":[]}},{"type":"text","value":" if a header name is used that is not a valid HTTP Header name. The mutation operations will throw a ","position":{"start":{"line":324,"column":47,"offset":15654},"end":{"line":324,"column":148,"offset":15755},"indent":[]}},{"type":"inlineCode","value":"TypeError","position":{"start":{"line":324,"column":148,"offset":15755},"end":{"line":324,"column":159,"offset":15766},"indent":[]}},{"type":"text","value":" if there is an immutable guard (","position":{"start":{"line":324,"column":159,"offset":15766},"end":{"line":324,"column":192,"offset":15799},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#guard","children":[{"type":"text","value":"see below","position":{"start":{"line":324,"column":193,"offset":15800},"end":{"line":324,"column":202,"offset":15809},"indent":[]}}],"position":{"start":{"line":324,"column":192,"offset":15799},"end":{"line":324,"column":281,"offset":15888},"indent":[]}},{"type":"text","value":"). Otherwise, they fail silently. For example:","position":{"start":{"line":324,"column":281,"offset":15888},"end":{"line":324,"column":327,"offset":15934},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":15608},"end":{"line":324,"column":327,"offset":15934},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const myResponse = Response.error();\ntry {\n  myResponse.headers.set('Origin', 'http://mybank.com');\n} catch (e) {\n  console.log('Cannot pretend to be a bank!');\n}","position":{"start":{"line":326,"column":1,"offset":15938},"end":{"line":333,"column":4,"offset":16115},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A good use case for headers is checking whether the content type is correct before you process it further. For example:","position":{"start":{"line":335,"column":1,"offset":16119},"end":{"line":335,"column":120,"offset":16238},"indent":[]}}],"position":{"start":{"line":335,"column":1,"offset":16119},"end":{"line":335,"column":120,"offset":16238},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"fetch(myRequest)\n  .then(response => {\n     const contentType = response.headers.get('content-type');\n     if (!contentType || !contentType.includes('application/json')) {\n       throw new TypeError(\"Oops, we haven't got JSON!\");\n     }\n     return response.json();\n  })\n  .then(data => {\n      /* process your data further */\n  })\n  .catch(error => console.error(error));","position":{"start":{"line":337,"column":1,"offset":16242},"end":{"line":350,"column":4,"offset":16635},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"link","title":"Permalink to Guard","url":"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#guard","children":[{"type":"text","value":"Guard","position":{"start":{"line":352,"column":6,"offset":16644},"end":{"line":352,"column":11,"offset":16649},"indent":[]}}],"position":{"start":{"line":352,"column":5,"offset":16643},"end":{"line":352,"column":111,"offset":16749},"indent":[]}}],"position":{"start":{"line":352,"column":1,"offset":16639},"end":{"line":352,"column":111,"offset":16749},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Since headers can be sent in requests and received in responses, and have various limitations about what information can and should be mutable, headers' objects have a ","position":{"start":{"line":354,"column":1,"offset":16753},"end":{"line":354,"column":169,"offset":16921},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"guard","position":{"start":{"line":354,"column":170,"offset":16922},"end":{"line":354,"column":175,"offset":16927},"indent":[]}}],"position":{"start":{"line":354,"column":169,"offset":16921},"end":{"line":354,"column":176,"offset":16928},"indent":[]}},{"type":"text","value":" property. This is not exposed to the Web, but it affects which mutation operations are allowed on the headers object.","position":{"start":{"line":354,"column":176,"offset":16928},"end":{"line":354,"column":294,"offset":17046},"indent":[]}}],"position":{"start":{"line":354,"column":1,"offset":16753},"end":{"line":354,"column":294,"offset":17046},"indent":[]}},{"type":"html","value":"</details>","position":{"start":{"line":358,"column":1,"offset":17054},"end":{"line":358,"column":11,"offset":17064},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Fetch","position":{"start":{"line":360,"column":3,"offset":17070},"end":{"line":360,"column":8,"offset":17075},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":17068},"end":{"line":360,"column":8,"offset":17075},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"fetch('/data.json')  .then(response => response.json())  .then(data => {    console.log(data)  })  .catch(err => ...)","position":{"start":{"line":362,"column":1,"offset":17079},"end":{"line":364,"column":4,"offset":17208},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Response","position":{"start":{"line":366,"column":5,"offset":17216},"end":{"line":366,"column":13,"offset":17224},"indent":[]}}],"position":{"start":{"line":366,"column":1,"offset":17212},"end":{"line":366,"column":13,"offset":17224},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"fetch('/data.json').then(res => {  res.text()       // response body (=> Promise)  res.json()       // parse via JSON (=> Promise)  res.status       //=> 200  res.statusText   //=> 'OK'  res.redirected   //=> false  res.ok           //=> true  res.url          //=> 'http://site.com/data.json'  res.type         //=> 'basic'                   //   ('cors' 'default' 'error'                   //    'opaque' 'opaqueredirect')","position":{"start":{"line":368,"column":1,"offset":17228},"end":{"line":370,"column":4,"offset":17664},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"  res.headers.get('Content-Type')})","position":{"start":{"line":372,"column":1,"offset":17668},"end":{"line":374,"column":4,"offset":17715},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Request options","position":{"start":{"line":376,"column":5,"offset":17723},"end":{"line":376,"column":20,"offset":17738},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":17719},"end":{"line":376,"column":20,"offset":17738},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"fetch('/data.json', {  method: 'post',  body: new FormData(form), // post body  body: JSON.stringify(...),","position":{"start":{"line":378,"column":1,"offset":17742},"end":{"line":380,"column":4,"offset":17860},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"  headers: {    'Accept': 'application/json'  },","position":{"start":{"line":382,"column":1,"offset":17864},"end":{"line":384,"column":4,"offset":17924},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"  credentials: 'same-origin', // send cookies  credentials: 'include',     // send cookies, even in CORS","position":{"start":{"line":386,"column":1,"offset":17928},"end":{"line":388,"column":4,"offset":18044},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"})","position":{"start":{"line":390,"column":1,"offset":18048},"end":{"line":392,"column":4,"offset":18062},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Catching errors","position":{"start":{"line":394,"column":5,"offset":18070},"end":{"line":394,"column":20,"offset":18085},"indent":[]}}],"position":{"start":{"line":394,"column":1,"offset":18066},"end":{"line":394,"column":20,"offset":18085},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"fetch('/data.json')  .then(checkStatus)","position":{"start":{"line":396,"column":1,"offset":18089},"end":{"line":398,"column":4,"offset":18140},"indent":[1,1]}},{"type":"code","lang":"js","meta":null,"value":"function checkStatus (res) {  if (res.status >= 200 && res.status < 300) {    return res  } else {    let err = new Error(res.statusText)    err.response = res    throw err  }}","position":{"start":{"line":400,"column":1,"offset":18144},"end":{"line":402,"column":4,"offset":18332},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Non-2xx responses are still successful requests. Use another function to turn them to errors.","position":{"start":{"line":404,"column":1,"offset":18336},"end":{"line":404,"column":94,"offset":18429},"indent":[]}}],"position":{"start":{"line":404,"column":1,"offset":18336},"end":{"line":404,"column":94,"offset":18429},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Using with node.js","position":{"start":{"line":406,"column":5,"offset":18437},"end":{"line":406,"column":23,"offset":18455},"indent":[]}}],"position":{"start":{"line":406,"column":1,"offset":18433},"end":{"line":406,"column":23,"offset":18455},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const fetch = require('isomorphic-fetch')","position":{"start":{"line":408,"column":1,"offset":18459},"end":{"line":410,"column":4,"offset":18512},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"See: ","position":{"start":{"line":412,"column":1,"offset":18516},"end":{"line":412,"column":6,"offset":18521},"indent":[]}},{"type":"link","title":null,"url":"https://npmjs.com/package/isomorphic-fetch","children":[{"type":"text","value":"isomorphic-fetch","position":{"start":{"line":412,"column":7,"offset":18522},"end":{"line":412,"column":23,"offset":18538},"indent":[]}}],"position":{"start":{"line":412,"column":6,"offset":18521},"end":{"line":412,"column":68,"offset":18583},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":412,"column":68,"offset":18583},"end":{"line":412,"column":69,"offset":18584},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"(npmjs.com)","position":{"start":{"line":412,"column":70,"offset":18585},"end":{"line":412,"column":81,"offset":18596},"indent":[]}}],"position":{"start":{"line":412,"column":69,"offset":18584},"end":{"line":412,"column":82,"offset":18597},"indent":[]}}],"position":{"start":{"line":412,"column":1,"offset":18516},"end":{"line":412,"column":82,"offset":18597},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":413,"column":1,"offset":18599}}}}