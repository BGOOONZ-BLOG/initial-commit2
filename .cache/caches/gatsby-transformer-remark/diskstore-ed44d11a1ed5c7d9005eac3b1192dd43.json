{"expireTime":9007200903816788000,"key":"transformer-remark-markdown-html-ast-b7b4513619a5b897d1439b32c11dccb3--","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Data structures","position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":16,"offset":17}}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":16,"offset":17}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<br>","position":{"start":{"line":4,"column":1,"offset":21},"end":{"line":4,"column":5,"offset":25}}},{"type":"element","tagName":"a","properties":{"href":"https://ds-unit-5-lambda.netlify.app/#"},"children":[{"type":"text","value":"https://ds-unit-5-lambda.netlify.app/#","position":{"start":{"line":4,"column":5,"offset":25},"end":{"line":4,"column":43,"offset":63}}}],"position":{"start":{"line":4,"column":5,"offset":25},"end":{"line":4,"column":43,"offset":63}}},{"type":"text","value":".\n","position":{"start":{"line":4,"column":43,"offset":63},"end":{"line":5,"column":1,"offset":66}}},{"type":"raw","value":"<br>","position":{"start":{"line":5,"column":1,"offset":66},"end":{"line":5,"column":5,"offset":70}}},{"type":"text","value":"\n","position":{"start":{"line":5,"column":5,"offset":70},"end":{"line":6,"column":1,"offset":72}}},{"type":"raw","value":"<br>","position":{"start":{"line":6,"column":1,"offset":72},"end":{"line":6,"column":5,"offset":76}}},{"type":"text","value":"\n","position":{"start":{"line":6,"column":5,"offset":76},"end":{"line":7,"column":1,"offset":78}}},{"type":"raw","value":"<br>","position":{"start":{"line":7,"column":1,"offset":78},"end":{"line":7,"column":5,"offset":82}}}],"position":{"start":{"line":4,"column":1,"offset":21},"end":{"line":7,"column":5,"offset":82}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>   Algorithms </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":9,"column":1,"offset":86},"end":{"line":14,"column":5,"offset":451}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>  The Algos Bgoonz Branch </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://thealgorithms.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<br>","position":{"start":{"line":16,"column":1,"offset":455},"end":{"line":26,"column":5,"offset":853}}},{"type":"text","value":"\n"},{"type":"raw","value":"<h1>  Python Data Structures</h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://ds-unit-5-lambda.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>\n<br>\n<br>\n<br>\n<hr>\n<br>\n<br>\n<br>\n<br>\n<h1>   Leetcode </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz.github.io/Leetcode-JS-PY-MD/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":28,"column":1,"offset":857},"end":{"line":47,"column":5,"offset":1639}}},{"type":"text","value":"\n"},{"type":"raw","value":"<br>\n<br>\n<br>\n<h1>   Algorithms </h1>\n<br>\n<iframe sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"     style=\"z-index:-1!important; overflow:scroll;resize:both;\"  src=\"https://bgoonz-branch-the-algos.vercel.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" ></iframe>\n<br>\n<br>\n<br>","position":{"start":{"line":49,"column":1,"offset":1643},"end":{"line":57,"column":5,"offset":2026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Data structures in JavaScript","position":{"start":{"line":59,"column":5,"offset":2034},"end":{"line":59,"column":34,"offset":2063}}}],"position":{"start":{"line":59,"column":1,"offset":2030},"end":{"line":59,"column":34,"offset":2063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":61,"column":1,"offset":2067},"end":{"line":61,"column":28,"offset":2094}}},{"type":"text","value":"H","position":{"start":{"line":61,"column":28,"offset":2094},"end":{"line":61,"column":29,"offset":2095}}},{"type":"raw","value":"</span>","position":{"start":{"line":61,"column":29,"offset":2095},"end":{"line":61,"column":36,"offset":2102}}},{"type":"text","value":"ere's a website I created to practice data structures!","position":{"start":{"line":61,"column":36,"offset":2102},"end":{"line":61,"column":90,"offset":2156}}}],"position":{"start":{"line":61,"column":1,"offset":2067},"end":{"line":61,"column":90,"offset":2156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\">","position":{"start":{"line":63,"column":1,"offset":2160},"end":{"line":63,"column":178,"offset":2337}}},{"type":"raw","value":"<strong>","position":{"start":{"line":63,"column":178,"offset":2337},"end":{"line":63,"column":186,"offset":2345}}},{"type":"text","value":"directory","position":{"start":{"line":63,"column":186,"offset":2345},"end":{"line":63,"column":195,"offset":2354}}},{"type":"raw","value":"</strong>","position":{"start":{"line":63,"column":195,"offset":2354},"end":{"line":63,"column":204,"offset":2363}}},{"type":"raw","value":"<br />","position":{"start":{"line":63,"column":204,"offset":2363},"end":{"line":63,"column":210,"offset":2369}}},{"type":"text","value":"\n","position":{"start":{"line":63,"column":210,"offset":2369},"end":{"line":64,"column":1,"offset":2371}}},{"type":"raw","value":"<em>","position":{"start":{"line":64,"column":1,"offset":2371},"end":{"line":64,"column":5,"offset":2375}}},{"type":"text","value":"Edit description","position":{"start":{"line":64,"column":5,"offset":2375},"end":{"line":64,"column":21,"offset":2391}}},{"type":"raw","value":"</em>","position":{"start":{"line":64,"column":21,"offset":2391},"end":{"line":64,"column":26,"offset":2396}}},{"type":"text","value":"ds-algo-official-c3dw6uapg-bgoonz.vercel.app","position":{"start":{"line":64,"column":26,"offset":2396},"end":{"line":64,"column":70,"offset":2440}}},{"type":"raw","value":"</a>","position":{"start":{"line":64,"column":70,"offset":2440},"end":{"line":64,"column":74,"offset":2444}}},{"type":"raw","value":"<a href=\"https://ds-algo-official-c3dw6uapg-bgoonz.vercel.app/\" class=\"js-mixtapeImage mixtapeImage mixtapeImage--empty u-ignoreBlock\">","position":{"start":{"line":64,"column":74,"offset":2444},"end":{"line":64,"column":209,"offset":2579}}},{"type":"raw","value":"</a>","position":{"start":{"line":64,"column":209,"offset":2579},"end":{"line":64,"column":213,"offset":2583}}}],"position":{"start":{"line":63,"column":1,"offset":2160},"end":{"line":64,"column":213,"offset":2583}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":66,"column":1,"offset":2587},"end":{"line":66,"column":28,"offset":2614}}},{"type":"text","value":"H","position":{"start":{"line":66,"column":28,"offset":2614},"end":{"line":66,"column":29,"offset":2615}}},{"type":"raw","value":"</span>","position":{"start":{"line":66,"column":29,"offset":2615},"end":{"line":66,"column":36,"offset":2622}}},{"type":"text","value":"ere's the repo that the website is built on:","position":{"start":{"line":66,"column":36,"offset":2622},"end":{"line":66,"column":80,"offset":2666}}}],"position":{"start":{"line":66,"column":1,"offset":2587},"end":{"line":66,"column":80,"offset":2666}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"markup--anchor markup--mixtapeEmbed-anchor\" title=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\">","position":{"start":{"line":68,"column":1,"offset":2670},"end":{"line":68,"column":156,"offset":2825}}},{"type":"raw","value":"<strong>","position":{"start":{"line":68,"column":156,"offset":2825},"end":{"line":68,"column":164,"offset":2833}}},{"type":"text","value":"bgoonz/DS-ALGO-OFFICIAL","position":{"start":{"line":68,"column":164,"offset":2833},"end":{"line":68,"column":187,"offset":2856}}},{"type":"raw","value":"</strong>","position":{"start":{"line":68,"column":187,"offset":2856},"end":{"line":68,"column":196,"offset":2865}}},{"type":"raw","value":"<br />","position":{"start":{"line":68,"column":196,"offset":2865},"end":{"line":68,"column":202,"offset":2871}}},{"type":"text","value":"\n","position":{"start":{"line":68,"column":202,"offset":2871},"end":{"line":69,"column":1,"offset":2873}}},{"type":"raw","value":"<em>","position":{"start":{"line":69,"column":1,"offset":2873},"end":{"line":69,"column":5,"offset":2877}}},{"type":"text","value":"Navigation ####Author:Bryan Guner Big O notation is the language we use for talking about how long an algorithm takes…","position":{"start":{"line":69,"column":5,"offset":2877},"end":{"line":69,"column":123,"offset":2995}}},{"type":"raw","value":"</em>","position":{"start":{"line":69,"column":123,"offset":2995},"end":{"line":69,"column":128,"offset":3000}}},{"type":"text","value":"github.com","position":{"start":{"line":69,"column":128,"offset":3000},"end":{"line":69,"column":138,"offset":3010}}},{"type":"raw","value":"</a>","position":{"start":{"line":69,"column":138,"offset":3010},"end":{"line":69,"column":142,"offset":3014}}},{"type":"raw","value":"<a href=\"https://github.com/bgoonz/DS-ALGO-OFFICIAL\" class=\"js-mixtapeImage mixtapeImage u-ignoreBlock\">","position":{"start":{"line":69,"column":142,"offset":3014},"end":{"line":69,"column":246,"offset":3118}}},{"type":"raw","value":"</a>","position":{"start":{"line":69,"column":246,"offset":3118},"end":{"line":69,"column":250,"offset":3122}}}],"position":{"start":{"line":68,"column":1,"offset":2670},"end":{"line":69,"column":250,"offset":3122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<span class=\"graf-dropCap\">","position":{"start":{"line":71,"column":1,"offset":3126},"end":{"line":71,"column":28,"offset":3153}}},{"type":"text","value":"H","position":{"start":{"line":71,"column":28,"offset":3153},"end":{"line":71,"column":29,"offset":3154}}},{"type":"raw","value":"</span>","position":{"start":{"line":71,"column":29,"offset":3154},"end":{"line":71,"column":36,"offset":3161}}},{"type":"text","value":"ere's a live code editor where you can mess with any of the examples…","position":{"start":{"line":71,"column":36,"offset":3161},"end":{"line":71,"column":105,"offset":3230}}}],"position":{"start":{"line":71,"column":1,"offset":3126},"end":{"line":71,"column":105,"offset":3230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Resources (article content below):","position":{"start":{"line":73,"column":5,"offset":3238},"end":{"line":73,"column":39,"offset":3272}}}],"position":{"start":{"line":73,"column":1,"offset":3234},"end":{"line":73,"column":39,"offset":3272}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Videos","position":{"start":{"line":75,"column":6,"offset":3281},"end":{"line":75,"column":12,"offset":3287}}}],"position":{"start":{"line":75,"column":1,"offset":3276},"end":{"line":75,"column":12,"offset":3287}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"53c4\">","position":{"start":{"line":77,"column":5,"offset":3295},"end":{"line":77,"column":21,"offset":3311}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=0IAPZzGSbME&amp;list=PLDN4rrl48XKpZkf03iYFl-O29szjTrs_O&amp;index=2&amp;t=0s\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":77,"column":21,"offset":3311},"end":{"line":77,"column":181,"offset":3471}}},{"type":"text","value":"Abdul Bari: YouTubeChannel for Algorithms","position":{"start":{"line":77,"column":181,"offset":3471},"end":{"line":77,"column":222,"offset":3512}}},{"type":"raw","value":"</a>","position":{"start":{"line":77,"column":222,"offset":3512},"end":{"line":77,"column":226,"offset":3516}}},{"type":"raw","value":"</span>","position":{"start":{"line":77,"column":226,"offset":3516},"end":{"line":77,"column":233,"offset":3523}}}],"position":{"start":{"line":77,"column":1,"offset":3291},"end":{"line":77,"column":233,"offset":3523}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ab93\">","position":{"start":{"line":78,"column":5,"offset":3529},"end":{"line":78,"column":21,"offset":3545}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=lxja8wBwN0k&amp;list=PLKKfKV1b9e8ps6dD3QA5KFfHdiWj9cB1s\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":78,"column":21,"offset":3545},"end":{"line":78,"column":160,"offset":3684}}},{"type":"text","value":"Data Structures and algorithms","position":{"start":{"line":78,"column":160,"offset":3684},"end":{"line":78,"column":190,"offset":3714}}},{"type":"raw","value":"</a>","position":{"start":{"line":78,"column":190,"offset":3714},"end":{"line":78,"column":194,"offset":3718}}},{"type":"raw","value":"</span>","position":{"start":{"line":78,"column":194,"offset":3718},"end":{"line":78,"column":201,"offset":3725}}}],"position":{"start":{"line":78,"column":1,"offset":3525},"end":{"line":78,"column":201,"offset":3725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e614\">","position":{"start":{"line":79,"column":5,"offset":3731},"end":{"line":79,"column":21,"offset":3747}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/playlist?list=PLmGElG-9wxc9Us6IK6Qy-KHlG_F3IS6Q9\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":79,"column":21,"offset":3747},"end":{"line":79,"column":145,"offset":3871}}},{"type":"text","value":"Data Structures and algorithms Course","position":{"start":{"line":79,"column":145,"offset":3871},"end":{"line":79,"column":182,"offset":3908}}},{"type":"raw","value":"</a>","position":{"start":{"line":79,"column":182,"offset":3908},"end":{"line":79,"column":186,"offset":3912}}},{"type":"raw","value":"</span>","position":{"start":{"line":79,"column":186,"offset":3912},"end":{"line":79,"column":193,"offset":3919}}}],"position":{"start":{"line":79,"column":1,"offset":3727},"end":{"line":79,"column":193,"offset":3919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3d48\">","position":{"start":{"line":80,"column":5,"offset":3925},"end":{"line":80,"column":21,"offset":3941}}},{"type":"raw","value":"<a href=\"https://www.khanacademy.org/computing/computer-science/algorithms\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":80,"column":21,"offset":3941},"end":{"line":80,"column":138,"offset":4058}}},{"type":"text","value":"Khan Academy","position":{"start":{"line":80,"column":138,"offset":4058},"end":{"line":80,"column":150,"offset":4070}}},{"type":"raw","value":"</a>","position":{"start":{"line":80,"column":150,"offset":4070},"end":{"line":80,"column":154,"offset":4074}}},{"type":"raw","value":"</span>","position":{"start":{"line":80,"column":154,"offset":4074},"end":{"line":80,"column":161,"offset":4081}}}],"position":{"start":{"line":80,"column":1,"offset":3921},"end":{"line":80,"column":161,"offset":4081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ac90\">","position":{"start":{"line":81,"column":5,"offset":4087},"end":{"line":81,"column":21,"offset":4103}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/playlist?list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":81,"column":21,"offset":4103},"end":{"line":81,"column":145,"offset":4227}}},{"type":"text","value":"Data structures by mycodeschool","position":{"start":{"line":81,"column":145,"offset":4227},"end":{"line":81,"column":176,"offset":4258}}},{"type":"raw","value":"</a>","position":{"start":{"line":81,"column":176,"offset":4258},"end":{"line":81,"column":180,"offset":4262}}},{"type":"text","value":"Pre-requisite for this lesson is good understanding of pointers in C.","position":{"start":{"line":81,"column":180,"offset":4262},"end":{"line":81,"column":249,"offset":4331}}},{"type":"raw","value":"</span>","position":{"start":{"line":81,"column":249,"offset":4331},"end":{"line":81,"column":256,"offset":4338}}}],"position":{"start":{"line":81,"column":1,"offset":4083},"end":{"line":81,"column":256,"offset":4338}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"9bd9\">","position":{"start":{"line":82,"column":5,"offset":4344},"end":{"line":82,"column":21,"offset":4360}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":82,"column":21,"offset":4360},"end":{"line":82,"column":160,"offset":4499}}},{"type":"text","value":"MIT 6.006: Intro to Algorithms(2011)","position":{"start":{"line":82,"column":160,"offset":4499},"end":{"line":82,"column":196,"offset":4535}}},{"type":"raw","value":"</a>","position":{"start":{"line":82,"column":196,"offset":4535},"end":{"line":82,"column":200,"offset":4539}}},{"type":"raw","value":"</span>","position":{"start":{"line":82,"column":200,"offset":4539},"end":{"line":82,"column":207,"offset":4546}}}],"position":{"start":{"line":82,"column":1,"offset":4340},"end":{"line":82,"column":207,"offset":4546}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"71f0\">","position":{"start":{"line":83,"column":5,"offset":4552},"end":{"line":83,"column":21,"offset":4568}}},{"type":"raw","value":"<a href=\"https://www.youtube.com/watch?v=5_5oE5lgrhw&amp;list=PLu0W_9lII9ahIappRPN0MCAgtOu3lQjQi\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":83,"column":21,"offset":4568},"end":{"line":83,"column":160,"offset":4707}}},{"type":"text","value":"Data Structures and Algorithms by Codewithharry","position":{"start":{"line":83,"column":160,"offset":4707},"end":{"line":83,"column":207,"offset":4754}}},{"type":"raw","value":"</a>","position":{"start":{"line":83,"column":207,"offset":4754},"end":{"line":83,"column":211,"offset":4758}}},{"type":"raw","value":"</span>","position":{"start":{"line":83,"column":211,"offset":4758},"end":{"line":83,"column":218,"offset":4765}}}],"position":{"start":{"line":83,"column":1,"offset":4548},"end":{"line":83,"column":218,"offset":4765}}},{"type":"text","value":"\n"}],"position":{"start":{"line":77,"column":1,"offset":3291},"end":{"line":83,"column":218,"offset":4765}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Books","position":{"start":{"line":85,"column":6,"offset":4774},"end":{"line":85,"column":11,"offset":4779}}}],"position":{"start":{"line":85,"column":1,"offset":4769},"end":{"line":85,"column":11,"offset":4779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"2eac\">","position":{"start":{"line":87,"column":5,"offset":4787},"end":{"line":87,"column":21,"offset":4803}}},{"type":"raw","value":"<a href=\"https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":87,"column":21,"offset":4803},"end":{"line":87,"column":154,"offset":4936}}},{"type":"text","value":"Introduction to Algorithms","position":{"start":{"line":87,"column":154,"offset":4936},"end":{"line":87,"column":180,"offset":4962}}},{"type":"raw","value":"</a>","position":{"start":{"line":87,"column":180,"offset":4962},"end":{"line":87,"column":184,"offset":4966}}},{"type":"text","value":" by Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein","position":{"start":{"line":87,"column":184,"offset":4966},"end":{"line":87,"column":264,"offset":5046}}},{"type":"raw","value":"</span>","position":{"start":{"line":87,"column":264,"offset":5046},"end":{"line":87,"column":271,"offset":5053}}}],"position":{"start":{"line":87,"column":1,"offset":4783},"end":{"line":87,"column":271,"offset":5053}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3e8d\">","position":{"start":{"line":88,"column":5,"offset":5059},"end":{"line":88,"column":21,"offset":5075}}},{"type":"raw","value":"<a href=\"http://www.sso.sy/sites/default/files/competitive%20programming%203_1.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":88,"column":21,"offset":5075},"end":{"line":88,"column":146,"offset":5200}}},{"type":"text","value":"Competitive Programming 3","position":{"start":{"line":88,"column":146,"offset":5200},"end":{"line":88,"column":171,"offset":5225}}},{"type":"raw","value":"</a>","position":{"start":{"line":88,"column":171,"offset":5225},"end":{"line":88,"column":175,"offset":5229}}},{"type":"text","value":" by Steven Halim and Felix Halim","position":{"start":{"line":88,"column":175,"offset":5229},"end":{"line":88,"column":207,"offset":5261}}},{"type":"raw","value":"</span>","position":{"start":{"line":88,"column":207,"offset":5261},"end":{"line":88,"column":214,"offset":5268}}}],"position":{"start":{"line":88,"column":1,"offset":5055},"end":{"line":88,"column":214,"offset":5268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3aa3\">","position":{"start":{"line":89,"column":5,"offset":5274},"end":{"line":89,"column":21,"offset":5290}}},{"type":"raw","value":"<a href=\"https://cses.fi/book/book.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":89,"column":21,"offset":5290},"end":{"line":89,"column":102,"offset":5371}}},{"type":"text","value":"Competitive Programmers Hand Book","position":{"start":{"line":89,"column":102,"offset":5371},"end":{"line":89,"column":135,"offset":5404}}},{"type":"raw","value":"</a>","position":{"start":{"line":89,"column":135,"offset":5404},"end":{"line":89,"column":139,"offset":5408}}},{"type":"text","value":" Beginner friendly hand book for competitive programmers.","position":{"start":{"line":89,"column":139,"offset":5408},"end":{"line":89,"column":196,"offset":5465}}},{"type":"raw","value":"</span>","position":{"start":{"line":89,"column":196,"offset":5465},"end":{"line":89,"column":203,"offset":5472}}}],"position":{"start":{"line":89,"column":1,"offset":5270},"end":{"line":89,"column":203,"offset":5472}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"3c02\">","position":{"start":{"line":90,"column":5,"offset":5478},"end":{"line":90,"column":21,"offset":5494}}},{"type":"raw","value":"<a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Data%20Structures%20and%20Algorithms%20-%20Narasimha%20Karumanchi.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":90,"column":21,"offset":5494},"end":{"line":90,"column":229,"offset":5702}}},{"type":"text","value":"Data Structures and Algorithms Made Easy","position":{"start":{"line":90,"column":229,"offset":5702},"end":{"line":90,"column":269,"offset":5742}}},{"type":"raw","value":"</a>","position":{"start":{"line":90,"column":269,"offset":5742},"end":{"line":90,"column":273,"offset":5746}}},{"type":"text","value":" by Narasimha Karumanchi","position":{"start":{"line":90,"column":273,"offset":5746},"end":{"line":90,"column":297,"offset":5770}}},{"type":"raw","value":"</span>","position":{"start":{"line":90,"column":297,"offset":5770},"end":{"line":90,"column":304,"offset":5777}}}],"position":{"start":{"line":90,"column":1,"offset":5474},"end":{"line":90,"column":304,"offset":5777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"93ec\">","position":{"start":{"line":91,"column":5,"offset":5783},"end":{"line":91,"column":21,"offset":5799}}},{"type":"raw","value":"<a href=\"https://github.com/Amchuz/My-Data-Structures-and-Algorithms-Resources/raw/master/Books/Learning%20Algorithms%20Through%20Programming%20and%20Puzzle%20Solving.pdf\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":91,"column":21,"offset":5799},"end":{"line":91,"column":234,"offset":6012}}},{"type":"text","value":"Learning Algorithms Through Programming and Puzzle Solving","position":{"start":{"line":91,"column":234,"offset":6012},"end":{"line":91,"column":292,"offset":6070}}},{"type":"raw","value":"</a>","position":{"start":{"line":91,"column":292,"offset":6070},"end":{"line":91,"column":296,"offset":6074}}},{"type":"text","value":" by Alexander Kulikov and Pavel Pevzner","position":{"start":{"line":91,"column":296,"offset":6074},"end":{"line":91,"column":335,"offset":6113}}},{"type":"raw","value":"</span>","position":{"start":{"line":91,"column":335,"offset":6113},"end":{"line":91,"column":342,"offset":6120}}}],"position":{"start":{"line":91,"column":1,"offset":5779},"end":{"line":91,"column":342,"offset":6120}}},{"type":"text","value":"\n"}],"position":{"start":{"line":87,"column":1,"offset":4783},"end":{"line":91,"column":342,"offset":6120}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Coding practice","position":{"start":{"line":93,"column":6,"offset":6129},"end":{"line":93,"column":21,"offset":6144}}}],"position":{"start":{"line":93,"column":1,"offset":6124},"end":{"line":93,"column":21,"offset":6144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"824c\">","position":{"start":{"line":95,"column":5,"offset":6152},"end":{"line":95,"column":21,"offset":6168}}},{"type":"raw","value":"<a href=\"https://leetcode.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":95,"column":21,"offset":6168},"end":{"line":95,"column":94,"offset":6241}}},{"type":"text","value":"LeetCode","position":{"start":{"line":95,"column":94,"offset":6241},"end":{"line":95,"column":102,"offset":6249}}},{"type":"raw","value":"</a>","position":{"start":{"line":95,"column":102,"offset":6249},"end":{"line":95,"column":106,"offset":6253}}},{"type":"raw","value":"</span>","position":{"start":{"line":95,"column":106,"offset":6253},"end":{"line":95,"column":113,"offset":6260}}}],"position":{"start":{"line":95,"column":1,"offset":6148},"end":{"line":95,"column":113,"offset":6260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a528\">","position":{"start":{"line":96,"column":5,"offset":6266},"end":{"line":96,"column":21,"offset":6282}}},{"type":"raw","value":"<a href=\"https://www.interviewbit.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":96,"column":21,"offset":6282},"end":{"line":96,"column":102,"offset":6363}}},{"type":"text","value":"InterviewBit","position":{"start":{"line":96,"column":102,"offset":6363},"end":{"line":96,"column":114,"offset":6375}}},{"type":"raw","value":"</a>","position":{"start":{"line":96,"column":114,"offset":6375},"end":{"line":96,"column":118,"offset":6379}}},{"type":"raw","value":"</span>","position":{"start":{"line":96,"column":118,"offset":6379},"end":{"line":96,"column":125,"offset":6386}}}],"position":{"start":{"line":96,"column":1,"offset":6262},"end":{"line":96,"column":125,"offset":6386}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"fa41\">","position":{"start":{"line":97,"column":5,"offset":6392},"end":{"line":97,"column":21,"offset":6408}}},{"type":"raw","value":"<a href=\"https://codility.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":97,"column":21,"offset":6408},"end":{"line":97,"column":94,"offset":6481}}},{"type":"text","value":"Codility","position":{"start":{"line":97,"column":94,"offset":6481},"end":{"line":97,"column":102,"offset":6489}}},{"type":"raw","value":"</a>","position":{"start":{"line":97,"column":102,"offset":6489},"end":{"line":97,"column":106,"offset":6493}}},{"type":"raw","value":"</span>","position":{"start":{"line":97,"column":106,"offset":6493},"end":{"line":97,"column":113,"offset":6500}}}],"position":{"start":{"line":97,"column":1,"offset":6388},"end":{"line":97,"column":113,"offset":6500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"6c61\">","position":{"start":{"line":98,"column":5,"offset":6506},"end":{"line":98,"column":21,"offset":6522}}},{"type":"raw","value":"<a href=\"https://www.hackerrank.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":98,"column":21,"offset":6522},"end":{"line":98,"column":100,"offset":6601}}},{"type":"text","value":"HackerRank","position":{"start":{"line":98,"column":100,"offset":6601},"end":{"line":98,"column":110,"offset":6611}}},{"type":"raw","value":"</a>","position":{"start":{"line":98,"column":110,"offset":6611},"end":{"line":98,"column":114,"offset":6615}}},{"type":"raw","value":"</span>","position":{"start":{"line":98,"column":114,"offset":6615},"end":{"line":98,"column":121,"offset":6622}}}],"position":{"start":{"line":98,"column":1,"offset":6502},"end":{"line":98,"column":121,"offset":6622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"dff6\">","position":{"start":{"line":99,"column":5,"offset":6628},"end":{"line":99,"column":21,"offset":6644}}},{"type":"raw","value":"<a href=\"https://projecteuler.net/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":99,"column":21,"offset":6644},"end":{"line":99,"column":98,"offset":6721}}},{"type":"text","value":"Project Euler","position":{"start":{"line":99,"column":98,"offset":6721},"end":{"line":99,"column":111,"offset":6734}}},{"type":"raw","value":"</a>","position":{"start":{"line":99,"column":111,"offset":6734},"end":{"line":99,"column":115,"offset":6738}}},{"type":"raw","value":"</span>","position":{"start":{"line":99,"column":115,"offset":6738},"end":{"line":99,"column":122,"offset":6745}}}],"position":{"start":{"line":99,"column":1,"offset":6624},"end":{"line":99,"column":122,"offset":6745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"b2dd\">","position":{"start":{"line":100,"column":5,"offset":6751},"end":{"line":100,"column":21,"offset":6767}}},{"type":"raw","value":"<a href=\"https://spoj.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":100,"column":21,"offset":6767},"end":{"line":100,"column":90,"offset":6836}}},{"type":"text","value":"Spoj","position":{"start":{"line":100,"column":90,"offset":6836},"end":{"line":100,"column":94,"offset":6840}}},{"type":"raw","value":"</a>","position":{"start":{"line":100,"column":94,"offset":6840},"end":{"line":100,"column":98,"offset":6844}}},{"type":"raw","value":"</span>","position":{"start":{"line":100,"column":98,"offset":6844},"end":{"line":100,"column":105,"offset":6851}}}],"position":{"start":{"line":100,"column":1,"offset":6747},"end":{"line":100,"column":105,"offset":6851}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"c8e8\">","position":{"start":{"line":101,"column":5,"offset":6857},"end":{"line":101,"column":21,"offset":6873}}},{"type":"raw","value":"<a href=\"https://code.google.com/codejam/contests.html\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":101,"column":21,"offset":6873},"end":{"line":101,"column":118,"offset":6970}}},{"type":"text","value":"Google Code Jam practice problems","position":{"start":{"line":101,"column":118,"offset":6970},"end":{"line":101,"column":151,"offset":7003}}},{"type":"raw","value":"</a>","position":{"start":{"line":101,"column":151,"offset":7003},"end":{"line":101,"column":155,"offset":7007}}},{"type":"raw","value":"</span>","position":{"start":{"line":101,"column":155,"offset":7007},"end":{"line":101,"column":162,"offset":7014}}}],"position":{"start":{"line":101,"column":1,"offset":6853},"end":{"line":101,"column":162,"offset":7014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e8bb\">","position":{"start":{"line":102,"column":5,"offset":7020},"end":{"line":102,"column":21,"offset":7036}}},{"type":"raw","value":"<a href=\"https://www.hackerearth.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":102,"column":21,"offset":7036},"end":{"line":102,"column":101,"offset":7116}}},{"type":"text","value":"HackerEarth","position":{"start":{"line":102,"column":101,"offset":7116},"end":{"line":102,"column":112,"offset":7127}}},{"type":"raw","value":"</a>","position":{"start":{"line":102,"column":112,"offset":7127},"end":{"line":102,"column":116,"offset":7131}}},{"type":"raw","value":"</span>","position":{"start":{"line":102,"column":116,"offset":7131},"end":{"line":102,"column":123,"offset":7138}}}],"position":{"start":{"line":102,"column":1,"offset":7016},"end":{"line":102,"column":123,"offset":7138}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e803\">","position":{"start":{"line":103,"column":5,"offset":7144},"end":{"line":103,"column":21,"offset":7160}}},{"type":"raw","value":"<a href=\"https://www.topcoder.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":103,"column":21,"offset":7160},"end":{"line":103,"column":98,"offset":7237}}},{"type":"text","value":"Top Coder","position":{"start":{"line":103,"column":98,"offset":7237},"end":{"line":103,"column":107,"offset":7246}}},{"type":"raw","value":"</a>","position":{"start":{"line":103,"column":107,"offset":7246},"end":{"line":103,"column":111,"offset":7250}}},{"type":"raw","value":"</span>","position":{"start":{"line":103,"column":111,"offset":7250},"end":{"line":103,"column":118,"offset":7257}}}],"position":{"start":{"line":103,"column":1,"offset":7140},"end":{"line":103,"column":118,"offset":7257}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"294e\">","position":{"start":{"line":104,"column":5,"offset":7263},"end":{"line":104,"column":21,"offset":7279}}},{"type":"raw","value":"<a href=\"https://www.codechef.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":104,"column":21,"offset":7279},"end":{"line":104,"column":98,"offset":7356}}},{"type":"text","value":"CodeChef","position":{"start":{"line":104,"column":98,"offset":7356},"end":{"line":104,"column":106,"offset":7364}}},{"type":"raw","value":"</a>","position":{"start":{"line":104,"column":106,"offset":7364},"end":{"line":104,"column":110,"offset":7368}}},{"type":"raw","value":"</span>","position":{"start":{"line":104,"column":110,"offset":7368},"end":{"line":104,"column":117,"offset":7375}}}],"position":{"start":{"line":104,"column":1,"offset":7259},"end":{"line":104,"column":117,"offset":7375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"9c05\">","position":{"start":{"line":105,"column":5,"offset":7381},"end":{"line":105,"column":21,"offset":7397}}},{"type":"raw","value":"<a href=\"https://www.codewars.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":105,"column":21,"offset":7397},"end":{"line":105,"column":98,"offset":7474}}},{"type":"text","value":"Codewars","position":{"start":{"line":105,"column":98,"offset":7474},"end":{"line":105,"column":106,"offset":7482}}},{"type":"raw","value":"</a>","position":{"start":{"line":105,"column":106,"offset":7482},"end":{"line":105,"column":110,"offset":7486}}},{"type":"raw","value":"</span>","position":{"start":{"line":105,"column":110,"offset":7486},"end":{"line":105,"column":117,"offset":7493}}}],"position":{"start":{"line":105,"column":1,"offset":7377},"end":{"line":105,"column":117,"offset":7493}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"356e\">","position":{"start":{"line":106,"column":5,"offset":7499},"end":{"line":106,"column":21,"offset":7515}}},{"type":"raw","value":"<a href=\"https://codesignal.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":106,"column":21,"offset":7515},"end":{"line":106,"column":96,"offset":7590}}},{"type":"text","value":"CodeSignal","position":{"start":{"line":106,"column":96,"offset":7590},"end":{"line":106,"column":106,"offset":7600}}},{"type":"raw","value":"</a>","position":{"start":{"line":106,"column":106,"offset":7600},"end":{"line":106,"column":110,"offset":7604}}},{"type":"raw","value":"</span>","position":{"start":{"line":106,"column":110,"offset":7604},"end":{"line":106,"column":117,"offset":7611}}}],"position":{"start":{"line":106,"column":1,"offset":7495},"end":{"line":106,"column":117,"offset":7611}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"2d20\">","position":{"start":{"line":107,"column":5,"offset":7617},"end":{"line":107,"column":21,"offset":7633}}},{"type":"raw","value":"<a href=\"http://codekata.com/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":107,"column":21,"offset":7633},"end":{"line":107,"column":93,"offset":7705}}},{"type":"text","value":"CodeKata","position":{"start":{"line":107,"column":93,"offset":7705},"end":{"line":107,"column":101,"offset":7713}}},{"type":"raw","value":"</a>","position":{"start":{"line":107,"column":101,"offset":7713},"end":{"line":107,"column":105,"offset":7717}}},{"type":"raw","value":"</span>","position":{"start":{"line":107,"column":105,"offset":7717},"end":{"line":107,"column":112,"offset":7724}}}],"position":{"start":{"line":107,"column":1,"offset":7613},"end":{"line":107,"column":112,"offset":7724}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"d3bf\">","position":{"start":{"line":108,"column":5,"offset":7730},"end":{"line":108,"column":21,"offset":7746}}},{"type":"raw","value":"<a href=\"https://www.firecode.io/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":108,"column":21,"offset":7746},"end":{"line":108,"column":97,"offset":7822}}},{"type":"text","value":"Firecode","position":{"start":{"line":108,"column":97,"offset":7822},"end":{"line":108,"column":105,"offset":7830}}},{"type":"raw","value":"</a>","position":{"start":{"line":108,"column":105,"offset":7830},"end":{"line":108,"column":109,"offset":7834}}},{"type":"raw","value":"</span>","position":{"start":{"line":108,"column":109,"offset":7834},"end":{"line":108,"column":116,"offset":7841}}}],"position":{"start":{"line":108,"column":1,"offset":7726},"end":{"line":108,"column":116,"offset":7841}}},{"type":"text","value":"\n"}],"position":{"start":{"line":95,"column":1,"offset":6148},"end":{"line":108,"column":116,"offset":7841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Courses","position":{"start":{"line":110,"column":6,"offset":7850},"end":{"line":110,"column":13,"offset":7857}}}],"position":{"start":{"line":110,"column":1,"offset":7845},"end":{"line":110,"column":13,"offset":7857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"eac2\">","position":{"start":{"line":112,"column":5,"offset":7865},"end":{"line":112,"column":21,"offset":7881}}},{"type":"raw","value":"<a href=\"https://academy.zerotomastery.io/p/master-the-coding-interview-faang-interview-prep\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":112,"column":21,"offset":7881},"end":{"line":112,"column":156,"offset":8016}}},{"type":"text","value":"Master the Coding Interview: Big Tech (FAANG) Interviews","position":{"start":{"line":112,"column":156,"offset":8016},"end":{"line":112,"column":212,"offset":8072}}},{"type":"raw","value":"</a>","position":{"start":{"line":112,"column":212,"offset":8072},"end":{"line":112,"column":216,"offset":8076}}},{"type":"text","value":" Course by Andrei and his team.","position":{"start":{"line":112,"column":216,"offset":8076},"end":{"line":112,"column":247,"offset":8107}}},{"type":"raw","value":"</span>","position":{"start":{"line":112,"column":247,"offset":8107},"end":{"line":112,"column":254,"offset":8114}}}],"position":{"start":{"line":112,"column":1,"offset":7861},"end":{"line":112,"column":254,"offset":8114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"36ca\">","position":{"start":{"line":113,"column":5,"offset":8120},"end":{"line":113,"column":21,"offset":8136}}},{"type":"raw","value":"<a href=\"https://realpython.com/python-data-structures\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":113,"column":21,"offset":8136},"end":{"line":113,"column":118,"offset":8233}}},{"type":"text","value":"Common Python Data Structures","position":{"start":{"line":113,"column":118,"offset":8233},"end":{"line":113,"column":147,"offset":8262}}},{"type":"raw","value":"</a>","position":{"start":{"line":113,"column":147,"offset":8262},"end":{"line":113,"column":151,"offset":8266}}},{"type":"text","value":" Data structures are the fundamental constructs around which you build your programs. Each data structure provides a particular way of organizing data so it can be accessed efficiently, depending on your use case. Python ships with an extensive set of data structures in its standard library.","position":{"start":{"line":113,"column":151,"offset":8266},"end":{"line":113,"column":443,"offset":8558}}},{"type":"raw","value":"</span>","position":{"start":{"line":113,"column":443,"offset":8558},"end":{"line":113,"column":450,"offset":8565}}}],"position":{"start":{"line":113,"column":1,"offset":8116},"end":{"line":113,"column":450,"offset":8565}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"cdc9\">","position":{"start":{"line":114,"column":5,"offset":8571},"end":{"line":114,"column":21,"offset":8587}}},{"type":"raw","value":"<a href=\"https://www.geeksforgeeks.org/fork-cpp-course-structure\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":114,"column":21,"offset":8587},"end":{"line":114,"column":128,"offset":8694}}},{"type":"text","value":"Fork CPP","position":{"start":{"line":114,"column":128,"offset":8694},"end":{"line":114,"column":136,"offset":8702}}},{"type":"raw","value":"</a>","position":{"start":{"line":114,"column":136,"offset":8702},"end":{"line":114,"column":140,"offset":8706}}},{"type":"text","value":" A good course for beginners.","position":{"start":{"line":114,"column":140,"offset":8706},"end":{"line":114,"column":169,"offset":8735}}},{"type":"raw","value":"</span>","position":{"start":{"line":114,"column":169,"offset":8735},"end":{"line":114,"column":176,"offset":8742}}}],"position":{"start":{"line":114,"column":1,"offset":8567},"end":{"line":114,"column":176,"offset":8742}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"6d47\">","position":{"start":{"line":115,"column":5,"offset":8748},"end":{"line":115,"column":21,"offset":8764}}},{"type":"raw","value":"<a href=\"https://codeforces.com/edu/course/2\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":115,"column":21,"offset":8764},"end":{"line":115,"column":108,"offset":8851}}},{"type":"text","value":"EDU","position":{"start":{"line":115,"column":108,"offset":8851},"end":{"line":115,"column":111,"offset":8854}}},{"type":"raw","value":"</a>","position":{"start":{"line":115,"column":111,"offset":8854},"end":{"line":115,"column":115,"offset":8858}}},{"type":"text","value":" Advanced course.","position":{"start":{"line":115,"column":115,"offset":8858},"end":{"line":115,"column":132,"offset":8875}}},{"type":"raw","value":"</span>","position":{"start":{"line":115,"column":132,"offset":8875},"end":{"line":115,"column":139,"offset":8882}}}],"position":{"start":{"line":115,"column":1,"offset":8744},"end":{"line":115,"column":139,"offset":8882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8bb5\">","position":{"start":{"line":116,"column":5,"offset":8888},"end":{"line":116,"column":21,"offset":8904}}},{"type":"raw","value":"<a href=\"https://www.udacity.com/course/c-for-programmers--ud210\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":116,"column":21,"offset":8904},"end":{"line":116,"column":128,"offset":9011}}},{"type":"text","value":"C++ For Programmers","position":{"start":{"line":116,"column":128,"offset":9011},"end":{"line":116,"column":147,"offset":9030}}},{"type":"raw","value":"</a>","position":{"start":{"line":116,"column":147,"offset":9030},"end":{"line":116,"column":151,"offset":9034}}},{"type":"text","value":" Learn features and constructs for C++.","position":{"start":{"line":116,"column":151,"offset":9034},"end":{"line":116,"column":190,"offset":9073}}},{"type":"raw","value":"</span>","position":{"start":{"line":116,"column":190,"offset":9073},"end":{"line":116,"column":197,"offset":9080}}}],"position":{"start":{"line":116,"column":1,"offset":8884},"end":{"line":116,"column":197,"offset":9080}}},{"type":"text","value":"\n"}],"position":{"start":{"line":112,"column":1,"offset":7861},"end":{"line":116,"column":197,"offset":9080}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"Guides","position":{"start":{"line":118,"column":6,"offset":9089},"end":{"line":118,"column":12,"offset":9095}}}],"position":{"start":{"line":118,"column":1,"offset":9084},"end":{"line":118,"column":12,"offset":9095}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"e9e9\">","position":{"start":{"line":120,"column":5,"offset":9103},"end":{"line":120,"column":21,"offset":9119}}},{"type":"raw","value":"<a href=\"http://www.geeksforgeeks.org/\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":120,"column":21,"offset":9119},"end":{"line":120,"column":102,"offset":9200}}},{"type":"text","value":"GeeksForGeeks — A CS portal for geeks","position":{"start":{"line":120,"column":102,"offset":9200},"end":{"line":120,"column":139,"offset":9237}}},{"type":"raw","value":"</a>","position":{"start":{"line":120,"column":139,"offset":9237},"end":{"line":120,"column":143,"offset":9241}}},{"type":"raw","value":"</span>","position":{"start":{"line":120,"column":143,"offset":9241},"end":{"line":120,"column":150,"offset":9248}}}],"position":{"start":{"line":120,"column":1,"offset":9099},"end":{"line":120,"column":150,"offset":9248}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a228\">","position":{"start":{"line":121,"column":5,"offset":9254},"end":{"line":121,"column":21,"offset":9270}}},{"type":"raw","value":"<a href=\"https://www.learneroo.com/subjects/8\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":121,"column":21,"offset":9270},"end":{"line":121,"column":109,"offset":9358}}},{"type":"text","value":"Learneroo — Algorithms","position":{"start":{"line":121,"column":109,"offset":9358},"end":{"line":121,"column":131,"offset":9380}}},{"type":"raw","value":"</a>","position":{"start":{"line":121,"column":131,"offset":9380},"end":{"line":121,"column":135,"offset":9384}}},{"type":"raw","value":"</span>","position":{"start":{"line":121,"column":135,"offset":9384},"end":{"line":121,"column":142,"offset":9391}}}],"position":{"start":{"line":121,"column":1,"offset":9250},"end":{"line":121,"column":142,"offset":9391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"a2f0\">","position":{"start":{"line":122,"column":5,"offset":9397},"end":{"line":122,"column":21,"offset":9413}}},{"type":"raw","value":"<a href=\"http://www.topcoder.com/tc?d1=tutorials&amp;d2=alg_index&amp;module=Static\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":122,"column":21,"offset":9413},"end":{"line":122,"column":147,"offset":9539}}},{"type":"text","value":"Top Coder tutorials","position":{"start":{"line":122,"column":147,"offset":9539},"end":{"line":122,"column":166,"offset":9558}}},{"type":"raw","value":"</a>","position":{"start":{"line":122,"column":166,"offset":9558},"end":{"line":122,"column":170,"offset":9562}}},{"type":"raw","value":"</span>","position":{"start":{"line":122,"column":170,"offset":9562},"end":{"line":122,"column":177,"offset":9569}}}],"position":{"start":{"line":122,"column":1,"offset":9393},"end":{"line":122,"column":177,"offset":9569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f3ec\">","position":{"start":{"line":123,"column":5,"offset":9575},"end":{"line":123,"column":21,"offset":9591}}},{"type":"raw","value":"<a href=\"http://www.infoarena.ro/training-path\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":123,"column":21,"offset":9591},"end":{"line":123,"column":110,"offset":9680}}},{"type":"text","value":"Infoarena training path","position":{"start":{"line":123,"column":110,"offset":9680},"end":{"line":123,"column":133,"offset":9703}}},{"type":"raw","value":"</a>","position":{"start":{"line":123,"column":133,"offset":9703},"end":{"line":123,"column":137,"offset":9707}}},{"type":"text","value":" (RO)","position":{"start":{"line":123,"column":137,"offset":9707},"end":{"line":123,"column":142,"offset":9712}}},{"type":"raw","value":"</span>","position":{"start":{"line":123,"column":142,"offset":9712},"end":{"line":123,"column":149,"offset":9719}}}],"position":{"start":{"line":123,"column":1,"offset":9571},"end":{"line":123,"column":149,"offset":9719}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"ec93\">","position":{"start":{"line":124,"column":5,"offset":9725},"end":{"line":124,"column":21,"offset":9741}}},{"type":"text","value":"Steven & Felix Halim — ","position":{"start":{"line":124,"column":21,"offset":9741},"end":{"line":124,"column":44,"offset":9764}}},{"type":"raw","value":"<a href=\"https://uva.onlinejudge.org/index.php?option=com_onlinejudge&amp;Itemid=8&amp;category=118\" class=\"markup--anchor markup--li-anchor\">","position":{"start":{"line":124,"column":44,"offset":9764},"end":{"line":124,"column":186,"offset":9906}}},{"type":"text","value":"Increasing the Lower Bound of Programming Contests","position":{"start":{"line":124,"column":186,"offset":9906},"end":{"line":124,"column":236,"offset":9956}}},{"type":"raw","value":"</a>","position":{"start":{"line":124,"column":236,"offset":9956},"end":{"line":124,"column":240,"offset":9960}}},{"type":"text","value":" (UVA Online Judge)","position":{"start":{"line":124,"column":240,"offset":9960},"end":{"line":124,"column":259,"offset":9979}}},{"type":"raw","value":"</span>","position":{"start":{"line":124,"column":259,"offset":9979},"end":{"line":124,"column":266,"offset":9986}}}],"position":{"start":{"line":124,"column":1,"offset":9721},"end":{"line":124,"column":266,"offset":9986}}},{"type":"text","value":"\n"}],"position":{"start":{"line":120,"column":1,"offset":9099},"end":{"line":124,"column":266,"offset":9986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"space","position":{"start":{"line":126,"column":8,"offset":9997},"end":{"line":126,"column":13,"offset":10002}}}],"position":{"start":{"line":126,"column":7,"offset":9996},"end":{"line":126,"column":14,"offset":10003}}}],"position":{"start":{"line":126,"column":5,"offset":9994},"end":{"line":126,"column":16,"offset":10005}}}],"position":{"start":{"line":126,"column":1,"offset":9990},"end":{"line":126,"column":16,"offset":10005}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The space complexity represents the memory consumption of a data structure. As for most of the things in life, you can't have it all, so it is with the data structures. You will generally need to trade some time for space or the other way around.","position":{"start":{"line":128,"column":4,"offset":10012},"end":{"line":128,"column":250,"offset":10258}}}],"position":{"start":{"line":128,"column":3,"offset":10011},"end":{"line":128,"column":251,"offset":10259}}}],"position":{"start":{"line":128,"column":3,"offset":10011},"end":{"line":128,"column":251,"offset":10259}}},{"type":"text","value":"\n"}],"position":{"start":{"line":128,"column":1,"offset":10009},"end":{"line":128,"column":251,"offset":10259}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"time","position":{"start":{"line":130,"column":6,"offset":10268},"end":{"line":130,"column":10,"offset":10272}}}],"position":{"start":{"line":130,"column":5,"offset":10267},"end":{"line":130,"column":11,"offset":10273}}}],"position":{"start":{"line":130,"column":1,"offset":10263},"end":{"line":130,"column":11,"offset":10273}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The time complexity for a data structure is in general more diverse than its space complexity.","position":{"start":{"line":132,"column":4,"offset":10280},"end":{"line":132,"column":98,"offset":10374}}}],"position":{"start":{"line":132,"column":3,"offset":10279},"end":{"line":132,"column":99,"offset":10375}}}],"position":{"start":{"line":132,"column":3,"offset":10279},"end":{"line":132,"column":99,"offset":10375}}},{"type":"text","value":"\n"}],"position":{"start":{"line":132,"column":1,"offset":10277},"end":{"line":132,"column":99,"offset":10375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Several operations","position":{"start":{"line":134,"column":6,"offset":10384},"end":{"line":134,"column":24,"offset":10402}}}],"position":{"start":{"line":134,"column":5,"offset":10383},"end":{"line":134,"column":25,"offset":10403}}}],"position":{"start":{"line":134,"column":1,"offset":10379},"end":{"line":134,"column":25,"offset":10403}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"In contrary to algorithms, when you look at the time complexity for data structures you need to express it for several operations that you can do with data structures. It can be adding elements, deleting elements, accessing an element or even searching for an element.","position":{"start":{"line":136,"column":4,"offset":10410},"end":{"line":136,"column":272,"offset":10678}}}],"position":{"start":{"line":136,"column":3,"offset":10409},"end":{"line":136,"column":273,"offset":10679}}}],"position":{"start":{"line":136,"column":3,"offset":10409},"end":{"line":136,"column":273,"offset":10679}}},{"type":"text","value":"\n"}],"position":{"start":{"line":136,"column":1,"offset":10407},"end":{"line":136,"column":273,"offset":10679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Dependent on data","position":{"start":{"line":138,"column":6,"offset":10688},"end":{"line":138,"column":23,"offset":10705}}}],"position":{"start":{"line":138,"column":5,"offset":10687},"end":{"line":138,"column":24,"offset":10706}}}],"position":{"start":{"line":138,"column":1,"offset":10683},"end":{"line":138,"column":24,"offset":10706}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Something that data structure and algorithms have in common when talking about time complexity is that they are both dealing with data. When you deal with data you become dependent on them and as a result the time complexity is also dependent of the data that you received. To solve this problem we talk about 3 different time complexity.","position":{"start":{"line":140,"column":4,"offset":10713},"end":{"line":140,"column":342,"offset":11051}}}],"position":{"start":{"line":140,"column":3,"offset":10712},"end":{"line":140,"column":343,"offset":11052}}}],"position":{"start":{"line":140,"column":3,"offset":10712},"end":{"line":140,"column":343,"offset":11052}}},{"type":"text","value":"\n"}],"position":{"start":{"line":140,"column":1,"offset":10710},"end":{"line":140,"column":343,"offset":11052}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"bc8d\">","position":{"start":{"line":142,"column":5,"offset":11060},"end":{"line":142,"column":21,"offset":11076}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The best-case complexity: when the data looks the best","position":{"start":{"line":142,"column":23,"offset":11078},"end":{"line":142,"column":77,"offset":11132}}}],"position":{"start":{"line":142,"column":21,"offset":11076},"end":{"line":142,"column":79,"offset":11134}}},{"type":"raw","value":"</span>","position":{"start":{"line":142,"column":79,"offset":11134},"end":{"line":142,"column":86,"offset":11141}}}],"position":{"start":{"line":142,"column":1,"offset":11056},"end":{"line":142,"column":86,"offset":11141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8b06\">","position":{"start":{"line":143,"column":5,"offset":11147},"end":{"line":143,"column":21,"offset":11163}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The worst-case complexity: when the data looks the worst","position":{"start":{"line":143,"column":23,"offset":11165},"end":{"line":143,"column":79,"offset":11221}}}],"position":{"start":{"line":143,"column":21,"offset":11163},"end":{"line":143,"column":81,"offset":11223}}},{"type":"raw","value":"</span>","position":{"start":{"line":143,"column":81,"offset":11223},"end":{"line":143,"column":88,"offset":11230}}}],"position":{"start":{"line":143,"column":1,"offset":11143},"end":{"line":143,"column":88,"offset":11230}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"881c\">","position":{"start":{"line":144,"column":5,"offset":11236},"end":{"line":144,"column":21,"offset":11252}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"The average-case complexity: when the data looks average","position":{"start":{"line":144,"column":23,"offset":11254},"end":{"line":144,"column":79,"offset":11310}}}],"position":{"start":{"line":144,"column":21,"offset":11252},"end":{"line":144,"column":81,"offset":11312}}},{"type":"raw","value":"</span>","position":{"start":{"line":144,"column":81,"offset":11312},"end":{"line":144,"column":88,"offset":11319}}}],"position":{"start":{"line":144,"column":1,"offset":11232},"end":{"line":144,"column":88,"offset":11319}}},{"type":"text","value":"\n"}],"position":{"start":{"line":142,"column":1,"offset":11056},"end":{"line":144,"column":88,"offset":11319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Big O notation","position":{"start":{"line":146,"column":5,"offset":11327},"end":{"line":146,"column":19,"offset":11341}}}],"position":{"start":{"line":146,"column":1,"offset":11323},"end":{"line":146,"column":19,"offset":11341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The complexity is usually expressed with the Big O notation. The wikipedia page about this subject is pretty complex but you can find here a good summary of the different complexity for the most famous data structures and sorting algorithms.","position":{"start":{"line":148,"column":1,"offset":11345},"end":{"line":148,"column":242,"offset":11586}}}],"position":{"start":{"line":148,"column":1,"offset":11345},"end":{"line":148,"column":242,"offset":11586}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Array data structure","position":{"start":{"line":150,"column":5,"offset":11594},"end":{"line":150,"column":29,"offset":11618}}}],"position":{"start":{"line":150,"column":1,"offset":11590},"end":{"line":150,"column":29,"offset":11618}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*Qk3UYgeqXamRrFLR.gif\" class=\"graf-image\" /></figure>### Definition","position":{"start":{"line":152,"column":1,"offset":11622},"end":{"line":152,"column":127,"offset":11748}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An Array data structure, or simply an Array, is a data structure consisting of a collection of elements (values or variables), each identified by at least one array index or key. The simplest type of data structure is a linear array, also called one-dimensional array. From Wikipedia","position":{"start":{"line":154,"column":1,"offset":11752},"end":{"line":154,"column":284,"offset":12035}}}],"position":{"start":{"line":154,"column":1,"offset":11752},"end":{"line":154,"column":284,"offset":12035}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Arrays are among the oldest and most important data structures and are used by every program. They are also used to implement many other data structures.","position":{"start":{"line":156,"column":1,"offset":12039},"end":{"line":156,"column":154,"offset":12192}}}],"position":{"start":{"line":156,"column":1,"offset":12039},"end":{"line":156,"column":154,"offset":12192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Complexity","position":{"start":{"line":158,"column":2,"offset":12197},"end":{"line":158,"column":12,"offset":12207}}}],"position":{"start":{"line":158,"column":1,"offset":12196},"end":{"line":158,"column":13,"offset":12208}}},{"type":"text","value":"\n","position":{"start":{"line":158,"column":13,"offset":12208},"end":{"line":159,"column":1,"offset":12210}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Average","position":{"start":{"line":159,"column":2,"offset":12211},"end":{"line":159,"column":9,"offset":12218}}}],"position":{"start":{"line":159,"column":1,"offset":12210},"end":{"line":159,"column":10,"offset":12219}}},{"type":"text","value":"\n","position":{"start":{"line":159,"column":10,"offset":12219},"end":{"line":160,"column":1,"offset":12221}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Access Search Insertion Deletion","position":{"start":{"line":160,"column":2,"offset":12222},"end":{"line":160,"column":34,"offset":12254}}}],"position":{"start":{"line":160,"column":1,"offset":12221},"end":{"line":160,"column":35,"offset":12255}}}],"position":{"start":{"line":158,"column":1,"offset":12196},"end":{"line":160,"column":35,"offset":12255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"O(1) O(n) O(1) O(n)","position":{"start":{"line":162,"column":1,"offset":12259},"end":{"line":162,"column":20,"offset":12278}}}],"position":{"start":{"line":162,"column":1,"offset":12259},"end":{"line":162,"column":20,"offset":12278}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*-BJ2hU-CZO2kuzu4x5a53g.png\" class=\"graf-image\" /></figure>indexvalue0 … this is the first value, stored at zero position","position":{"start":{"line":164,"column":1,"offset":12282},"end":{"line":164,"column":181,"offset":12462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"b953\">","position":{"start":{"line":166,"column":5,"offset":12470},"end":{"line":166,"column":21,"offset":12486}}},{"type":"text","value":"The index of an array ","position":{"start":{"line":166,"column":21,"offset":12486},"end":{"line":166,"column":43,"offset":12508}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"runs in sequence","position":{"start":{"line":166,"column":45,"offset":12510},"end":{"line":166,"column":61,"offset":12526}}}],"position":{"start":{"line":166,"column":43,"offset":12508},"end":{"line":166,"column":63,"offset":12528}}},{"type":"raw","value":"</span>","position":{"start":{"line":166,"column":63,"offset":12528},"end":{"line":166,"column":70,"offset":12535}}}],"position":{"start":{"line":166,"column":1,"offset":12466},"end":{"line":167,"column":1,"offset":12537}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"This could be useful for storing data that are required to be ordered, such as rankings or queues","position":{"start":{"line":168,"column":5,"offset":12543},"end":{"line":168,"column":102,"offset":12640}}}],"position":{"start":{"line":168,"column":1,"offset":12539},"end":{"line":169,"column":1,"offset":12642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In JavaScript, array's value could be mixed; meaning value of each index could be of different data, be it String, Number or even Objects","position":{"start":{"line":170,"column":5,"offset":12648},"end":{"line":170,"column":142,"offset":12785}}}],"position":{"start":{"line":170,"column":1,"offset":12644},"end":{"line":170,"column":142,"offset":12785}}},{"type":"text","value":"\n"}],"position":{"start":{"line":166,"column":1,"offset":12466},"end":{"line":170,"column":142,"offset":12785}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"2. Objects","position":{"start":{"line":172,"column":5,"offset":12793},"end":{"line":172,"column":15,"offset":12803}}}],"position":{"start":{"line":172,"column":1,"offset":12789},"end":{"line":172,"column":15,"offset":12803}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of objects as a logical grouping of a bunch of properties.","position":{"start":{"line":174,"column":1,"offset":12807},"end":{"line":174,"column":65,"offset":12871}}}],"position":{"start":{"line":174,"column":1,"offset":12807},"end":{"line":174,"column":65,"offset":12871}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Properties could be some variable that it's storing or some methods that it's using.","position":{"start":{"line":176,"column":1,"offset":12875},"end":{"line":176,"column":85,"offset":12959}}}],"position":{"start":{"line":176,"column":1,"offset":12875},"end":{"line":176,"column":85,"offset":12959}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"I also visualize an object as a table.","position":{"start":{"line":178,"column":1,"offset":12963},"end":{"line":178,"column":39,"offset":13001}}}],"position":{"start":{"line":178,"column":1,"offset":12963},"end":{"line":178,"column":39,"offset":13001}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The main difference is that object's \"index\" need not be numbers and is not necessarily sequenced.","position":{"start":{"line":180,"column":1,"offset":13005},"end":{"line":180,"column":99,"offset":13103}}}],"position":{"start":{"line":180,"column":1,"offset":13005},"end":{"line":180,"column":99,"offset":13103}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/1200/1*KVZkD2zrgEa_47igW8Hq8g.png\" class=\"graf-image\" /></figure>","position":{"start":{"line":182,"column":1,"offset":13107},"end":{"line":182,"column":120,"offset":13226}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Hash Table","position":{"start":{"line":184,"column":5,"offset":13234},"end":{"line":184,"column":19,"offset":13248}}}],"position":{"start":{"line":184,"column":1,"offset":13230},"end":{"line":184,"column":19,"offset":13248}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*avbxLAFocSV6vsl5.gif\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*3GJiRoLyEoZ_aIlO\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":186,"column":1,"offset":13252},"end":{"line":186,"column":237,"offset":13488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Hash Table (Hash Map) is a data structure used to implement an associative array, a structure that can map keys to values. A Hash Table uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. From Wikipedia","position":{"start":{"line":188,"column":4,"offset":13495},"end":{"line":188,"column":275,"offset":13766}}}],"position":{"start":{"line":188,"column":3,"offset":13494},"end":{"line":188,"column":276,"offset":13767}}}],"position":{"start":{"line":188,"column":3,"offset":13494},"end":{"line":188,"column":276,"offset":13767}}},{"type":"text","value":"\n"}],"position":{"start":{"line":188,"column":1,"offset":13492},"end":{"line":188,"column":276,"offset":13767}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hash Tables are considered the more efficient data structure for lookup and for this reason, they are widely used.","position":{"start":{"line":190,"column":1,"offset":13771},"end":{"line":190,"column":115,"offset":13885}}}],"position":{"start":{"line":190,"column":1,"offset":13771},"end":{"line":190,"column":115,"offset":13885}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion","position":{"start":{"line":192,"column":1,"offset":13889},"end":{"line":194,"column":33,"offset":13942}}}],"position":{"start":{"line":192,"column":1,"offset":13889},"end":{"line":194,"column":33,"offset":13942}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f63f\">","position":{"start":{"line":196,"column":5,"offset":13950},"end":{"line":196,"column":21,"offset":13966}}},{"type":"text","value":"O(1) O(1) O(1)","position":{"start":{"line":196,"column":21,"offset":13966},"end":{"line":196,"column":35,"offset":13980}}},{"type":"raw","value":"</span>","position":{"start":{"line":196,"column":35,"offset":13980},"end":{"line":196,"column":42,"offset":13987}}}],"position":{"start":{"line":196,"column":1,"offset":13946},"end":{"line":196,"column":42,"offset":13987}}},{"type":"text","value":"\n"}],"position":{"start":{"line":196,"column":1,"offset":13946},"end":{"line":196,"column":42,"offset":13987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":198,"column":4,"offset":13994},"end":{"line":198,"column":12,"offset":14002}}}],"position":{"start":{"line":198,"column":3,"offset":13993},"end":{"line":198,"column":13,"offset":14003}}}],"position":{"start":{"line":198,"column":3,"offset":13993},"end":{"line":198,"column":13,"offset":14003}}},{"type":"text","value":"\n"}],"position":{"start":{"line":198,"column":1,"offset":13991},"end":{"line":198,"column":13,"offset":14003}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note, here I am storing another object for every hash in my Hash Table.","position":{"start":{"line":200,"column":1,"offset":14007},"end":{"line":200,"column":72,"offset":14078}}}],"position":{"start":{"line":200,"column":1,"offset":14007},"end":{"line":200,"column":72,"offset":14078}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Set","position":{"start":{"line":202,"column":5,"offset":14086},"end":{"line":202,"column":12,"offset":14093}}}],"position":{"start":{"line":202,"column":1,"offset":14082},"end":{"line":202,"column":12,"offset":14093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sets","position":{"start":{"line":204,"column":5,"offset":14101},"end":{"line":204,"column":9,"offset":14105}}}],"position":{"start":{"line":204,"column":1,"offset":14097},"end":{"line":204,"column":9,"offset":14105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sets are pretty much what it sounds like. It's the same intuition as Set in Mathematics. I visualize Sets as Venn Diagrams.","position":{"start":{"line":206,"column":1,"offset":14109},"end":{"line":206,"column":124,"offset":14232}}}],"position":{"start":{"line":206,"column":1,"offset":14109},"end":{"line":206,"column":124,"offset":14232}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*AIQljh9p8Baw9TnE.png\" class=\"graf-image\" /></figure><figure><img src=\"https://cdn-images-1.medium.com/max/800/0*gOE33ANZP2ujbjIG\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":208,"column":1,"offset":14236},"end":{"line":208,"column":237,"offset":14472}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Set is an abstract data type that can store certain values, without any particular order, and no repeated values. It is a computer implementation of the mathematical concept of a finite Set. From Wikipedia","position":{"start":{"line":210,"column":4,"offset":14479},"end":{"line":210,"column":211,"offset":14686}}}],"position":{"start":{"line":210,"column":3,"offset":14478},"end":{"line":210,"column":212,"offset":14687}}}],"position":{"start":{"line":210,"column":3,"offset":14478},"end":{"line":210,"column":212,"offset":14687}}},{"type":"text","value":"\n"}],"position":{"start":{"line":210,"column":1,"offset":14476},"end":{"line":210,"column":212,"offset":14687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The Set data structure is usually used to test whether elements belong to set of values. Rather then only containing elements, Sets are more used to perform operations on multiple values at once with methods such as union, intersect, etc…","position":{"start":{"line":212,"column":1,"offset":14691},"end":{"line":212,"column":239,"offset":14929}}}],"position":{"start":{"line":212,"column":1,"offset":14691},"end":{"line":212,"column":239,"offset":14929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion","position":{"start":{"line":214,"column":1,"offset":14933},"end":{"line":216,"column":33,"offset":14986}}}],"position":{"start":{"line":214,"column":1,"offset":14933},"end":{"line":216,"column":33,"offset":14986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"daa6\">","position":{"start":{"line":218,"column":5,"offset":14994},"end":{"line":218,"column":21,"offset":15010}}},{"type":"text","value":"O(n) O(n) O(n)","position":{"start":{"line":218,"column":21,"offset":15010},"end":{"line":218,"column":35,"offset":15024}}},{"type":"raw","value":"</span>","position":{"start":{"line":218,"column":35,"offset":15024},"end":{"line":218,"column":42,"offset":15031}}}],"position":{"start":{"line":218,"column":1,"offset":14990},"end":{"line":218,"column":42,"offset":15031}}},{"type":"text","value":"\n"}],"position":{"start":{"line":218,"column":1,"offset":14990},"end":{"line":218,"column":42,"offset":15031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":220,"column":4,"offset":15038},"end":{"line":220,"column":12,"offset":15046}}}],"position":{"start":{"line":220,"column":3,"offset":15037},"end":{"line":220,"column":13,"offset":15047}}}],"position":{"start":{"line":220,"column":3,"offset":15037},"end":{"line":220,"column":13,"offset":15047}}},{"type":"text","value":"\n"}],"position":{"start":{"line":220,"column":1,"offset":15035},"end":{"line":220,"column":13,"offset":15047}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Singly Linked List","position":{"start":{"line":222,"column":5,"offset":15055},"end":{"line":222,"column":27,"offset":15077}}}],"position":{"start":{"line":222,"column":1,"offset":15051},"end":{"line":222,"column":27,"offset":15077}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*fLs64rV-Xq19aVCA.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":224,"column":1,"offset":15081},"end":{"line":224,"column":129,"offset":15209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Singly Linked List is a linear collection of data elements, called nodes pointing to the next node by means of pointer. It is a data structure consisting of a group of nodes which together represent a sequence. Under the simplest form, each node is composed of data and a reference (in other words, a link) to the next node in the sequence.","position":{"start":{"line":226,"column":4,"offset":15216},"end":{"line":226,"column":346,"offset":15558}}}],"position":{"start":{"line":226,"column":3,"offset":15215},"end":{"line":226,"column":347,"offset":15559}}}],"position":{"start":{"line":226,"column":3,"offset":15215},"end":{"line":226,"column":347,"offset":15559}}},{"type":"text","value":"\n"}],"position":{"start":{"line":226,"column":1,"offset":15213},"end":{"line":226,"column":347,"offset":15559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Linked Lists are among the simplest and most common data structures because it allows for efficient insertion or removal of elements from any position in the sequence.","position":{"start":{"line":228,"column":1,"offset":15563},"end":{"line":228,"column":168,"offset":15730}}}],"position":{"start":{"line":228,"column":1,"offset":15563},"end":{"line":228,"column":168,"offset":15730}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":230,"column":1,"offset":15734},"end":{"line":233,"column":20,"offset":15808}}}],"position":{"start":{"line":230,"column":1,"offset":15734},"end":{"line":233,"column":20,"offset":15808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":235,"column":4,"offset":15815},"end":{"line":235,"column":12,"offset":15823}}}],"position":{"start":{"line":235,"column":3,"offset":15814},"end":{"line":235,"column":13,"offset":15824}}}],"position":{"start":{"line":235,"column":3,"offset":15814},"end":{"line":235,"column":13,"offset":15824}}},{"type":"text","value":"\n"}],"position":{"start":{"line":235,"column":1,"offset":15812},"end":{"line":235,"column":13,"offset":15824}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":237,"column":1,"offset":15828},"end":{"line":237,"column":4,"offset":15831}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Doubly Linked List","position":{"start":{"line":239,"column":5,"offset":15839},"end":{"line":239,"column":27,"offset":15861}}}],"position":{"start":{"line":239,"column":1,"offset":15835},"end":{"line":239,"column":27,"offset":15861}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*TQXiR-L_itiG3WP-.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":241,"column":1,"offset":15865},"end":{"line":241,"column":129,"offset":15993}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Doubly Linked List is a linked data structure that consists of a set of sequentially linked records called nodes. Each node contains two fields, called links, that are references to the previous and to the next node in the sequence of nodes. From Wikipedia","position":{"start":{"line":243,"column":4,"offset":16000},"end":{"line":243,"column":262,"offset":16258}}}],"position":{"start":{"line":243,"column":3,"offset":15999},"end":{"line":243,"column":263,"offset":16259}}}],"position":{"start":{"line":243,"column":3,"offset":15999},"end":{"line":243,"column":263,"offset":16259}}},{"type":"text","value":"\n"}],"position":{"start":{"line":243,"column":1,"offset":15997},"end":{"line":243,"column":263,"offset":16259}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Having two node links allow traversal in either direction but adding or removing a node in a doubly linked list requires changing more links than the same operations on a Singly Linked List.","position":{"start":{"line":245,"column":1,"offset":16263},"end":{"line":245,"column":191,"offset":16453}}}],"position":{"start":{"line":245,"column":1,"offset":16263},"end":{"line":245,"column":191,"offset":16453}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":247,"column":1,"offset":16457},"end":{"line":250,"column":20,"offset":16531}}}],"position":{"start":{"line":247,"column":1,"offset":16457},"end":{"line":250,"column":20,"offset":16531}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":252,"column":4,"offset":16538},"end":{"line":252,"column":12,"offset":16546}}}],"position":{"start":{"line":252,"column":3,"offset":16537},"end":{"line":252,"column":13,"offset":16547}}}],"position":{"start":{"line":252,"column":3,"offset":16537},"end":{"line":252,"column":13,"offset":16547}}},{"type":"text","value":"\n"}],"position":{"start":{"line":252,"column":1,"offset":16535},"end":{"line":252,"column":13,"offset":16547}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Stack","position":{"start":{"line":254,"column":5,"offset":16555},"end":{"line":254,"column":14,"offset":16564}}}],"position":{"start":{"line":254,"column":1,"offset":16551},"end":{"line":254,"column":14,"offset":16564}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/1200/0*qsjYW-Lvfo22ecLE.gif\" class=\"graf-image\" /></figure>","position":{"start":{"line":256,"column":1,"offset":16568},"end":{"line":256,"column":114,"offset":16681}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Definition","position":{"start":{"line":258,"column":6,"offset":16690},"end":{"line":258,"column":16,"offset":16700}}}],"position":{"start":{"line":258,"column":5,"offset":16689},"end":{"line":258,"column":17,"offset":16701}}}],"position":{"start":{"line":258,"column":1,"offset":16685},"end":{"line":258,"column":17,"offset":16701}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Stack is an abstract data type that serves as a collection of elements, with two principal operations: push, which adds an element to the collection, and pop, which removes the most recently added element that was not yet removed. The order in which elements come off a Stack gives rise to its alternative name, LIFO (for last in, first out). From Wikipedia","position":{"start":{"line":260,"column":4,"offset":16708},"end":{"line":260,"column":363,"offset":17067}}}],"position":{"start":{"line":260,"column":3,"offset":16707},"end":{"line":260,"column":364,"offset":17068}}}],"position":{"start":{"line":260,"column":3,"offset":16707},"end":{"line":260,"column":364,"offset":17068}}},{"type":"text","value":"\n"}],"position":{"start":{"line":260,"column":1,"offset":16705},"end":{"line":260,"column":364,"offset":17068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A Stack often has a third method peek which allows to check the last pushed element without popping it.","position":{"start":{"line":262,"column":1,"offset":17072},"end":{"line":262,"column":104,"offset":17175}}}],"position":{"start":{"line":262,"column":1,"offset":17072},"end":{"line":262,"column":104,"offset":17175}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(1)","position":{"start":{"line":264,"column":1,"offset":17179},"end":{"line":267,"column":20,"offset":17253}}}],"position":{"start":{"line":264,"column":1,"offset":17179},"end":{"line":267,"column":20,"offset":17253}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":269,"column":4,"offset":17260},"end":{"line":269,"column":12,"offset":17268}}}],"position":{"start":{"line":269,"column":3,"offset":17259},"end":{"line":269,"column":13,"offset":17269}}}],"position":{"start":{"line":269,"column":3,"offset":17259},"end":{"line":269,"column":13,"offset":17269}}},{"type":"text","value":"\n"}],"position":{"start":{"line":269,"column":1,"offset":17257},"end":{"line":269,"column":13,"offset":17269}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Queue","position":{"start":{"line":271,"column":5,"offset":17277},"end":{"line":271,"column":14,"offset":17286}}}],"position":{"start":{"line":271,"column":1,"offset":17273},"end":{"line":271,"column":14,"offset":17286}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*YvfuX5tKP7-V0p7v.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":273,"column":1,"offset":17290},"end":{"line":273,"column":129,"offset":17418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Queue is a particular kind of abstract data type or collection in which the entities in the collection are kept in order and the principal operations are the addition of entities to the rear terminal position, known as enqueue, and removal of entities from the front terminal position, known as dequeue. This makes the Queue a First-In-First-Out (FIFO) data structure. In a FIFO data structure, the first element added to the Queue will be the first one to be removed.","position":{"start":{"line":275,"column":4,"offset":17425},"end":{"line":275,"column":474,"offset":17895}}}],"position":{"start":{"line":275,"column":3,"offset":17424},"end":{"line":275,"column":475,"offset":17896}}}],"position":{"start":{"line":275,"column":3,"offset":17424},"end":{"line":275,"column":475,"offset":17896}}},{"type":"text","value":"\n"}],"position":{"start":{"line":275,"column":1,"offset":17422},"end":{"line":275,"column":475,"offset":17896}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As for the Stack data structure, a peek operation is often added to the Queue data structure. It returns the value of the front element without dequeuing it.","position":{"start":{"line":277,"column":1,"offset":17900},"end":{"line":277,"column":158,"offset":18057}}}],"position":{"start":{"line":277,"column":1,"offset":17900},"end":{"line":277,"column":158,"offset":18057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(1) O(n)","position":{"start":{"line":279,"column":1,"offset":18061},"end":{"line":282,"column":20,"offset":18135}}}],"position":{"start":{"line":279,"column":1,"offset":18061},"end":{"line":282,"column":20,"offset":18135}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":284,"column":4,"offset":18142},"end":{"line":284,"column":12,"offset":18150}}}],"position":{"start":{"line":284,"column":3,"offset":18141},"end":{"line":284,"column":13,"offset":18151}}}],"position":{"start":{"line":284,"column":3,"offset":18141},"end":{"line":284,"column":13,"offset":18151}}},{"type":"text","value":"\n"}],"position":{"start":{"line":284,"column":1,"offset":18139},"end":{"line":284,"column":13,"offset":18151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Tree","position":{"start":{"line":286,"column":5,"offset":18159},"end":{"line":286,"column":13,"offset":18167}}}],"position":{"start":{"line":286,"column":1,"offset":18155},"end":{"line":286,"column":13,"offset":18167}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*yUiQ-NaPKeLQnN7n\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":288,"column":1,"offset":18171},"end":{"line":288,"column":125,"offset":18295}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Tree is a widely used data structure that simulates a hierarchical tree structure, with a root value and subtrees of children with a parent node. A tree data structure can be defined recursively as a collection of nodes (starting at a root node), where each node is a data structure consisting of a value, together with a list of references to nodes (the \"children\"), with the constraints that no reference is duplicated, and none points to the root node. From Wikipedia","position":{"start":{"line":290,"column":4,"offset":18302},"end":{"line":290,"column":476,"offset":18774}}}],"position":{"start":{"line":290,"column":3,"offset":18301},"end":{"line":290,"column":477,"offset":18775}}}],"position":{"start":{"line":290,"column":3,"offset":18301},"end":{"line":290,"column":477,"offset":18775}}},{"type":"text","value":"\n"}],"position":{"start":{"line":290,"column":1,"offset":18299},"end":{"line":290,"column":477,"offset":18775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Complexity\nAverage\nAccess Search Insertion Deletion\nO(n) O(n) O(n) O(n)\nTo get a full overview of the time and space complexity of the Tree data structure, have a look to this excellent Big O cheat sheet.","position":{"start":{"line":292,"column":1,"offset":18779},"end":{"line":296,"column":133,"offset":18987}}}],"position":{"start":{"line":292,"column":1,"offset":18779},"end":{"line":296,"column":133,"offset":18987}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*DCdQiB6XqBJCrFRz12BwqA.png\" class=\"graf-image\" /></figure>*The code*","position":{"start":{"line":298,"column":1,"offset":18991},"end":{"line":298,"column":129,"offset":19119}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"The Graph","position":{"start":{"line":300,"column":5,"offset":19127},"end":{"line":300,"column":14,"offset":19136}}}],"position":{"start":{"line":300,"column":1,"offset":19123},"end":{"line":300,"column":14,"offset":19136}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/0*q31mL1kjFWlIzw3l.gif\" class=\"graf-image\" /></figure>### *Definition*","position":{"start":{"line":302,"column":1,"offset":19140},"end":{"line":302,"column":129,"offset":19268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"A Graph data structure consists of a finite (and possibly mutable) set of vertices or nodes or points, together with a set of unordered pairs of these vertices for an undirected Graph or a set of ordered pairs for a directed Graph. These pairs are known as edges, arcs, or lines for an undirected Graph and as arrows, directed edges, directed arcs, or directed lines for a directed Graph. The vertices may be part of the Graph structure, or may be external entities represented by integer indices or references.","position":{"start":{"line":304,"column":4,"offset":19275},"end":{"line":304,"column":515,"offset":19786}}}],"position":{"start":{"line":304,"column":3,"offset":19274},"end":{"line":304,"column":516,"offset":19787}}}],"position":{"start":{"line":304,"column":3,"offset":19274},"end":{"line":304,"column":516,"offset":19787}}},{"type":"text","value":"\n"}],"position":{"start":{"line":304,"column":1,"offset":19272},"end":{"line":304,"column":516,"offset":19787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"f896\">","position":{"start":{"line":306,"column":5,"offset":19795},"end":{"line":306,"column":21,"offset":19811}}},{"type":"text","value":"A graph is ","position":{"start":{"line":306,"column":21,"offset":19811},"end":{"line":306,"column":32,"offset":19822}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"any","position":{"start":{"line":306,"column":34,"offset":19824},"end":{"line":306,"column":37,"offset":19827}}}],"position":{"start":{"line":306,"column":32,"offset":19822},"end":{"line":306,"column":39,"offset":19829}}},{"type":"text","value":" collection of nodes and edges.","position":{"start":{"line":306,"column":39,"offset":19829},"end":{"line":306,"column":70,"offset":19860}}},{"type":"raw","value":"</span>","position":{"start":{"line":306,"column":70,"offset":19860},"end":{"line":306,"column":77,"offset":19867}}}],"position":{"start":{"line":306,"column":1,"offset":19791},"end":{"line":306,"column":77,"offset":19867}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"fbda\">","position":{"start":{"line":307,"column":5,"offset":19873},"end":{"line":307,"column":21,"offset":19889}}},{"type":"text","value":"Much more relaxed in structure than a tree.","position":{"start":{"line":307,"column":21,"offset":19889},"end":{"line":307,"column":64,"offset":19932}}},{"type":"raw","value":"</span>","position":{"start":{"line":307,"column":64,"offset":19932},"end":{"line":307,"column":71,"offset":19939}}}],"position":{"start":{"line":307,"column":1,"offset":19869},"end":{"line":307,"column":71,"offset":19939}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"5281\">","position":{"start":{"line":308,"column":5,"offset":19945},"end":{"line":308,"column":21,"offset":19961}}},{"type":"text","value":"It doesn't need to have a root node (not every node needs to be accessible from a single node)","position":{"start":{"line":308,"column":21,"offset":19961},"end":{"line":308,"column":115,"offset":20055}}},{"type":"raw","value":"</span>","position":{"start":{"line":308,"column":115,"offset":20055},"end":{"line":308,"column":122,"offset":20062}}}],"position":{"start":{"line":308,"column":1,"offset":19941},"end":{"line":308,"column":122,"offset":20062}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"0c79\">","position":{"start":{"line":309,"column":5,"offset":20068},"end":{"line":309,"column":21,"offset":20084}}},{"type":"text","value":"It can have cycles (a group of nodes whose paths begin and end at the same node)","position":{"start":{"line":309,"column":21,"offset":20084},"end":{"line":309,"column":101,"offset":20164}}},{"type":"raw","value":"</span>","position":{"start":{"line":309,"column":101,"offset":20164},"end":{"line":309,"column":108,"offset":20171}}}],"position":{"start":{"line":309,"column":1,"offset":20064},"end":{"line":309,"column":108,"offset":20171}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"4afc\">","position":{"start":{"line":310,"column":5,"offset":20177},"end":{"line":310,"column":21,"offset":20193}}},{"type":"text","value":"Cycles are not always \"isolated\", they can be one part of a larger graph. You can detect them by starting your search on a specific node and finding a path that takes you back to that same node.","position":{"start":{"line":310,"column":21,"offset":20193},"end":{"line":310,"column":215,"offset":20387}}},{"type":"raw","value":"</span>","position":{"start":{"line":310,"column":215,"offset":20387},"end":{"line":310,"column":222,"offset":20394}}}],"position":{"start":{"line":310,"column":1,"offset":20173},"end":{"line":310,"column":222,"offset":20394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"8f45\">","position":{"start":{"line":311,"column":5,"offset":20400},"end":{"line":311,"column":21,"offset":20416}}},{"type":"text","value":"Any number of edges may leave a given node","position":{"start":{"line":311,"column":21,"offset":20416},"end":{"line":311,"column":63,"offset":20458}}},{"type":"raw","value":"</span>","position":{"start":{"line":311,"column":63,"offset":20458},"end":{"line":311,"column":70,"offset":20465}}}],"position":{"start":{"line":311,"column":1,"offset":20396},"end":{"line":311,"column":70,"offset":20465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"raw","value":"<span id=\"51cf\">","position":{"start":{"line":312,"column":5,"offset":20471},"end":{"line":312,"column":21,"offset":20487}}},{"type":"text","value":"A Path is a sequence of nodes on a graph","position":{"start":{"line":312,"column":21,"offset":20487},"end":{"line":312,"column":61,"offset":20527}}},{"type":"raw","value":"</span>","position":{"start":{"line":312,"column":61,"offset":20527},"end":{"line":312,"column":68,"offset":20534}}}],"position":{"start":{"line":312,"column":1,"offset":20467},"end":{"line":312,"column":68,"offset":20534}}},{"type":"text","value":"\n"}],"position":{"start":{"line":306,"column":1,"offset":19791},"end":{"line":312,"column":68,"offset":20534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Cycle Visual","position":{"start":{"line":314,"column":5,"offset":20542},"end":{"line":314,"column":17,"offset":20554}}}],"position":{"start":{"line":314,"column":1,"offset":20538},"end":{"line":314,"column":17,"offset":20554}}},{"type":"text","value":"\n"},{"type":"raw","value":"<figure><img src=\"https://cdn-images-1.medium.com/max/800/1*dn1BqCdXdFg4FCVSz6uArA.png\" class=\"graf-image\" /></figure>A Graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).","position":{"start":{"line":316,"column":1,"offset":20558},"end":{"line":316,"column":270,"offset":20827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Representation\nThere are different ways of representing a graph, each of them with its own advantages and disadvantages. Here are the main 2:","position":{"start":{"line":318,"column":1,"offset":20831},"end":{"line":319,"column":127,"offset":20973}}}],"position":{"start":{"line":318,"column":1,"offset":20831},"end":{"line":319,"column":127,"offset":20973}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Adjacency list: For every vertex a list of adjacent vertices is stored. This can be viewed as storing the list of edges. This data structure allows the storage of additional data on the vertices and edges.\nAdjacency matrix: Data are stored in a two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. The data on the edges and vertices must be stored externally.","position":{"start":{"line":321,"column":1,"offset":20977},"end":{"line":322,"column":213,"offset":21396}}}],"position":{"start":{"line":321,"column":1,"offset":20977},"end":{"line":322,"column":213,"offset":21396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graph","position":{"start":{"line":324,"column":1,"offset":21400},"end":{"line":324,"column":6,"offset":21405}}}],"position":{"start":{"line":324,"column":1,"offset":21400},"end":{"line":324,"column":6,"offset":21405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"The code","position":{"start":{"line":326,"column":4,"offset":21412},"end":{"line":326,"column":12,"offset":21420}}}],"position":{"start":{"line":326,"column":3,"offset":21411},"end":{"line":326,"column":13,"offset":21421}}}],"position":{"start":{"line":326,"column":3,"offset":21411},"end":{"line":326,"column":13,"offset":21421}}},{"type":"text","value":"\n"}],"position":{"start":{"line":326,"column":1,"offset":21409},"end":{"line":326,"column":13,"offset":21421}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":328,"column":1,"offset":21425},"end":{"line":328,"column":4,"offset":21428}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Leetcode","position":{"start":{"line":330,"column":3,"offset":21434},"end":{"line":330,"column":11,"offset":21442}}}],"position":{"start":{"line":330,"column":1,"offset":21432},"end":{"line":330,"column":11,"offset":21442}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Data Structures & Algorithms","position":{"start":{"line":332,"column":4,"offset":21449},"end":{"line":332,"column":32,"offset":21477}}}],"position":{"start":{"line":332,"column":1,"offset":21446},"end":{"line":332,"column":32,"offset":21477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/Data-Structures-Algos-Codebase"},"children":[{"type":"text","value":"DS Algo Codebase","position":{"start":{"line":334,"column":2,"offset":21482},"end":{"line":334,"column":18,"offset":21498}}}],"position":{"start":{"line":334,"column":1,"offset":21481},"end":{"line":334,"column":77,"offset":21557}}}],"position":{"start":{"line":334,"column":1,"offset":21481},"end":{"line":334,"column":77,"offset":21557}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequencesdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":336,"column":2,"offset":21562},"end":{"line":336,"column":142,"offset":21702}}}],"position":{"start":{"line":336,"column":1,"offset":21561},"end":{"line":336,"column":227,"offset":21787}}}],"position":{"start":{"line":336,"column":1,"offset":21561},"end":{"line":336,"column":227,"offset":21787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":338,"column":4,"offset":21794},"end":{"line":338,"column":6,"offset":21796}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/distinct-subsequences/description/"},"children":[{"type":"text","value":"115. Distinct Subsequences","position":{"start":{"line":338,"column":7,"offset":21797},"end":{"line":338,"column":33,"offset":21823}}}],"position":{"start":{"line":338,"column":6,"offset":21796},"end":{"line":338,"column":100,"offset":21890}}}],"position":{"start":{"line":338,"column":1,"offset":21791},"end":{"line":338,"column":100,"offset":21890}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":340,"column":5,"offset":21898},"end":{"line":340,"column":13,"offset":21906}}}],"position":{"start":{"line":340,"column":1,"offset":21894},"end":{"line":340,"column":13,"offset":21906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a string ","position":{"start":{"line":342,"column":1,"offset":21910},"end":{"line":342,"column":16,"offset":21925}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"S","position":{"start":{"line":342,"column":18,"offset":21927},"end":{"line":342,"column":19,"offset":21928}}}],"position":{"start":{"line":342,"column":16,"offset":21925},"end":{"line":342,"column":21,"offset":21930}}},{"type":"text","value":" and a string ","position":{"start":{"line":342,"column":21,"offset":21930},"end":{"line":342,"column":35,"offset":21944}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":342,"column":37,"offset":21946},"end":{"line":342,"column":38,"offset":21947}}}],"position":{"start":{"line":342,"column":35,"offset":21944},"end":{"line":342,"column":40,"offset":21949}}},{"type":"text","value":", count the number of distinct subsequences of ","position":{"start":{"line":342,"column":40,"offset":21949},"end":{"line":342,"column":87,"offset":21996}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"S","position":{"start":{"line":342,"column":89,"offset":21998},"end":{"line":342,"column":90,"offset":21999}}}],"position":{"start":{"line":342,"column":87,"offset":21996},"end":{"line":342,"column":92,"offset":22001}}},{"type":"text","value":" which equals ","position":{"start":{"line":342,"column":92,"offset":22001},"end":{"line":342,"column":106,"offset":22015}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"T","position":{"start":{"line":342,"column":108,"offset":22017},"end":{"line":342,"column":109,"offset":22018}}}],"position":{"start":{"line":342,"column":106,"offset":22015},"end":{"line":342,"column":111,"offset":22020}}},{"type":"text","value":".","position":{"start":{"line":342,"column":111,"offset":22020},"end":{"line":342,"column":112,"offset":22021}}}],"position":{"start":{"line":342,"column":1,"offset":21910},"end":{"line":342,"column":112,"offset":22021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A subsequence of a string is a new string which is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, ","position":{"start":{"line":344,"column":1,"offset":22025},"end":{"line":344,"column":209,"offset":22233}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"ACE\""}],"position":{"start":{"line":344,"column":209,"offset":22233},"end":{"line":344,"column":216,"offset":22240}}},{"type":"text","value":" is a subsequence of ","position":{"start":{"line":344,"column":216,"offset":22240},"end":{"line":344,"column":237,"offset":22261}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"ABCDE\""}],"position":{"start":{"line":344,"column":237,"offset":22261},"end":{"line":344,"column":246,"offset":22270}}},{"type":"text","value":" while ","position":{"start":{"line":344,"column":246,"offset":22270},"end":{"line":344,"column":253,"offset":22277}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"\"AEC\""}],"position":{"start":{"line":344,"column":253,"offset":22277},"end":{"line":344,"column":260,"offset":22284}}},{"type":"text","value":" is not).","position":{"start":{"line":344,"column":260,"offset":22284},"end":{"line":344,"column":269,"offset":22293}}}],"position":{"start":{"line":344,"column":1,"offset":22025},"end":{"line":344,"column":269,"offset":22293}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":346,"column":3,"offset":22299},"end":{"line":346,"column":13,"offset":22309}}}],"position":{"start":{"line":346,"column":1,"offset":22297},"end":{"line":346,"column":15,"offset":22311}}}],"position":{"start":{"line":346,"column":1,"offset":22297},"end":{"line":346,"column":15,"offset":22311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: S = \"rabbbit\", T = \"rabbit\"\nOutput: 3\nExplanation:\n\nAs shown below, there are 3 ways you can generate \"rabbit\" from S.\n(The caret symbol ^ means the chosen letters)\n\nrabbbit\n^^^^ ^^\nrabbbit\n^^ ^^^^\nrabbbit\n^^^ ^^^\n"}],"position":{"start":{"line":348,"column":1,"offset":22315},"end":{"line":360,"column":12,"offset":22591}}}],"position":{"start":{"line":348,"column":1,"offset":22315},"end":{"line":360,"column":12,"offset":22591}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":362,"column":3,"offset":22597},"end":{"line":362,"column":13,"offset":22607}}}],"position":{"start":{"line":362,"column":1,"offset":22595},"end":{"line":362,"column":15,"offset":22609}}}],"position":{"start":{"line":362,"column":1,"offset":22595},"end":{"line":362,"column":15,"offset":22609}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: S = \"babgbag\", T = \"bag\"\nOutput: 5\nExplanation:\n\nAs shown below, there are 5 ways you can generate \"bag\" from S.\n(The caret symbol ^ means the chosen letters)\n\nbabgbag\n^^ ^\nbabgbag\n^^    ^\nbabgbag\n^    ^^\nbabgbag\n  ^  ^^\nbabgbag\n    ^^^\n"}],"position":{"start":{"line":364,"column":1,"offset":22613},"end":{"line":380,"column":12,"offset":22932}}}],"position":{"start":{"line":364,"column":1,"offset":22613},"end":{"line":380,"column":12,"offset":22932}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":382,"column":5,"offset":22940},"end":{"line":382,"column":14,"offset":22949}}}],"position":{"start":{"line":382,"column":1,"offset":22936},"end":{"line":382,"column":14,"offset":22949}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":384,"column":1,"offset":22953},"end":{"line":384,"column":8,"offset":22960}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":384,"column":8,"offset":22960},"end":{"line":384,"column":17,"offset":22969}}},{"type":"text","value":" to be the number of ways that generate ","position":{"start":{"line":384,"column":17,"offset":22969},"end":{"line":384,"column":57,"offset":23009}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"T[0...j)"}],"position":{"start":{"line":384,"column":57,"offset":23009},"end":{"line":384,"column":67,"offset":23019}}},{"type":"text","value":" from ","position":{"start":{"line":384,"column":67,"offset":23019},"end":{"line":384,"column":73,"offset":23025}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[0...i)"}],"position":{"start":{"line":384,"column":73,"offset":23025},"end":{"line":384,"column":83,"offset":23035}}},{"type":"text","value":".","position":{"start":{"line":384,"column":83,"offset":23035},"end":{"line":384,"column":84,"offset":23036}}}],"position":{"start":{"line":384,"column":1,"offset":22953},"end":{"line":384,"column":84,"offset":23036}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For ","position":{"start":{"line":386,"column":1,"offset":23040},"end":{"line":386,"column":5,"offset":23044}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":386,"column":5,"offset":23044},"end":{"line":386,"column":14,"offset":23053}}},{"type":"text","value":" you can always skip ","position":{"start":{"line":386,"column":14,"offset":23053},"end":{"line":386,"column":35,"offset":23074}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[i-1]"}],"position":{"start":{"line":386,"column":35,"offset":23074},"end":{"line":386,"column":43,"offset":23082}}},{"type":"text","value":", but can only take it when ","position":{"start":{"line":386,"column":43,"offset":23082},"end":{"line":386,"column":71,"offset":23110}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"S[i-1] === T[j-1]"}],"position":{"start":{"line":386,"column":71,"offset":23110},"end":{"line":386,"column":90,"offset":23129}}},{"type":"text","value":".","position":{"start":{"line":386,"column":90,"offset":23129},"end":{"line":386,"column":91,"offset":23130}}}],"position":{"start":{"line":386,"column":1,"offset":23040},"end":{"line":386,"column":91,"offset":23130}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"f(0, j) = 0, j > 0 // nothing to delete\nf(i, 0) = 1 // delete all\nf(i, j) = f(i-1, j) + (S[i-1] === T[j-1] ? f(i-1, j-1) : 0)\n"}],"position":{"start":{"line":388,"column":1,"offset":23134},"end":{"line":392,"column":4,"offset":23273}}}],"position":{"start":{"line":388,"column":1,"offset":23134},"end":{"line":392,"column":4,"offset":23273}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic array can be used.","position":{"start":{"line":394,"column":1,"offset":23277},"end":{"line":394,"column":27,"offset":23303}}}],"position":{"start":{"line":394,"column":1,"offset":23277},"end":{"line":394,"column":27,"offset":23303}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @param {string} t\n * @return {number}\n */\nlet numDistinct = function (s, t) {\n    const lens = s.length;\n    const lent = t.length;\n    const dp = new Array(lent + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i <= lens; i++) {\n        for (let j = lent; j >= 1; j--) {\n            if (s[i - 1] === t[j - 1]) {\n                dp[j] += dp[j - 1];\n            }\n        }\n    }\n    return dp[lent];\n};\n"}],"position":{"start":{"line":396,"column":1,"offset":23307},"end":{"line":416,"column":4,"offset":23766}}}],"position":{"start":{"line":396,"column":1,"offset":23307},"end":{"line":416,"column":4,"offset":23766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":418,"column":1,"offset":23770},"end":{"line":418,"column":4,"offset":23773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":420,"column":1,"offset":23777},"end":{"line":422,"column":9,"offset":23822}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":422,"column":9,"offset":23822},"end":{"line":422,"column":38,"offset":23851}}}],"position":{"start":{"line":422,"column":9,"offset":23822},"end":{"line":422,"column":38,"offset":23851}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":422,"column":38,"offset":23851},"end":{"line":423,"column":23,"offset":23875}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":423,"column":23,"offset":23875},"end":{"line":423,"column":66,"offset":23918}}}],"position":{"start":{"line":423,"column":23,"offset":23875},"end":{"line":423,"column":66,"offset":23918}}},{"type":"text","value":"\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node II\": ","position":{"start":{"line":423,"column":66,"offset":23918},"end":{"line":425,"column":51,"offset":23990}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii","position":{"start":{"line":425,"column":51,"offset":23990},"end":{"line":425,"column":127,"offset":24066}}}],"position":{"start":{"line":425,"column":51,"offset":23990},"end":{"line":425,"column":127,"offset":24066}}},{"type":"text","value":"\n\"Binary Tree Right Side View\": ","position":{"start":{"line":425,"column":127,"offset":24066},"end":{"line":426,"column":32,"offset":24099}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-right-side-view"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-right-side-view","position":{"start":{"line":426,"column":32,"offset":24099},"end":{"line":426,"column":89,"offset":24156}}}],"position":{"start":{"line":426,"column":32,"offset":24099},"end":{"line":426,"column":89,"offset":24156}}}],"position":{"start":{"line":420,"column":1,"offset":23777},"end":{"line":426,"column":89,"offset":24156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":428,"column":1,"offset":24160},"end":{"line":428,"column":4,"offset":24163}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#116-populating-next-right-pointers-in-each-nodehttpsleetcodecomproblemspopulating-next-right-pointers-in-each-nodedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":430,"column":2,"offset":24168},"end":{"line":430,"column":142,"offset":24308}}}],"position":{"start":{"line":430,"column":1,"offset":24167},"end":{"line":430,"column":271,"offset":24437}}}],"position":{"start":{"line":430,"column":1,"offset":24167},"end":{"line":430,"column":271,"offset":24437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":432,"column":4,"offset":24444},"end":{"line":432,"column":6,"offset":24446}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/description/"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":432,"column":7,"offset":24447},"end":{"line":432,"column":55,"offset":24495}}}],"position":{"start":{"line":432,"column":6,"offset":24446},"end":{"line":432,"column":144,"offset":24584}}}],"position":{"start":{"line":432,"column":1,"offset":24441},"end":{"line":432,"column":144,"offset":24584}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":434,"column":5,"offset":24592},"end":{"line":434,"column":13,"offset":24600}}}],"position":{"start":{"line":434,"column":1,"offset":24588},"end":{"line":434,"column":13,"offset":24600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree","position":{"start":{"line":436,"column":1,"offset":24604},"end":{"line":436,"column":20,"offset":24623}}}],"position":{"start":{"line":436,"column":1,"offset":24604},"end":{"line":436,"column":20,"offset":24623}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n"}],"position":{"start":{"line":438,"column":1,"offset":24627},"end":{"line":445,"column":4,"offset":24733}}}],"position":{"start":{"line":438,"column":1,"offset":24627},"end":{"line":445,"column":4,"offset":24733}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ","position":{"start":{"line":447,"column":1,"offset":24737},"end":{"line":447,"column":127,"offset":24863}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":447,"column":127,"offset":24863},"end":{"line":447,"column":133,"offset":24869}}},{"type":"text","value":".","position":{"start":{"line":447,"column":133,"offset":24869},"end":{"line":447,"column":134,"offset":24870}}}],"position":{"start":{"line":447,"column":1,"offset":24737},"end":{"line":447,"column":134,"offset":24870}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Initially, all next pointers are set to ","position":{"start":{"line":449,"column":1,"offset":24874},"end":{"line":449,"column":41,"offset":24914}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":449,"column":41,"offset":24914},"end":{"line":449,"column":47,"offset":24920}}},{"type":"text","value":".","position":{"start":{"line":449,"column":47,"offset":24920},"end":{"line":449,"column":48,"offset":24921}}}],"position":{"start":{"line":449,"column":1,"offset":24874},"end":{"line":449,"column":48,"offset":24921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":451,"column":3,"offset":24927},"end":{"line":451,"column":8,"offset":24932}}}],"position":{"start":{"line":451,"column":1,"offset":24925},"end":{"line":451,"column":10,"offset":24934}}}],"position":{"start":{"line":451,"column":1,"offset":24925},"end":{"line":451,"column":10,"offset":24934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may only use constant extra space.","position":{"start":{"line":453,"column":5,"offset":24942},"end":{"line":453,"column":43,"offset":24980}}}],"position":{"start":{"line":453,"column":1,"offset":24938},"end":{"line":453,"column":43,"offset":24980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Recursive approach is fine, implicit stack space does not count as extra space for this problem.","position":{"start":{"line":454,"column":5,"offset":24986},"end":{"line":454,"column":101,"offset":25082}}}],"position":{"start":{"line":454,"column":1,"offset":24982},"end":{"line":454,"column":101,"offset":25082}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).","position":{"start":{"line":455,"column":5,"offset":25088},"end":{"line":455,"column":127,"offset":25210}}}],"position":{"start":{"line":455,"column":1,"offset":25084},"end":{"line":455,"column":127,"offset":25210}}},{"type":"text","value":"\n"}],"position":{"start":{"line":453,"column":1,"offset":24938},"end":{"line":455,"column":127,"offset":25210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":457,"column":3,"offset":25216},"end":{"line":457,"column":11,"offset":25224}}}],"position":{"start":{"line":457,"column":1,"offset":25214},"end":{"line":457,"column":13,"offset":25226}}}],"position":{"start":{"line":457,"column":1,"offset":25214},"end":{"line":457,"column":13,"offset":25226}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the following perfect binary tree,","position":{"start":{"line":459,"column":1,"offset":25230},"end":{"line":459,"column":41,"offset":25270}}}],"position":{"start":{"line":459,"column":1,"offset":25230},"end":{"line":459,"column":41,"offset":25270}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1\n   /  \\\n  2    3\n / \\  / \\\n4  5  6  7\n"}],"position":{"start":{"line":461,"column":1,"offset":25274},"end":{"line":468,"column":4,"offset":25334}}}],"position":{"start":{"line":461,"column":1,"offset":25274},"end":{"line":468,"column":4,"offset":25334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After calling your function, the tree should look like:","position":{"start":{"line":470,"column":1,"offset":25338},"end":{"line":470,"column":56,"offset":25393}}}],"position":{"start":{"line":470,"column":1,"offset":25338},"end":{"line":470,"column":56,"offset":25393}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\  / \\\n4->5->6->7 -> NULL\n"}],"position":{"start":{"line":472,"column":1,"offset":25397},"end":{"line":479,"column":4,"offset":25481}}}],"position":{"start":{"line":472,"column":1,"offset":25397},"end":{"line":479,"column":4,"offset":25481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":481,"column":5,"offset":25489},"end":{"line":481,"column":14,"offset":25498}}}],"position":{"start":{"line":481,"column":1,"offset":25485},"end":{"line":481,"column":14,"offset":25498}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":483,"column":6,"offset":25507},"end":{"line":483,"column":9,"offset":25510}}}],"position":{"start":{"line":483,"column":1,"offset":25502},"end":{"line":483,"column":9,"offset":25510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive.","position":{"start":{"line":485,"column":1,"offset":25514},"end":{"line":485,"column":11,"offset":25524}}}],"position":{"start":{"line":485,"column":1,"offset":25514},"end":{"line":485,"column":11,"offset":25524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For every ","position":{"start":{"line":487,"column":1,"offset":25528},"end":{"line":487,"column":11,"offset":25538}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node"}],"position":{"start":{"line":487,"column":11,"offset":25538},"end":{"line":487,"column":17,"offset":25544}}},{"type":"text","value":":","position":{"start":{"line":487,"column":17,"offset":25544},"end":{"line":487,"column":18,"offset":25545}}}],"position":{"start":{"line":487,"column":1,"offset":25528},"end":{"line":487,"column":18,"offset":25545}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Left child: points to ","position":{"start":{"line":489,"column":5,"offset":25553},"end":{"line":489,"column":27,"offset":25575}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":489,"column":27,"offset":25575},"end":{"line":489,"column":39,"offset":25587}}},{"type":"text","value":".","position":{"start":{"line":489,"column":39,"offset":25587},"end":{"line":489,"column":40,"offset":25588}}}],"position":{"start":{"line":489,"column":1,"offset":25549},"end":{"line":489,"column":40,"offset":25588}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Right child: points to ","position":{"start":{"line":490,"column":5,"offset":25594},"end":{"line":490,"column":28,"offset":25617}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.next.left"}],"position":{"start":{"line":490,"column":28,"offset":25617},"end":{"line":490,"column":44,"offset":25633}}},{"type":"text","value":" if ","position":{"start":{"line":490,"column":44,"offset":25633},"end":{"line":490,"column":48,"offset":25637}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.next"}],"position":{"start":{"line":490,"column":48,"offset":25637},"end":{"line":490,"column":59,"offset":25648}}},{"type":"text","value":" exists.","position":{"start":{"line":490,"column":59,"offset":25648},"end":{"line":490,"column":67,"offset":25656}}}],"position":{"start":{"line":490,"column":1,"offset":25590},"end":{"line":490,"column":67,"offset":25656}}},{"type":"text","value":"\n"}],"position":{"start":{"line":489,"column":1,"offset":25549},"end":{"line":490,"column":67,"offset":25656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right;\n        connect(root.left);\n    }\n    if (root.right !== null) {\n        if (root.next !== null) {\n            root.right.next = root.next.left;\n        }\n        connect(root.right);\n    }\n};\n"}],"position":{"start":{"line":492,"column":1,"offset":25660},"end":{"line":520,"column":4,"offset":26306}}}],"position":{"start":{"line":492,"column":1,"offset":25660},"end":{"line":520,"column":4,"offset":26306}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":522,"column":6,"offset":26315},"end":{"line":522,"column":9,"offset":26318}}}],"position":{"start":{"line":522,"column":1,"offset":26310},"end":{"line":522,"column":9,"offset":26318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level order traversal.","position":{"start":{"line":524,"column":1,"offset":26322},"end":{"line":524,"column":23,"offset":26344}}}],"position":{"start":{"line":524,"column":1,"offset":26322},"end":{"line":524,"column":23,"offset":26344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":526,"column":1,"offset":26348},"end":{"line":562,"column":4,"offset":27240}}}],"position":{"start":{"line":526,"column":1,"offset":26348},"end":{"line":562,"column":4,"offset":27240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":564,"column":1,"offset":27244},"end":{"line":564,"column":4,"offset":27247}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":566,"column":1,"offset":27251},"end":{"line":568,"column":9,"offset":27296}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":568,"column":9,"offset":27296},"end":{"line":568,"column":38,"offset":27325}}}],"position":{"start":{"line":568,"column":9,"offset":27296},"end":{"line":568,"column":38,"offset":27325}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":568,"column":38,"offset":27325},"end":{"line":569,"column":23,"offset":27349}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":569,"column":23,"offset":27349},"end":{"line":569,"column":66,"offset":27392}}}],"position":{"start":{"line":569,"column":23,"offset":27349},"end":{"line":569,"column":66,"offset":27392}}},{"type":"text","value":"\nSimilar Questions:\n\"Populating Next Right Pointers in Each Node\": ","position":{"start":{"line":569,"column":66,"offset":27392},"end":{"line":571,"column":48,"offset":27461}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node"},"children":[{"type":"text","value":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node","position":{"start":{"line":571,"column":48,"offset":27461},"end":{"line":571,"column":121,"offset":27534}}}],"position":{"start":{"line":571,"column":48,"offset":27461},"end":{"line":571,"column":121,"offset":27534}}}],"position":{"start":{"line":566,"column":1,"offset":27251},"end":{"line":571,"column":121,"offset":27534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":573,"column":1,"offset":27538},"end":{"line":573,"column":4,"offset":27541}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#117-populating-next-right-pointers-in-each-node-iihttpsleetcodecomproblemspopulating-next-right-pointers-in-each-node-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":575,"column":2,"offset":27546},"end":{"line":575,"column":142,"offset":27686}}}],"position":{"start":{"line":575,"column":1,"offset":27545},"end":{"line":575,"column":277,"offset":27821}}}],"position":{"start":{"line":575,"column":1,"offset":27545},"end":{"line":575,"column":277,"offset":27821}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":577,"column":4,"offset":27828},"end":{"line":577,"column":6,"offset":27830}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/populating-next-right-pointers-in-each-node-ii/description/"},"children":[{"type":"text","value":"117. Populating Next Right Pointers in Each Node II","position":{"start":{"line":577,"column":7,"offset":27831},"end":{"line":577,"column":58,"offset":27882}}}],"position":{"start":{"line":577,"column":6,"offset":27830},"end":{"line":577,"column":150,"offset":27974}}}],"position":{"start":{"line":577,"column":1,"offset":27825},"end":{"line":577,"column":150,"offset":27974}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":579,"column":5,"offset":27982},"end":{"line":579,"column":13,"offset":27990}}}],"position":{"start":{"line":579,"column":1,"offset":27978},"end":{"line":579,"column":13,"offset":27990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree","position":{"start":{"line":581,"column":1,"offset":27994},"end":{"line":581,"column":20,"offset":28013}}}],"position":{"start":{"line":581,"column":1,"offset":27994},"end":{"line":581,"column":20,"offset":28013}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"struct TreeLinkNode {\n  TreeLinkNode *left;\n  TreeLinkNode *right;\n  TreeLinkNode *next;\n}\n"}],"position":{"start":{"line":583,"column":1,"offset":28017},"end":{"line":590,"column":4,"offset":28123}}}],"position":{"start":{"line":583,"column":1,"offset":28017},"end":{"line":590,"column":4,"offset":28123}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ","position":{"start":{"line":592,"column":1,"offset":28127},"end":{"line":592,"column":127,"offset":28253}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":592,"column":127,"offset":28253},"end":{"line":592,"column":133,"offset":28259}}},{"type":"text","value":".","position":{"start":{"line":592,"column":133,"offset":28259},"end":{"line":592,"column":134,"offset":28260}}}],"position":{"start":{"line":592,"column":1,"offset":28127},"end":{"line":592,"column":134,"offset":28260}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Initially, all next pointers are set to ","position":{"start":{"line":594,"column":1,"offset":28264},"end":{"line":594,"column":41,"offset":28304}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NULL"}],"position":{"start":{"line":594,"column":41,"offset":28304},"end":{"line":594,"column":47,"offset":28310}}},{"type":"text","value":".","position":{"start":{"line":594,"column":47,"offset":28310},"end":{"line":594,"column":48,"offset":28311}}}],"position":{"start":{"line":594,"column":1,"offset":28264},"end":{"line":594,"column":48,"offset":28311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":596,"column":3,"offset":28317},"end":{"line":596,"column":8,"offset":28322}}}],"position":{"start":{"line":596,"column":1,"offset":28315},"end":{"line":596,"column":10,"offset":28324}}}],"position":{"start":{"line":596,"column":1,"offset":28315},"end":{"line":596,"column":10,"offset":28324}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may only use constant extra space.","position":{"start":{"line":598,"column":5,"offset":28332},"end":{"line":598,"column":43,"offset":28370}}}],"position":{"start":{"line":598,"column":1,"offset":28328},"end":{"line":598,"column":43,"offset":28370}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Recursive approach is fine, implicit stack space does not count as extra space for this problem.","position":{"start":{"line":599,"column":5,"offset":28376},"end":{"line":599,"column":101,"offset":28472}}}],"position":{"start":{"line":599,"column":1,"offset":28372},"end":{"line":599,"column":101,"offset":28472}}},{"type":"text","value":"\n"}],"position":{"start":{"line":598,"column":1,"offset":28328},"end":{"line":599,"column":101,"offset":28472}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":601,"column":3,"offset":28478},"end":{"line":601,"column":11,"offset":28486}}}],"position":{"start":{"line":601,"column":1,"offset":28476},"end":{"line":601,"column":13,"offset":28488}}}],"position":{"start":{"line":601,"column":1,"offset":28476},"end":{"line":601,"column":13,"offset":28488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the following binary tree,","position":{"start":{"line":603,"column":1,"offset":28492},"end":{"line":603,"column":33,"offset":28524}}}],"position":{"start":{"line":603,"column":1,"offset":28492},"end":{"line":603,"column":33,"offset":28524}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1\n   /  \\\n  2    3\n / \\    \\\n4   5    7\n"}],"position":{"start":{"line":605,"column":1,"offset":28528},"end":{"line":612,"column":4,"offset":28588}}}],"position":{"start":{"line":605,"column":1,"offset":28528},"end":{"line":612,"column":4,"offset":28588}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After calling your function, the tree should look like:","position":{"start":{"line":614,"column":1,"offset":28592},"end":{"line":614,"column":56,"offset":28647}}}],"position":{"start":{"line":614,"column":1,"offset":28592},"end":{"line":614,"column":56,"offset":28647}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"     1 -> NULL\n   /  \\\n  2 -> 3 -> NULL\n / \\    \\\n4-> 5 -> 7 -> NULL\n"}],"position":{"start":{"line":616,"column":1,"offset":28651},"end":{"line":623,"column":4,"offset":28735}}}],"position":{"start":{"line":616,"column":1,"offset":28651},"end":{"line":623,"column":4,"offset":28735}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":625,"column":5,"offset":28743},"end":{"line":625,"column":14,"offset":28752}}}],"position":{"start":{"line":625,"column":1,"offset":28739},"end":{"line":625,"column":14,"offset":28752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":627,"column":6,"offset":28761},"end":{"line":627,"column":9,"offset":28764}}}],"position":{"start":{"line":627,"column":1,"offset":28756},"end":{"line":627,"column":9,"offset":28764}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Recursive. See ","position":{"start":{"line":629,"column":1,"offset":28768},"end":{"line":629,"column":16,"offset":28783}}},{"type":"element","tagName":"a","properties":{"href":"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":629,"column":17,"offset":28784},"end":{"line":629,"column":65,"offset":28832}}}],"position":{"start":{"line":629,"column":16,"offset":28783},"end":{"line":629,"column":135,"offset":28902}}},{"type":"text","value":".","position":{"start":{"line":629,"column":135,"offset":28902},"end":{"line":629,"column":136,"offset":28903}}}],"position":{"start":{"line":629,"column":1,"offset":28768},"end":{"line":629,"column":136,"offset":28903}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The tree may not be perfect now. So keep finding ","position":{"start":{"line":631,"column":1,"offset":28907},"end":{"line":631,"column":50,"offset":28956}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"next"}],"position":{"start":{"line":631,"column":50,"offset":28956},"end":{"line":631,"column":56,"offset":28962}}},{"type":"text","value":" until there is a node with children, or ","position":{"start":{"line":631,"column":56,"offset":28962},"end":{"line":631,"column":97,"offset":29003}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"null"}],"position":{"start":{"line":631,"column":97,"offset":29003},"end":{"line":631,"column":103,"offset":29009}}},{"type":"text","value":".","position":{"start":{"line":631,"column":103,"offset":29009},"end":{"line":631,"column":104,"offset":29010}}}],"position":{"start":{"line":631,"column":1,"offset":28907},"end":{"line":631,"column":104,"offset":29010}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This also means post-order traversal is required.","position":{"start":{"line":633,"column":1,"offset":29014},"end":{"line":633,"column":50,"offset":29063}}}],"position":{"start":{"line":633,"column":1,"offset":29014},"end":{"line":633,"column":50,"offset":29063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n    let next = null;\n    for (let node = root.next; node !== null; node = node.next) {\n        if (node.left !== null) {\n            next = node.left;\n            break;\n        }\n        if (node.right !== null) {\n            next = node.right;\n            break;\n        }\n    }\n    if (root.right !== null) {\n        root.right.next = next;\n    }\n    if (root.left !== null) {\n        root.left.next = root.right || next;\n    }\n    connect(root.right);\n    connect(root.left);\n};\n"}],"position":{"start":{"line":635,"column":1,"offset":29067},"end":{"line":672,"column":4,"offset":29945}}}],"position":{"start":{"line":635,"column":1,"offset":29067},"end":{"line":672,"column":4,"offset":29945}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":674,"column":6,"offset":29954},"end":{"line":674,"column":9,"offset":29957}}}],"position":{"start":{"line":674,"column":1,"offset":29949},"end":{"line":674,"column":9,"offset":29957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level order traversal. Exact same as ","position":{"start":{"line":676,"column":1,"offset":29961},"end":{"line":676,"column":38,"offset":29998}}},{"type":"element","tagName":"a","properties":{"href":"./116.%20Populating%20Next%20Right%20Pointers%20in%20Each%20Node.md"},"children":[{"type":"text","value":"116. Populating Next Right Pointers in Each Node","position":{"start":{"line":676,"column":39,"offset":29999},"end":{"line":676,"column":87,"offset":30047}}}],"position":{"start":{"line":676,"column":38,"offset":29998},"end":{"line":676,"column":157,"offset":30117}}},{"type":"text","value":".","position":{"start":{"line":676,"column":157,"offset":30117},"end":{"line":676,"column":158,"offset":30118}}}],"position":{"start":{"line":676,"column":1,"offset":29961},"end":{"line":676,"column":158,"offset":30118}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for binary tree with next pointer.\n * function TreeLinkNode(val) {\n *     this.val = val;\n *     this.left = this.right = this.next = null;\n * }\n */\n\n/**\n * @param {TreeLinkNode} root\n * @return {void} Do not return anything, modify tree in-place instead.\n */\nlet connect = function (root) {\n    if (!root) {\n        return;\n    }\n\n    const queue = [NaN, root];\n    while (queue.length > 1) {\n        const node = queue.shift();\n        if (node !== node) {\n            for (let i = 0; i < queue.length; i++) {\n                queue[i].next = queue[i + 1] || null;\n            }\n            queue.push(NaN);\n        } else {\n            if (node.left !== null) {\n                queue.push(node.left);\n            }\n            if (node.right !== null) {\n                queue.push(node.right);\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":678,"column":1,"offset":30122},"end":{"line":714,"column":4,"offset":31014}}}],"position":{"start":{"line":678,"column":1,"offset":30122},"end":{"line":714,"column":4,"offset":31014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":716,"column":1,"offset":31018},"end":{"line":716,"column":4,"offset":31021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":718,"column":1,"offset":31025},"end":{"line":720,"column":10,"offset":31069}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":720,"column":10,"offset":31069},"end":{"line":720,"column":40,"offset":31099}}}],"position":{"start":{"line":720,"column":10,"offset":31069},"end":{"line":720,"column":40,"offset":31099}}},{"type":"text","value":"\nSimilar Questions:\n\"Pascal's Triangle II\": ","position":{"start":{"line":720,"column":40,"offset":31099},"end":{"line":722,"column":25,"offset":31145}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/pascals-triangle-ii","position":{"start":{"line":722,"column":25,"offset":31145},"end":{"line":722,"column":74,"offset":31194}}}],"position":{"start":{"line":722,"column":25,"offset":31145},"end":{"line":722,"column":74,"offset":31194}}}],"position":{"start":{"line":718,"column":1,"offset":31025},"end":{"line":722,"column":74,"offset":31194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":724,"column":1,"offset":31198},"end":{"line":724,"column":4,"offset":31201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#118-pascals-trianglehttpsleetcodecomproblemspascals-triangledescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":726,"column":2,"offset":31206},"end":{"line":726,"column":142,"offset":31346}}}],"position":{"start":{"line":726,"column":1,"offset":31205},"end":{"line":726,"column":217,"offset":31421}}}],"position":{"start":{"line":726,"column":1,"offset":31205},"end":{"line":726,"column":217,"offset":31421}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":728,"column":4,"offset":31428},"end":{"line":728,"column":6,"offset":31430}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle/description/"},"children":[{"type":"text","value":"118. Pascal's Triangle","position":{"start":{"line":728,"column":7,"offset":31431},"end":{"line":728,"column":29,"offset":31453}}}],"position":{"start":{"line":728,"column":6,"offset":31430},"end":{"line":728,"column":91,"offset":31515}}}],"position":{"start":{"line":728,"column":1,"offset":31425},"end":{"line":728,"column":91,"offset":31515}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":730,"column":5,"offset":31523},"end":{"line":730,"column":13,"offset":31531}}}],"position":{"start":{"line":730,"column":1,"offset":31519},"end":{"line":730,"column":13,"offset":31531}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a non-negative integer ","position":{"start":{"line":732,"column":1,"offset":31535},"end":{"line":732,"column":30,"offset":31564}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"numRows","position":{"start":{"line":732,"column":31,"offset":31565},"end":{"line":732,"column":38,"offset":31572}}}],"position":{"start":{"line":732,"column":30,"offset":31564},"end":{"line":732,"column":39,"offset":31573}}},{"type":"text","value":", generate the first ","position":{"start":{"line":732,"column":39,"offset":31573},"end":{"line":732,"column":60,"offset":31594}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"numRows","position":{"start":{"line":732,"column":61,"offset":31595},"end":{"line":732,"column":68,"offset":31602}}}],"position":{"start":{"line":732,"column":60,"offset":31594},"end":{"line":732,"column":69,"offset":31603}}},{"type":"text","value":" of Pascal's triangle.","position":{"start":{"line":732,"column":69,"offset":31603},"end":{"line":732,"column":91,"offset":31625}}}],"position":{"start":{"line":732,"column":1,"offset":31535},"end":{"line":732,"column":91,"offset":31625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif","alt":"PascalTriangleAnimated2.gif"},"children":[],"position":{"start":{"line":734,"column":1,"offset":31629},"end":{"line":734,"column":112,"offset":31740}}}],"position":{"start":{"line":734,"column":1,"offset":31629},"end":{"line":734,"column":112,"offset":31740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Pascal's triangle, each number is the sum of the two numbers directly above it.","position":{"start":{"line":736,"column":1,"offset":31744},"end":{"line":736,"column":83,"offset":31826}}}],"position":{"start":{"line":736,"column":1,"offset":31744},"end":{"line":736,"column":83,"offset":31826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":738,"column":3,"offset":31832},"end":{"line":738,"column":11,"offset":31840}}}],"position":{"start":{"line":738,"column":1,"offset":31830},"end":{"line":738,"column":13,"offset":31842}}}],"position":{"start":{"line":738,"column":1,"offset":31830},"end":{"line":738,"column":13,"offset":31842}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n"}],"position":{"start":{"line":740,"column":1,"offset":31846},"end":{"line":751,"column":4,"offset":31945}}}],"position":{"start":{"line":740,"column":1,"offset":31846},"end":{"line":751,"column":4,"offset":31945}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":753,"column":5,"offset":31953},"end":{"line":753,"column":14,"offset":31962}}}],"position":{"start":{"line":753,"column":1,"offset":31949},"end":{"line":753,"column":14,"offset":31962}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic Programming 101.","position":{"start":{"line":755,"column":1,"offset":31966},"end":{"line":755,"column":25,"offset":31990}}}],"position":{"start":{"line":755,"column":1,"offset":31966},"end":{"line":755,"column":25,"offset":31990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number} numRows\n * @return {number[][]}\n */\nlet generate = function (numRows) {\n    if (numRows <= 0) {\n        return [];\n    }\n\n    const result = [[1]];\n    for (let i = 1; i < numRows; i++) {\n        const lastRow = result[i - 1];\n        const row = [1];\n        for (let j = 1; j < i; j++) {\n            row[j] = lastRow[j] + lastRow[j - 1];\n        }\n        row.push(1);\n        result.push(row);\n    }\n\n    return result;\n};\n"}],"position":{"start":{"line":757,"column":1,"offset":31994},"end":{"line":780,"column":4,"offset":32475}}}],"position":{"start":{"line":757,"column":1,"offset":31994},"end":{"line":780,"column":4,"offset":32475}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":782,"column":1,"offset":32479},"end":{"line":782,"column":4,"offset":32482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":784,"column":1,"offset":32486},"end":{"line":786,"column":10,"offset":32530}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":786,"column":10,"offset":32530},"end":{"line":786,"column":40,"offset":32560}}}],"position":{"start":{"line":786,"column":10,"offset":32530},"end":{"line":786,"column":40,"offset":32560}}},{"type":"text","value":"\nSimilar Questions:\n\"Pascal's Triangle\": ","position":{"start":{"line":786,"column":40,"offset":32560},"end":{"line":788,"column":22,"offset":32603}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle"},"children":[{"type":"text","value":"https://leetcode.com/problems/pascals-triangle","position":{"start":{"line":788,"column":22,"offset":32603},"end":{"line":788,"column":68,"offset":32649}}}],"position":{"start":{"line":788,"column":22,"offset":32603},"end":{"line":788,"column":68,"offset":32649}}}],"position":{"start":{"line":784,"column":1,"offset":32486},"end":{"line":788,"column":68,"offset":32649}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":790,"column":1,"offset":32653},"end":{"line":790,"column":4,"offset":32656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#119-pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":792,"column":2,"offset":32661},"end":{"line":792,"column":142,"offset":32801}}}],"position":{"start":{"line":792,"column":1,"offset":32660},"end":{"line":792,"column":223,"offset":32882}}}],"position":{"start":{"line":792,"column":1,"offset":32660},"end":{"line":792,"column":223,"offset":32882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":794,"column":4,"offset":32889},"end":{"line":794,"column":6,"offset":32891}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/pascals-triangle-ii/description/"},"children":[{"type":"text","value":"119. Pascal's Triangle II","position":{"start":{"line":794,"column":7,"offset":32892},"end":{"line":794,"column":32,"offset":32917}}}],"position":{"start":{"line":794,"column":6,"offset":32891},"end":{"line":794,"column":97,"offset":32982}}}],"position":{"start":{"line":794,"column":1,"offset":32886},"end":{"line":794,"column":97,"offset":32982}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":796,"column":5,"offset":32990},"end":{"line":796,"column":13,"offset":32998}}}],"position":{"start":{"line":796,"column":1,"offset":32986},"end":{"line":796,"column":13,"offset":32998}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a non-negative index ","position":{"start":{"line":798,"column":1,"offset":33002},"end":{"line":798,"column":28,"offset":33029}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":798,"column":29,"offset":33030},"end":{"line":798,"column":30,"offset":33031}}}],"position":{"start":{"line":798,"column":28,"offset":33029},"end":{"line":798,"column":31,"offset":33032}}},{"type":"text","value":" where ","position":{"start":{"line":798,"column":31,"offset":33032},"end":{"line":798,"column":38,"offset":33039}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":798,"column":39,"offset":33040},"end":{"line":798,"column":40,"offset":33041}}}],"position":{"start":{"line":798,"column":38,"offset":33039},"end":{"line":798,"column":41,"offset":33042}}},{"type":"text","value":" ≤ 33, return the ","position":{"start":{"line":798,"column":41,"offset":33042},"end":{"line":798,"column":59,"offset":33060}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":798,"column":60,"offset":33061},"end":{"line":798,"column":61,"offset":33062}}}],"position":{"start":{"line":798,"column":59,"offset":33060},"end":{"line":798,"column":62,"offset":33063}}},{"type":"text","value":"th index row of the Pascal's triangle.","position":{"start":{"line":798,"column":62,"offset":33063},"end":{"line":798,"column":100,"offset":33101}}}],"position":{"start":{"line":798,"column":1,"offset":33002},"end":{"line":798,"column":100,"offset":33101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that the row index starts from 0.","position":{"start":{"line":800,"column":1,"offset":33105},"end":{"line":800,"column":39,"offset":33143}}}],"position":{"start":{"line":800,"column":1,"offset":33105},"end":{"line":800,"column":39,"offset":33143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif","alt":"PascalTriangleAnimated2.gif"},"children":[],"position":{"start":{"line":802,"column":1,"offset":33147},"end":{"line":802,"column":112,"offset":33258}}}],"position":{"start":{"line":802,"column":1,"offset":33147},"end":{"line":802,"column":112,"offset":33258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In Pascal's triangle, each number is the sum of the two numbers directly above it.","position":{"start":{"line":804,"column":1,"offset":33262},"end":{"line":804,"column":83,"offset":33344}}}],"position":{"start":{"line":804,"column":1,"offset":33262},"end":{"line":804,"column":83,"offset":33344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":806,"column":3,"offset":33350},"end":{"line":806,"column":11,"offset":33358}}}],"position":{"start":{"line":806,"column":1,"offset":33348},"end":{"line":806,"column":13,"offset":33360}}}],"position":{"start":{"line":806,"column":1,"offset":33348},"end":{"line":806,"column":13,"offset":33360}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: 3\nOutput: [1,3,3,1]\n"}],"position":{"start":{"line":808,"column":1,"offset":33364},"end":{"line":812,"column":4,"offset":33403}}}],"position":{"start":{"line":808,"column":1,"offset":33364},"end":{"line":812,"column":4,"offset":33403}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Follow up:","position":{"start":{"line":814,"column":3,"offset":33409},"end":{"line":814,"column":13,"offset":33419}}}],"position":{"start":{"line":814,"column":1,"offset":33407},"end":{"line":814,"column":15,"offset":33421}}}],"position":{"start":{"line":814,"column":1,"offset":33407},"end":{"line":814,"column":15,"offset":33421}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Could you optimize your algorithm to use only ","position":{"start":{"line":816,"column":1,"offset":33425},"end":{"line":816,"column":47,"offset":33471}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O","position":{"start":{"line":816,"column":48,"offset":33472},"end":{"line":816,"column":49,"offset":33473}}}],"position":{"start":{"line":816,"column":47,"offset":33471},"end":{"line":816,"column":50,"offset":33474}}},{"type":"text","value":"(","position":{"start":{"line":816,"column":50,"offset":33474},"end":{"line":816,"column":51,"offset":33475}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"k","position":{"start":{"line":816,"column":52,"offset":33476},"end":{"line":816,"column":53,"offset":33477}}}],"position":{"start":{"line":816,"column":51,"offset":33475},"end":{"line":816,"column":54,"offset":33478}}},{"type":"text","value":") extra space?","position":{"start":{"line":816,"column":54,"offset":33478},"end":{"line":816,"column":68,"offset":33492}}}],"position":{"start":{"line":816,"column":1,"offset":33425},"end":{"line":816,"column":68,"offset":33492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":818,"column":5,"offset":33500},"end":{"line":818,"column":14,"offset":33509}}}],"position":{"start":{"line":818,"column":1,"offset":33496},"end":{"line":818,"column":14,"offset":33509}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic Programming 101 with dynamic array.","position":{"start":{"line":820,"column":1,"offset":33513},"end":{"line":820,"column":44,"offset":33556}}}],"position":{"start":{"line":820,"column":1,"offset":33513},"end":{"line":820,"column":44,"offset":33556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"State ","position":{"start":{"line":822,"column":1,"offset":33560},"end":{"line":822,"column":7,"offset":33566}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i, j)"}],"position":{"start":{"line":822,"column":7,"offset":33566},"end":{"line":822,"column":15,"offset":33574}}},{"type":"text","value":" depends on ","position":{"start":{"line":822,"column":15,"offset":33574},"end":{"line":822,"column":27,"offset":33586}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j)"}],"position":{"start":{"line":822,"column":27,"offset":33586},"end":{"line":822,"column":37,"offset":33596}}},{"type":"text","value":" and ","position":{"start":{"line":822,"column":37,"offset":33596},"end":{"line":822,"column":42,"offset":33601}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j-1)"}],"position":{"start":{"line":822,"column":42,"offset":33601},"end":{"line":822,"column":54,"offset":33613}}},{"type":"text","value":". So to access ","position":{"start":{"line":822,"column":54,"offset":33613},"end":{"line":822,"column":69,"offset":33628}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(i-1, j-1)"}],"position":{"start":{"line":822,"column":69,"offset":33628},"end":{"line":822,"column":81,"offset":33640}}},{"type":"text","value":" iteration must be from right to left.","position":{"start":{"line":822,"column":81,"offset":33640},"end":{"line":822,"column":119,"offset":33678}}}],"position":{"start":{"line":822,"column":1,"offset":33560},"end":{"line":822,"column":119,"offset":33678}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number} rowIndex\n * @return {number[]}\n */\nlet getRow = function (rowIndex) {\n    if (rowIndex < 0) {\n        return [];\n    }\n\n    const row = [1];\n    for (let i = 1; i <= rowIndex; i++) {\n        for (let j = i - 1; j > 0; j--) {\n            row[j] += row[j - 1];\n        }\n        row.push(1);\n    }\n\n    return row;\n};\n"}],"position":{"start":{"line":824,"column":1,"offset":33682},"end":{"line":844,"column":4,"offset":34050}}}],"position":{"start":{"line":824,"column":1,"offset":33682},"end":{"line":844,"column":4,"offset":34050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":846,"column":1,"offset":34054},"end":{"line":846,"column":4,"offset":34057}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Array\": ","position":{"start":{"line":848,"column":1,"offset":34061},"end":{"line":850,"column":10,"offset":34107}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":850,"column":10,"offset":34107},"end":{"line":850,"column":40,"offset":34137}}}],"position":{"start":{"line":850,"column":10,"offset":34107},"end":{"line":850,"column":40,"offset":34137}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":850,"column":40,"offset":34137},"end":{"line":851,"column":24,"offset":34162}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":851,"column":24,"offset":34162},"end":{"line":851,"column":68,"offset":34206}}}],"position":{"start":{"line":851,"column":24,"offset":34162},"end":{"line":851,"column":68,"offset":34206}}}],"position":{"start":{"line":848,"column":1,"offset":34061},"end":{"line":851,"column":68,"offset":34206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":853,"column":1,"offset":34210},"end":{"line":853,"column":4,"offset":34213}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#120-trianglehttpsleetcodecomproblemstriangledescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":855,"column":2,"offset":34218},"end":{"line":855,"column":142,"offset":34358}}}],"position":{"start":{"line":855,"column":1,"offset":34217},"end":{"line":855,"column":201,"offset":34417}}}],"position":{"start":{"line":855,"column":1,"offset":34217},"end":{"line":855,"column":201,"offset":34417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":857,"column":4,"offset":34424},"end":{"line":857,"column":6,"offset":34426}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/triangle/description/"},"children":[{"type":"text","value":"120. Triangle","position":{"start":{"line":857,"column":7,"offset":34427},"end":{"line":857,"column":20,"offset":34440}}}],"position":{"start":{"line":857,"column":6,"offset":34426},"end":{"line":857,"column":74,"offset":34494}}}],"position":{"start":{"line":857,"column":1,"offset":34421},"end":{"line":857,"column":74,"offset":34494}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":859,"column":5,"offset":34502},"end":{"line":859,"column":13,"offset":34510}}}],"position":{"start":{"line":859,"column":1,"offset":34498},"end":{"line":859,"column":13,"offset":34510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below.","position":{"start":{"line":861,"column":1,"offset":34514},"end":{"line":861,"column":125,"offset":34638}}}],"position":{"start":{"line":861,"column":1,"offset":34514},"end":{"line":861,"column":125,"offset":34638}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For example, given the following triangle","position":{"start":{"line":863,"column":1,"offset":34642},"end":{"line":863,"column":42,"offset":34683}}}],"position":{"start":{"line":863,"column":1,"offset":34642},"end":{"line":863,"column":42,"offset":34683}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n"}],"position":{"start":{"line":865,"column":1,"offset":34687},"end":{"line":873,"column":4,"offset":34752}}}],"position":{"start":{"line":865,"column":1,"offset":34687},"end":{"line":873,"column":4,"offset":34752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The minimum path sum from top to bottom is ","position":{"start":{"line":875,"column":1,"offset":34756},"end":{"line":875,"column":44,"offset":34799}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"11"}],"position":{"start":{"line":875,"column":44,"offset":34799},"end":{"line":875,"column":48,"offset":34803}}},{"type":"text","value":" (i.e., ","position":{"start":{"line":875,"column":48,"offset":34803},"end":{"line":875,"column":56,"offset":34811}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"2","position":{"start":{"line":875,"column":58,"offset":34813},"end":{"line":875,"column":59,"offset":34814}}}],"position":{"start":{"line":875,"column":56,"offset":34811},"end":{"line":875,"column":61,"offset":34816}}},{"type":"text","value":" + ","position":{"start":{"line":875,"column":61,"offset":34816},"end":{"line":875,"column":64,"offset":34819}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"3","position":{"start":{"line":875,"column":66,"offset":34821},"end":{"line":875,"column":67,"offset":34822}}}],"position":{"start":{"line":875,"column":64,"offset":34819},"end":{"line":875,"column":69,"offset":34824}}},{"type":"text","value":" + ","position":{"start":{"line":875,"column":69,"offset":34824},"end":{"line":875,"column":72,"offset":34827}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"5","position":{"start":{"line":875,"column":74,"offset":34829},"end":{"line":875,"column":75,"offset":34830}}}],"position":{"start":{"line":875,"column":72,"offset":34827},"end":{"line":875,"column":77,"offset":34832}}},{"type":"text","value":" + ","position":{"start":{"line":875,"column":77,"offset":34832},"end":{"line":875,"column":80,"offset":34835}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"1","position":{"start":{"line":875,"column":82,"offset":34837},"end":{"line":875,"column":83,"offset":34838}}}],"position":{"start":{"line":875,"column":80,"offset":34835},"end":{"line":875,"column":85,"offset":34840}}},{"type":"text","value":" = 11).","position":{"start":{"line":875,"column":85,"offset":34840},"end":{"line":875,"column":92,"offset":34847}}}],"position":{"start":{"line":875,"column":1,"offset":34756},"end":{"line":875,"column":92,"offset":34847}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":877,"column":3,"offset":34853},"end":{"line":877,"column":8,"offset":34858}}}],"position":{"start":{"line":877,"column":1,"offset":34851},"end":{"line":877,"column":10,"offset":34860}}}],"position":{"start":{"line":877,"column":1,"offset":34851},"end":{"line":877,"column":10,"offset":34860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Bonus point if you are able to do this using only ","position":{"start":{"line":879,"column":1,"offset":34864},"end":{"line":879,"column":51,"offset":34914}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O","position":{"start":{"line":879,"column":52,"offset":34915},"end":{"line":879,"column":53,"offset":34916}}}],"position":{"start":{"line":879,"column":51,"offset":34914},"end":{"line":879,"column":54,"offset":34917}}},{"type":"text","value":"(","position":{"start":{"line":879,"column":54,"offset":34917},"end":{"line":879,"column":55,"offset":34918}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":879,"column":56,"offset":34919},"end":{"line":879,"column":57,"offset":34920}}}],"position":{"start":{"line":879,"column":55,"offset":34918},"end":{"line":879,"column":58,"offset":34921}}},{"type":"text","value":") extra space, where ","position":{"start":{"line":879,"column":58,"offset":34921},"end":{"line":879,"column":79,"offset":34942}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":879,"column":80,"offset":34943},"end":{"line":879,"column":81,"offset":34944}}}],"position":{"start":{"line":879,"column":79,"offset":34942},"end":{"line":879,"column":82,"offset":34945}}},{"type":"text","value":" is the total number of rows in the triangle.","position":{"start":{"line":879,"column":82,"offset":34945},"end":{"line":879,"column":127,"offset":34990}}}],"position":{"start":{"line":879,"column":1,"offset":34864},"end":{"line":879,"column":127,"offset":34990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":881,"column":5,"offset":34998},"end":{"line":881,"column":14,"offset":35007}}}],"position":{"start":{"line":881,"column":1,"offset":34994},"end":{"line":881,"column":14,"offset":35007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":883,"column":1,"offset":35011},"end":{"line":883,"column":8,"offset":35018}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, j)"}],"position":{"start":{"line":883,"column":8,"offset":35018},"end":{"line":883,"column":17,"offset":35027}}},{"type":"text","value":" to be the minimum path sum from ","position":{"start":{"line":883,"column":17,"offset":35027},"end":{"line":883,"column":50,"offset":35060}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"triangle[0][0]"}],"position":{"start":{"line":883,"column":50,"offset":35060},"end":{"line":883,"column":66,"offset":35076}}},{"type":"text","value":" to ","position":{"start":{"line":883,"column":66,"offset":35076},"end":{"line":883,"column":70,"offset":35080}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"triangle[i][j]"}],"position":{"start":{"line":883,"column":70,"offset":35080},"end":{"line":883,"column":86,"offset":35096}}},{"type":"text","value":".","position":{"start":{"line":883,"column":86,"offset":35096},"end":{"line":883,"column":87,"offset":35097}}}],"position":{"start":{"line":883,"column":1,"offset":35011},"end":{"line":883,"column":87,"offset":35097}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(i, 0) = f(i-1, j) + triangle[i][0]\nf(i, j) = min( f(i-1, j-1), f(i-1, j) ) + triangle[i][j], 0 < j < i\nf(i, i) = f(i-1, i-1) + triangle[i][i], i > 0\n"}],"position":{"start":{"line":885,"column":1,"offset":35101},"end":{"line":887,"column":50,"offset":35265}}}],"position":{"start":{"line":885,"column":1,"offset":35101},"end":{"line":887,"column":50,"offset":35265}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Dynamic array can be used.","position":{"start":{"line":889,"column":1,"offset":35269},"end":{"line":889,"column":27,"offset":35295}}}],"position":{"start":{"line":889,"column":1,"offset":35269},"end":{"line":889,"column":27,"offset":35295}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[][]} triangle\n * @return {number}\n */\nlet minimumTotal = function (triangle) {\n    if (triangle.length <= 0) {\n        return 0;\n    }\n\n    const dp = [triangle[0][0]];\n    for (let i = 1; i < triangle.length; i++) {\n        dp[i] = dp[i - 1] + triangle[i][i];\n        for (let j = i - 1; j >= 1; j--) {\n            dp[j] = Math.min(dp[j], dp[j - 1]) + triangle[i][j];\n        }\n        dp[0] += triangle[i][0];\n    }\n    return Math.min(...dp);\n};\n"}],"position":{"start":{"line":891,"column":1,"offset":35299},"end":{"line":911,"column":4,"offset":35799}}}],"position":{"start":{"line":891,"column":1,"offset":35299},"end":{"line":911,"column":4,"offset":35799}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":913,"column":1,"offset":35803},"end":{"line":913,"column":4,"offset":35806}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":915,"column":1,"offset":35810},"end":{"line":917,"column":10,"offset":35854}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":917,"column":10,"offset":35854},"end":{"line":917,"column":40,"offset":35884}}}],"position":{"start":{"line":917,"column":10,"offset":35854},"end":{"line":917,"column":40,"offset":35884}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":917,"column":40,"offset":35884},"end":{"line":918,"column":24,"offset":35909}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":918,"column":24,"offset":35909},"end":{"line":918,"column":68,"offset":35953}}}],"position":{"start":{"line":918,"column":24,"offset":35909},"end":{"line":918,"column":68,"offset":35953}}},{"type":"text","value":"\nSimilar Questions:\n\"Maximum Subarray\": ","position":{"start":{"line":918,"column":68,"offset":35953},"end":{"line":920,"column":21,"offset":35995}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/maximum-subarray"},"children":[{"type":"text","value":"https://leetcode.com/problems/maximum-subarray","position":{"start":{"line":920,"column":21,"offset":35995},"end":{"line":920,"column":67,"offset":36041}}}],"position":{"start":{"line":920,"column":21,"offset":35995},"end":{"line":920,"column":67,"offset":36041}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock II\": ","position":{"start":{"line":920,"column":67,"offset":36041},"end":{"line":921,"column":39,"offset":36081}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii","position":{"start":{"line":921,"column":39,"offset":36081},"end":{"line":921,"column":103,"offset":36145}}}],"position":{"start":{"line":921,"column":39,"offset":36081},"end":{"line":921,"column":103,"offset":36145}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock III\": ","position":{"start":{"line":921,"column":103,"offset":36145},"end":{"line":922,"column":40,"offset":36186}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii","position":{"start":{"line":922,"column":40,"offset":36186},"end":{"line":922,"column":105,"offset":36251}}}],"position":{"start":{"line":922,"column":40,"offset":36186},"end":{"line":922,"column":105,"offset":36251}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":922,"column":105,"offset":36251},"end":{"line":923,"column":39,"offset":36291}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":923,"column":39,"offset":36291},"end":{"line":923,"column":103,"offset":36355}}}],"position":{"start":{"line":923,"column":39,"offset":36291},"end":{"line":923,"column":103,"offset":36355}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Cooldown\": ","position":{"start":{"line":923,"column":103,"offset":36355},"end":{"line":924,"column":50,"offset":36406}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown","position":{"start":{"line":924,"column":50,"offset":36406},"end":{"line":924,"column":125,"offset":36481}}}],"position":{"start":{"line":924,"column":50,"offset":36406},"end":{"line":924,"column":125,"offset":36481}}}],"position":{"start":{"line":915,"column":1,"offset":35810},"end":{"line":924,"column":125,"offset":36481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":926,"column":1,"offset":36485},"end":{"line":926,"column":4,"offset":36488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#121-best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stockdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":928,"column":2,"offset":36493},"end":{"line":928,"column":142,"offset":36633}}}],"position":{"start":{"line":928,"column":1,"offset":36492},"end":{"line":928,"column":247,"offset":36738}}}],"position":{"start":{"line":928,"column":1,"offset":36492},"end":{"line":928,"column":247,"offset":36738}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":930,"column":4,"offset":36745},"end":{"line":930,"column":6,"offset":36747}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/"},"children":[{"type":"text","value":"121. Best Time to Buy and Sell Stock","position":{"start":{"line":930,"column":7,"offset":36748},"end":{"line":930,"column":43,"offset":36784}}}],"position":{"start":{"line":930,"column":6,"offset":36747},"end":{"line":930,"column":120,"offset":36861}}}],"position":{"start":{"line":930,"column":1,"offset":36742},"end":{"line":930,"column":120,"offset":36861}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":932,"column":5,"offset":36869},"end":{"line":932,"column":13,"offset":36877}}}],"position":{"start":{"line":932,"column":1,"offset":36865},"end":{"line":932,"column":13,"offset":36877}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":934,"column":1,"offset":36881},"end":{"line":934,"column":37,"offset":36917}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":934,"column":38,"offset":36918},"end":{"line":934,"column":39,"offset":36919}}}],"position":{"start":{"line":934,"column":37,"offset":36917},"end":{"line":934,"column":40,"offset":36920}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":934,"column":40,"offset":36920},"end":{"line":934,"column":88,"offset":36968}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":934,"column":89,"offset":36969},"end":{"line":934,"column":90,"offset":36970}}}],"position":{"start":{"line":934,"column":88,"offset":36968},"end":{"line":934,"column":91,"offset":36971}}},{"type":"text","value":".","position":{"start":{"line":934,"column":91,"offset":36971},"end":{"line":934,"column":92,"offset":36972}}}],"position":{"start":{"line":934,"column":1,"offset":36881},"end":{"line":934,"column":92,"offset":36972}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit.","position":{"start":{"line":936,"column":1,"offset":36976},"end":{"line":936,"column":160,"offset":37135}}}],"position":{"start":{"line":936,"column":1,"offset":36976},"end":{"line":936,"column":160,"offset":37135}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note that you cannot sell a stock before you buy one.","position":{"start":{"line":938,"column":1,"offset":37139},"end":{"line":938,"column":54,"offset":37192}}}],"position":{"start":{"line":938,"column":1,"offset":37139},"end":{"line":938,"column":54,"offset":37192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":940,"column":3,"offset":37198},"end":{"line":940,"column":13,"offset":37208}}}],"position":{"start":{"line":940,"column":1,"offset":37196},"end":{"line":940,"column":15,"offset":37210}}}],"position":{"start":{"line":940,"column":1,"offset":37196},"end":{"line":940,"column":15,"offset":37210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n"}],"position":{"start":{"line":942,"column":1,"offset":37214},"end":{"line":948,"column":4,"offset":37427}}}],"position":{"start":{"line":942,"column":1,"offset":37214},"end":{"line":948,"column":4,"offset":37427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":950,"column":3,"offset":37433},"end":{"line":950,"column":13,"offset":37443}}}],"position":{"start":{"line":950,"column":1,"offset":37431},"end":{"line":950,"column":15,"offset":37445}}}],"position":{"start":{"line":950,"column":1,"offset":37431},"end":{"line":950,"column":15,"offset":37445}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":952,"column":1,"offset":37449},"end":{"line":957,"column":4,"offset":37563}}}],"position":{"start":{"line":952,"column":1,"offset":37449},"end":{"line":957,"column":4,"offset":37563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":959,"column":5,"offset":37571},"end":{"line":959,"column":14,"offset":37580}}}],"position":{"start":{"line":959,"column":1,"offset":37567},"end":{"line":959,"column":14,"offset":37580}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Only care about positive profits. Take the frist item as base and scan to the right. If we encounter an item ","position":{"start":{"line":961,"column":1,"offset":37584},"end":{"line":961,"column":110,"offset":37693}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":961,"column":110,"offset":37693},"end":{"line":961,"column":113,"offset":37696}}},{"type":"text","value":" whose price ","position":{"start":{"line":961,"column":113,"offset":37696},"end":{"line":961,"column":126,"offset":37709}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"price[j]"}],"position":{"start":{"line":961,"column":126,"offset":37709},"end":{"line":961,"column":136,"offset":37719}}},{"type":"text","value":" is lower than the base (which means if we sell now the profit would be negative), we sell ","position":{"start":{"line":961,"column":136,"offset":37719},"end":{"line":961,"column":227,"offset":37810}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j-1"}],"position":{"start":{"line":961,"column":227,"offset":37810},"end":{"line":961,"column":232,"offset":37815}}},{"type":"text","value":" instead and make ","position":{"start":{"line":961,"column":232,"offset":37815},"end":{"line":961,"column":250,"offset":37833}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":961,"column":250,"offset":37833},"end":{"line":961,"column":253,"offset":37836}}},{"type":"text","value":" the new base.","position":{"start":{"line":961,"column":253,"offset":37836},"end":{"line":961,"column":267,"offset":37850}}}],"position":{"start":{"line":961,"column":1,"offset":37584},"end":{"line":961,"column":267,"offset":37850}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Because ","position":{"start":{"line":963,"column":1,"offset":37854},"end":{"line":963,"column":9,"offset":37862}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"price[j]"}],"position":{"start":{"line":963,"column":9,"offset":37862},"end":{"line":963,"column":19,"offset":37872}}},{"type":"text","value":" is lower that the base, using ","position":{"start":{"line":963,"column":19,"offset":37872},"end":{"line":963,"column":50,"offset":37903}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"j"}],"position":{"start":{"line":963,"column":50,"offset":37903},"end":{"line":963,"column":53,"offset":37906}}},{"type":"text","value":" as new base is guaranteed to gain more profit comparing to the old one.","position":{"start":{"line":963,"column":53,"offset":37906},"end":{"line":963,"column":125,"offset":37978}}}],"position":{"start":{"line":963,"column":1,"offset":37854},"end":{"line":963,"column":125,"offset":37978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    let base = prices[0];\n    for (let i = 1; i < prices.length; i++) {\n        const profit = prices[i] - base;\n        if (profit > max) {\n            max = profit;\n        } else if (profit < 0) {\n            base = prices[i];\n        }\n    }\n    return max;\n};\n"}],"position":{"start":{"line":965,"column":1,"offset":37982},"end":{"line":983,"column":4,"offset":38383}}}],"position":{"start":{"line":965,"column":1,"offset":37982},"end":{"line":983,"column":4,"offset":38383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":985,"column":1,"offset":38387},"end":{"line":985,"column":4,"offset":38390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Array\": ","position":{"start":{"line":987,"column":1,"offset":38394},"end":{"line":989,"column":10,"offset":38438}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":989,"column":10,"offset":38438},"end":{"line":989,"column":40,"offset":38468}}}],"position":{"start":{"line":989,"column":10,"offset":38438},"end":{"line":989,"column":40,"offset":38468}}},{"type":"text","value":"\n\"Greedy\": ","position":{"start":{"line":989,"column":40,"offset":38468},"end":{"line":990,"column":11,"offset":38480}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/greedy"},"children":[{"type":"text","value":"https://leetcode.com/tag/greedy","position":{"start":{"line":990,"column":11,"offset":38480},"end":{"line":990,"column":42,"offset":38511}}}],"position":{"start":{"line":990,"column":11,"offset":38480},"end":{"line":990,"column":42,"offset":38511}}},{"type":"text","value":"\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": ","position":{"start":{"line":990,"column":42,"offset":38511},"end":{"line":992,"column":36,"offset":38568}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock","position":{"start":{"line":992,"column":36,"offset":38568},"end":{"line":992,"column":97,"offset":38629}}}],"position":{"start":{"line":992,"column":36,"offset":38568},"end":{"line":992,"column":97,"offset":38629}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock III\": ","position":{"start":{"line":992,"column":97,"offset":38629},"end":{"line":993,"column":40,"offset":38670}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii","position":{"start":{"line":993,"column":40,"offset":38670},"end":{"line":993,"column":105,"offset":38735}}}],"position":{"start":{"line":993,"column":40,"offset":38670},"end":{"line":993,"column":105,"offset":38735}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":993,"column":105,"offset":38735},"end":{"line":994,"column":39,"offset":38775}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":994,"column":39,"offset":38775},"end":{"line":994,"column":103,"offset":38839}}}],"position":{"start":{"line":994,"column":39,"offset":38775},"end":{"line":994,"column":103,"offset":38839}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Cooldown\": ","position":{"start":{"line":994,"column":103,"offset":38839},"end":{"line":995,"column":50,"offset":38890}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown","position":{"start":{"line":995,"column":50,"offset":38890},"end":{"line":995,"column":125,"offset":38965}}}],"position":{"start":{"line":995,"column":50,"offset":38890},"end":{"line":995,"column":125,"offset":38965}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock with Transaction Fee\": ","position":{"start":{"line":995,"column":125,"offset":38965},"end":{"line":996,"column":57,"offset":39023}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee","position":{"start":{"line":996,"column":57,"offset":39023},"end":{"line":996,"column":139,"offset":39105}}}],"position":{"start":{"line":996,"column":57,"offset":39023},"end":{"line":996,"column":139,"offset":39105}}}],"position":{"start":{"line":987,"column":1,"offset":38394},"end":{"line":996,"column":139,"offset":39105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":998,"column":1,"offset":39109},"end":{"line":998,"column":4,"offset":39112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#122-best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1000,"column":2,"offset":39117},"end":{"line":1000,"column":142,"offset":39257}}}],"position":{"start":{"line":1000,"column":1,"offset":39116},"end":{"line":1000,"column":253,"offset":39368}}}],"position":{"start":{"line":1000,"column":1,"offset":39116},"end":{"line":1000,"column":253,"offset":39368}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1002,"column":4,"offset":39375},"end":{"line":1002,"column":6,"offset":39377}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/"},"children":[{"type":"text","value":"122. Best Time to Buy and Sell Stock II","position":{"start":{"line":1002,"column":7,"offset":39378},"end":{"line":1002,"column":46,"offset":39417}}}],"position":{"start":{"line":1002,"column":6,"offset":39377},"end":{"line":1002,"column":126,"offset":39497}}}],"position":{"start":{"line":1002,"column":1,"offset":39372},"end":{"line":1002,"column":126,"offset":39497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1004,"column":5,"offset":39505},"end":{"line":1004,"column":13,"offset":39513}}}],"position":{"start":{"line":1004,"column":1,"offset":39501},"end":{"line":1004,"column":13,"offset":39513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":1006,"column":1,"offset":39517},"end":{"line":1006,"column":37,"offset":39553}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1006,"column":38,"offset":39554},"end":{"line":1006,"column":39,"offset":39555}}}],"position":{"start":{"line":1006,"column":37,"offset":39553},"end":{"line":1006,"column":40,"offset":39556}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":1006,"column":40,"offset":39556},"end":{"line":1006,"column":88,"offset":39604}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1006,"column":89,"offset":39605},"end":{"line":1006,"column":90,"offset":39606}}}],"position":{"start":{"line":1006,"column":88,"offset":39604},"end":{"line":1006,"column":91,"offset":39607}}},{"type":"text","value":".","position":{"start":{"line":1006,"column":91,"offset":39607},"end":{"line":1006,"column":92,"offset":39608}}}],"position":{"start":{"line":1006,"column":1,"offset":39517},"end":{"line":1006,"column":92,"offset":39608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).","position":{"start":{"line":1008,"column":1,"offset":39612},"end":{"line":1008,"column":162,"offset":39773}}}],"position":{"start":{"line":1008,"column":1,"offset":39612},"end":{"line":1008,"column":162,"offset":39773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1010,"column":3,"offset":39779},"end":{"line":1010,"column":8,"offset":39784}}}],"position":{"start":{"line":1010,"column":1,"offset":39777},"end":{"line":1010,"column":10,"offset":39786}}},{"type":"text","value":" You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","position":{"start":{"line":1010,"column":10,"offset":39786},"end":{"line":1010,"column":125,"offset":39901}}}],"position":{"start":{"line":1010,"column":1,"offset":39777},"end":{"line":1010,"column":125,"offset":39901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1012,"column":3,"offset":39907},"end":{"line":1012,"column":13,"offset":39917}}}],"position":{"start":{"line":1012,"column":1,"offset":39905},"end":{"line":1012,"column":15,"offset":39919}}}],"position":{"start":{"line":1012,"column":1,"offset":39905},"end":{"line":1012,"column":15,"offset":39919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n"}],"position":{"start":{"line":1014,"column":1,"offset":39923},"end":{"line":1020,"column":4,"offset":40147}}}],"position":{"start":{"line":1014,"column":1,"offset":39923},"end":{"line":1020,"column":4,"offset":40147}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1022,"column":3,"offset":40153},"end":{"line":1022,"column":13,"offset":40163}}}],"position":{"start":{"line":1022,"column":1,"offset":40151},"end":{"line":1022,"column":15,"offset":40165}}}],"position":{"start":{"line":1022,"column":1,"offset":40151},"end":{"line":1022,"column":15,"offset":40165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n"}],"position":{"start":{"line":1024,"column":1,"offset":40169},"end":{"line":1031,"column":4,"offset":40490}}}],"position":{"start":{"line":1024,"column":1,"offset":40169},"end":{"line":1031,"column":4,"offset":40490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":1033,"column":3,"offset":40496},"end":{"line":1033,"column":13,"offset":40506}}}],"position":{"start":{"line":1033,"column":1,"offset":40494},"end":{"line":1033,"column":15,"offset":40508}}}],"position":{"start":{"line":1033,"column":1,"offset":40494},"end":{"line":1033,"column":15,"offset":40508}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":1035,"column":1,"offset":40512},"end":{"line":1037,"column":76,"offset":40626}}}],"position":{"start":{"line":1035,"column":1,"offset":40512},"end":{"line":1037,"column":76,"offset":40626}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1039,"column":5,"offset":40634},"end":{"line":1039,"column":14,"offset":40643}}}],"position":{"start":{"line":1039,"column":1,"offset":40630},"end":{"line":1039,"column":14,"offset":40643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sell immediately after the price drops. Or in other perspective, it is the sum of all the incremental pairs (buy in then immediately sell out).","position":{"start":{"line":1041,"column":1,"offset":40647},"end":{"line":1041,"column":144,"offset":40790}}}],"position":{"start":{"line":1041,"column":1,"offset":40647},"end":{"line":1041,"column":144,"offset":40790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    let max = 0;\n    for (let i = 1; i < prices.length; i++) {\n        if (prices[i] > prices[i - 1]) {\n            max += prices[i] - prices[i - 1];\n        }\n    }\n    return max;\n};\n"}],"position":{"start":{"line":1043,"column":1,"offset":40794},"end":{"line":1057,"column":4,"offset":41094}}}],"position":{"start":{"line":1043,"column":1,"offset":40794},"end":{"line":1057,"column":4,"offset":41094}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1059,"column":1,"offset":41098},"end":{"line":1059,"column":4,"offset":41101}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1061,"column":1,"offset":41105},"end":{"line":1063,"column":10,"offset":41149}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1063,"column":10,"offset":41149},"end":{"line":1063,"column":40,"offset":41179}}}],"position":{"start":{"line":1063,"column":10,"offset":41149},"end":{"line":1063,"column":40,"offset":41179}}},{"type":"text","value":"\n\"Dynamic Programming\": ","position":{"start":{"line":1063,"column":40,"offset":41179},"end":{"line":1064,"column":24,"offset":41204}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/dynamic-programming"},"children":[{"type":"text","value":"https://leetcode.com/tag/dynamic-programming","position":{"start":{"line":1064,"column":24,"offset":41204},"end":{"line":1064,"column":68,"offset":41248}}}],"position":{"start":{"line":1064,"column":24,"offset":41204},"end":{"line":1064,"column":68,"offset":41248}}},{"type":"text","value":"\nSimilar Questions:\n\"Best Time to Buy and Sell Stock\": ","position":{"start":{"line":1064,"column":68,"offset":41248},"end":{"line":1066,"column":36,"offset":41305}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock","position":{"start":{"line":1066,"column":36,"offset":41305},"end":{"line":1066,"column":97,"offset":41366}}}],"position":{"start":{"line":1066,"column":36,"offset":41305},"end":{"line":1066,"column":97,"offset":41366}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock II\": ","position":{"start":{"line":1066,"column":97,"offset":41366},"end":{"line":1067,"column":39,"offset":41406}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii","position":{"start":{"line":1067,"column":39,"offset":41406},"end":{"line":1067,"column":103,"offset":41470}}}],"position":{"start":{"line":1067,"column":39,"offset":41406},"end":{"line":1067,"column":103,"offset":41470}}},{"type":"text","value":"\n\"Best Time to Buy and Sell Stock IV\": ","position":{"start":{"line":1067,"column":103,"offset":41470},"end":{"line":1068,"column":39,"offset":41510}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv","position":{"start":{"line":1068,"column":39,"offset":41510},"end":{"line":1068,"column":103,"offset":41574}}}],"position":{"start":{"line":1068,"column":39,"offset":41510},"end":{"line":1068,"column":103,"offset":41574}}},{"type":"text","value":"\n\"Maximum Sum of 3 Non-Overlapping Subarrays\": ","position":{"start":{"line":1068,"column":103,"offset":41574},"end":{"line":1069,"column":47,"offset":41622}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays"},"children":[{"type":"text","value":"https://leetcode.com/problems/maximum-sum-of-3-non-overlapping-subarrays","position":{"start":{"line":1069,"column":47,"offset":41622},"end":{"line":1069,"column":119,"offset":41694}}}],"position":{"start":{"line":1069,"column":47,"offset":41622},"end":{"line":1069,"column":119,"offset":41694}}}],"position":{"start":{"line":1061,"column":1,"offset":41105},"end":{"line":1069,"column":119,"offset":41694}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1071,"column":1,"offset":41698},"end":{"line":1071,"column":4,"offset":41701}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#123-best-time-to-buy-and-sell-stock-iiihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-iiidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1073,"column":2,"offset":41706},"end":{"line":1073,"column":142,"offset":41846}}}],"position":{"start":{"line":1073,"column":1,"offset":41705},"end":{"line":1073,"column":255,"offset":41959}}}],"position":{"start":{"line":1073,"column":1,"offset":41705},"end":{"line":1073,"column":255,"offset":41959}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1075,"column":4,"offset":41966},"end":{"line":1075,"column":6,"offset":41968}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/description/"},"children":[{"type":"text","value":"123. Best Time to Buy and Sell Stock III","position":{"start":{"line":1075,"column":7,"offset":41969},"end":{"line":1075,"column":47,"offset":42009}}}],"position":{"start":{"line":1075,"column":6,"offset":41968},"end":{"line":1075,"column":128,"offset":42090}}}],"position":{"start":{"line":1075,"column":1,"offset":41963},"end":{"line":1075,"column":128,"offset":42090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1077,"column":5,"offset":42098},"end":{"line":1077,"column":13,"offset":42106}}}],"position":{"start":{"line":1077,"column":1,"offset":42094},"end":{"line":1077,"column":13,"offset":42106}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you have an array for which the ","position":{"start":{"line":1079,"column":1,"offset":42110},"end":{"line":1079,"column":37,"offset":42146}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1079,"column":38,"offset":42147},"end":{"line":1079,"column":39,"offset":42148}}}],"position":{"start":{"line":1079,"column":37,"offset":42146},"end":{"line":1079,"column":40,"offset":42149}}},{"type":"text","value":"th element is the price of a given stock on day ","position":{"start":{"line":1079,"column":40,"offset":42149},"end":{"line":1079,"column":88,"offset":42197}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"i","position":{"start":{"line":1079,"column":89,"offset":42198},"end":{"line":1079,"column":90,"offset":42199}}}],"position":{"start":{"line":1079,"column":88,"offset":42197},"end":{"line":1079,"column":91,"offset":42200}}},{"type":"text","value":".","position":{"start":{"line":1079,"column":91,"offset":42200},"end":{"line":1079,"column":92,"offset":42201}}}],"position":{"start":{"line":1079,"column":1,"offset":42110},"end":{"line":1079,"column":92,"offset":42201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Design an algorithm to find the maximum profit. You may complete at most ","position":{"start":{"line":1081,"column":1,"offset":42205},"end":{"line":1081,"column":74,"offset":42278}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"two","position":{"start":{"line":1081,"column":75,"offset":42279},"end":{"line":1081,"column":78,"offset":42282}}}],"position":{"start":{"line":1081,"column":74,"offset":42278},"end":{"line":1081,"column":79,"offset":42283}}},{"type":"text","value":" transactions.","position":{"start":{"line":1081,"column":79,"offset":42283},"end":{"line":1081,"column":93,"offset":42297}}}],"position":{"start":{"line":1081,"column":1,"offset":42205},"end":{"line":1081,"column":93,"offset":42297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"*","position":{"start":{"line":1083,"column":1,"offset":42301},"end":{"line":1083,"column":3,"offset":42303}}},{"type":"text","value":"*","position":{"start":{"line":1083,"column":3,"offset":42303},"end":{"line":1083,"column":5,"offset":42305}}},{"type":"text","value":"Note:","position":{"start":{"line":1083,"column":5,"offset":42305},"end":{"line":1083,"column":10,"offset":42310}}},{"type":"text","value":"*","position":{"start":{"line":1083,"column":10,"offset":42310},"end":{"line":1083,"column":12,"offset":42312}}},{"type":"text","value":"*","position":{"start":{"line":1083,"column":12,"offset":42312},"end":{"line":1083,"column":14,"offset":42314}}},{"type":"text","value":"You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).","position":{"start":{"line":1083,"column":14,"offset":42314},"end":{"line":1083,"column":128,"offset":42428}}}],"position":{"start":{"line":1083,"column":1,"offset":42301},"end":{"line":1083,"column":128,"offset":42428}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1085,"column":3,"offset":42434},"end":{"line":1085,"column":13,"offset":42444}}}],"position":{"start":{"line":1085,"column":1,"offset":42432},"end":{"line":1085,"column":15,"offset":42446}}}],"position":{"start":{"line":1085,"column":1,"offset":42432},"end":{"line":1085,"column":15,"offset":42446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [3,3,5,0,0,3,1,4]\nOutput: 6\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n             Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n"}],"position":{"start":{"line":1087,"column":1,"offset":42450},"end":{"line":1090,"column":96,"offset":42682}}}],"position":{"start":{"line":1087,"column":1,"offset":42450},"end":{"line":1090,"column":96,"offset":42682}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1092,"column":3,"offset":42688},"end":{"line":1092,"column":13,"offset":42698}}}],"position":{"start":{"line":1092,"column":1,"offset":42686},"end":{"line":1092,"column":15,"offset":42700}}}],"position":{"start":{"line":1092,"column":1,"offset":42686},"end":{"line":1092,"column":15,"offset":42700}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n"}],"position":{"start":{"line":1094,"column":1,"offset":42704},"end":{"line":1101,"column":4,"offset":43025}}}],"position":{"start":{"line":1094,"column":1,"offset":42704},"end":{"line":1101,"column":4,"offset":43025}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":1103,"column":3,"offset":43031},"end":{"line":1103,"column":13,"offset":43041}}}],"position":{"start":{"line":1103,"column":1,"offset":43029},"end":{"line":1103,"column":15,"offset":43043}}}],"position":{"start":{"line":1103,"column":1,"offset":43029},"end":{"line":1103,"column":15,"offset":43043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"}],"position":{"start":{"line":1105,"column":1,"offset":43047},"end":{"line":1107,"column":76,"offset":43161}}}],"position":{"start":{"line":1105,"column":1,"offset":43047},"end":{"line":1107,"column":76,"offset":43161}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1109,"column":5,"offset":43169},"end":{"line":1109,"column":14,"offset":43178}}}],"position":{"start":{"line":1109,"column":1,"offset":43165},"end":{"line":1109,"column":14,"offset":43178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Multiple transactions may not be engaged in at the same time. That means if we view the days that involed in the same transaction as a group, there won't be any intersection. We may complete at most ","position":{"start":{"line":1111,"column":1,"offset":43182},"end":{"line":1111,"column":200,"offset":43381}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"two","position":{"start":{"line":1111,"column":201,"offset":43382},"end":{"line":1111,"column":204,"offset":43385}}}],"position":{"start":{"line":1111,"column":200,"offset":43381},"end":{"line":1111,"column":205,"offset":43386}}},{"type":"text","value":" transactions, so divide the days into two groups, ","position":{"start":{"line":1111,"column":205,"offset":43386},"end":{"line":1111,"column":256,"offset":43437}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0...k]"}],"position":{"start":{"line":1111,"column":256,"offset":43437},"end":{"line":1111,"column":265,"offset":43446}}},{"type":"text","value":" and ","position":{"start":{"line":1111,"column":265,"offset":43446},"end":{"line":1111,"column":270,"offset":43451}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[k...n-1]"}],"position":{"start":{"line":1111,"column":270,"offset":43451},"end":{"line":1111,"column":281,"offset":43462}}},{"type":"text","value":". Notice ","position":{"start":{"line":1111,"column":281,"offset":43462},"end":{"line":1111,"column":290,"offset":43471}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"k"}],"position":{"start":{"line":1111,"column":290,"offset":43471},"end":{"line":1111,"column":293,"offset":43474}}},{"type":"text","value":" exists in both groups because technically we can sell out then immediately buy in at the same day.","position":{"start":{"line":1111,"column":293,"offset":43474},"end":{"line":1111,"column":392,"offset":43573}}}],"position":{"start":{"line":1111,"column":1,"offset":43182},"end":{"line":1111,"column":392,"offset":43573}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1113,"column":1,"offset":43577},"end":{"line":1113,"column":8,"offset":43584}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(i)"}],"position":{"start":{"line":1113,"column":8,"offset":43584},"end":{"line":1113,"column":15,"offset":43591}}},{"type":"text","value":" to be the max profit of day ","position":{"start":{"line":1113,"column":15,"offset":43591},"end":{"line":1113,"column":44,"offset":43620}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0...i]"}],"position":{"start":{"line":1113,"column":44,"offset":43620},"end":{"line":1113,"column":53,"offset":43629}}},{"type":"text","value":". This is just like the problem of ","position":{"start":{"line":1113,"column":53,"offset":43629},"end":{"line":1113,"column":88,"offset":43664}}},{"type":"element","tagName":"a","properties":{"href":"./121.%20Best%20Time%20to%20Buy%20and%20Sell%20Stock.md"},"children":[{"type":"text","value":"121. Best Time to Buy and Sell Stock","position":{"start":{"line":1113,"column":89,"offset":43665},"end":{"line":1113,"column":125,"offset":43701}}}],"position":{"start":{"line":1113,"column":88,"offset":43664},"end":{"line":1113,"column":183,"offset":43759}}},{"type":"text","value":".","position":{"start":{"line":1113,"column":183,"offset":43759},"end":{"line":1113,"column":184,"offset":43760}}}],"position":{"start":{"line":1113,"column":1,"offset":43577},"end":{"line":1113,"column":184,"offset":43760}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(0) = 0\np1(i) = max( p1(i-1), prices[i] - min(prices[0], ..., prices[i-1]) ), 0 < i <= n-1\n"}],"position":{"start":{"line":1115,"column":1,"offset":43764},"end":{"line":1116,"column":87,"offset":43865}}}],"position":{"start":{"line":1115,"column":1,"offset":43764},"end":{"line":1116,"column":87,"offset":43865}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1118,"column":1,"offset":43869},"end":{"line":1118,"column":8,"offset":43876}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p2(i)"}],"position":{"start":{"line":1118,"column":8,"offset":43876},"end":{"line":1118,"column":15,"offset":43883}}},{"type":"text","value":" to be the max profit of day ","position":{"start":{"line":1118,"column":15,"offset":43883},"end":{"line":1118,"column":44,"offset":43912}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[i...n-1]"}],"position":{"start":{"line":1118,"column":44,"offset":43912},"end":{"line":1118,"column":55,"offset":43923}}},{"type":"text","value":". This is the mirror of ","position":{"start":{"line":1118,"column":55,"offset":43923},"end":{"line":1118,"column":79,"offset":43947}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1"}],"position":{"start":{"line":1118,"column":79,"offset":43947},"end":{"line":1118,"column":83,"offset":43951}}},{"type":"text","value":".","position":{"start":{"line":1118,"column":83,"offset":43951},"end":{"line":1118,"column":84,"offset":43952}}}],"position":{"start":{"line":1118,"column":1,"offset":43869},"end":{"line":1118,"column":84,"offset":43952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p2(n-1) = 0\np2(i) = max( p2(i+1), max(prices[i], ..., prices[n-1]) - prices[i] ), n-1 > i >= 0\n"}],"position":{"start":{"line":1120,"column":1,"offset":43956},"end":{"line":1121,"column":87,"offset":44059}}}],"position":{"start":{"line":1120,"column":1,"offset":43956},"end":{"line":1121,"column":87,"offset":44059}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define ","position":{"start":{"line":1123,"column":1,"offset":44063},"end":{"line":1123,"column":8,"offset":44070}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"f(k)"}],"position":{"start":{"line":1123,"column":8,"offset":44070},"end":{"line":1123,"column":14,"offset":44076}}},{"type":"text","value":" to be ","position":{"start":{"line":1123,"column":14,"offset":44076},"end":{"line":1123,"column":21,"offset":44083}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"p1(k) + p2(k)"}],"position":{"start":{"line":1123,"column":21,"offset":44083},"end":{"line":1123,"column":36,"offset":44098}}},{"type":"text","value":". We need to get ","position":{"start":{"line":1123,"column":36,"offset":44098},"end":{"line":1123,"column":53,"offset":44115}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"max( f(0), ..., f(n-1) )"}],"position":{"start":{"line":1123,"column":53,"offset":44115},"end":{"line":1123,"column":79,"offset":44141}}},{"type":"text","value":".","position":{"start":{"line":1123,"column":79,"offset":44141},"end":{"line":1123,"column":80,"offset":44142}}}],"position":{"start":{"line":1123,"column":1,"offset":44063},"end":{"line":1123,"column":80,"offset":44142}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} prices\n * @return {number}\n */\nlet maxProfit = function (prices) {\n    const len = prices.length;\n    if (len <= 1) {\n        return 0;\n    }\n\n    const dp = [0];\n\n    let min = prices[0];\n    for (let i = 1; i < len; i++) {\n        dp[i] = Math.max(dp[i - 1], prices[i] - min);\n        min = Math.min(prices[i], min);\n    }\n\n    let p2 = 0;\n    let max = prices[len - 1];\n    for (let i = len - 2; i >= 0; i--) {\n        max = Math.max(prices[i], max);\n        p2 = Math.max(p2, max - prices[i]);\n        dp[i] += p2;\n    }\n\n    return Math.max(...dp);\n};\n"}],"position":{"start":{"line":1125,"column":1,"offset":44146},"end":{"line":1154,"column":4,"offset":44766}}}],"position":{"start":{"line":1125,"column":1,"offset":44146},"end":{"line":1154,"column":4,"offset":44766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1156,"column":1,"offset":44770},"end":{"line":1156,"column":4,"offset":44773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":1158,"column":1,"offset":44777},"end":{"line":1160,"column":9,"offset":44820}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":1160,"column":9,"offset":44820},"end":{"line":1160,"column":38,"offset":44849}}}],"position":{"start":{"line":1160,"column":9,"offset":44820},"end":{"line":1160,"column":38,"offset":44849}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":1160,"column":38,"offset":44849},"end":{"line":1161,"column":23,"offset":44873}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1161,"column":23,"offset":44873},"end":{"line":1161,"column":66,"offset":44916}}}],"position":{"start":{"line":1161,"column":23,"offset":44873},"end":{"line":1161,"column":66,"offset":44916}}},{"type":"text","value":"\nSimilar Questions:\n\"Path Sum\": ","position":{"start":{"line":1161,"column":66,"offset":44916},"end":{"line":1163,"column":13,"offset":44950}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum","position":{"start":{"line":1163,"column":13,"offset":44950},"end":{"line":1163,"column":51,"offset":44988}}}],"position":{"start":{"line":1163,"column":13,"offset":44950},"end":{"line":1163,"column":51,"offset":44988}}},{"type":"text","value":"\n\"Sum Root to Leaf Numbers\": ","position":{"start":{"line":1163,"column":51,"offset":44988},"end":{"line":1164,"column":29,"offset":45018}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/sum-root-to-leaf-numbers"},"children":[{"type":"text","value":"https://leetcode.com/problems/sum-root-to-leaf-numbers","position":{"start":{"line":1164,"column":29,"offset":45018},"end":{"line":1164,"column":83,"offset":45072}}}],"position":{"start":{"line":1164,"column":29,"offset":45018},"end":{"line":1164,"column":83,"offset":45072}}},{"type":"text","value":"\n\"Path Sum IV\": ","position":{"start":{"line":1164,"column":83,"offset":45072},"end":{"line":1165,"column":16,"offset":45089}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum-iv"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum-iv","position":{"start":{"line":1165,"column":16,"offset":45089},"end":{"line":1165,"column":57,"offset":45130}}}],"position":{"start":{"line":1165,"column":16,"offset":45089},"end":{"line":1165,"column":57,"offset":45130}}},{"type":"text","value":"\n\"Longest Univalue Path\": ","position":{"start":{"line":1165,"column":57,"offset":45130},"end":{"line":1166,"column":26,"offset":45157}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/longest-univalue-path"},"children":[{"type":"text","value":"https://leetcode.com/problems/longest-univalue-path","position":{"start":{"line":1166,"column":26,"offset":45157},"end":{"line":1166,"column":77,"offset":45208}}}],"position":{"start":{"line":1166,"column":26,"offset":45157},"end":{"line":1166,"column":77,"offset":45208}}}],"position":{"start":{"line":1158,"column":1,"offset":44777},"end":{"line":1166,"column":77,"offset":45208}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1168,"column":1,"offset":45212},"end":{"line":1168,"column":4,"offset":45215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#124-binary-tree-maximum-path-sumhttpsleetcodecomproblemsbinary-tree-maximum-path-sumdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1170,"column":2,"offset":45220},"end":{"line":1170,"column":142,"offset":45360}}}],"position":{"start":{"line":1170,"column":1,"offset":45219},"end":{"line":1170,"column":241,"offset":45459}}}],"position":{"start":{"line":1170,"column":1,"offset":45219},"end":{"line":1170,"column":241,"offset":45459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1172,"column":4,"offset":45466},"end":{"line":1172,"column":6,"offset":45468}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-maximum-path-sum/description/"},"children":[{"type":"text","value":"124. Binary Tree Maximum Path Sum","position":{"start":{"line":1172,"column":7,"offset":45469},"end":{"line":1172,"column":40,"offset":45502}}}],"position":{"start":{"line":1172,"column":6,"offset":45468},"end":{"line":1172,"column":114,"offset":45576}}}],"position":{"start":{"line":1172,"column":1,"offset":45463},"end":{"line":1172,"column":114,"offset":45576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1174,"column":5,"offset":45584},"end":{"line":1174,"column":13,"offset":45592}}}],"position":{"start":{"line":1174,"column":1,"offset":45580},"end":{"line":1174,"column":13,"offset":45592}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a ","position":{"start":{"line":1176,"column":1,"offset":45596},"end":{"line":1176,"column":9,"offset":45604}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"non-empty","position":{"start":{"line":1176,"column":11,"offset":45606},"end":{"line":1176,"column":20,"offset":45615}}}],"position":{"start":{"line":1176,"column":9,"offset":45604},"end":{"line":1176,"column":22,"offset":45617}}},{"type":"text","value":" binary tree, find the maximum path sum.","position":{"start":{"line":1176,"column":22,"offset":45617},"end":{"line":1176,"column":62,"offset":45657}}}],"position":{"start":{"line":1176,"column":1,"offset":45596},"end":{"line":1176,"column":62,"offset":45657}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain ","position":{"start":{"line":1178,"column":1,"offset":45661},"end":{"line":1178,"column":168,"offset":45828}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"at least one node","position":{"start":{"line":1178,"column":170,"offset":45830},"end":{"line":1178,"column":187,"offset":45847}}}],"position":{"start":{"line":1178,"column":168,"offset":45828},"end":{"line":1178,"column":189,"offset":45849}}},{"type":"text","value":" and does not need to go through the root.","position":{"start":{"line":1178,"column":189,"offset":45849},"end":{"line":1178,"column":231,"offset":45891}}}],"position":{"start":{"line":1178,"column":1,"offset":45661},"end":{"line":1178,"column":231,"offset":45891}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1180,"column":3,"offset":45897},"end":{"line":1180,"column":13,"offset":45907}}}],"position":{"start":{"line":1180,"column":1,"offset":45895},"end":{"line":1180,"column":15,"offset":45909}}}],"position":{"start":{"line":1180,"column":1,"offset":45895},"end":{"line":1180,"column":15,"offset":45909}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n"}],"position":{"start":{"line":1182,"column":1,"offset":45913},"end":{"line":1191,"column":4,"offset":45987}}}],"position":{"start":{"line":1182,"column":1,"offset":45913},"end":{"line":1191,"column":4,"offset":45987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1193,"column":3,"offset":45993},"end":{"line":1193,"column":13,"offset":46003}}}],"position":{"start":{"line":1193,"column":1,"offset":45991},"end":{"line":1193,"column":15,"offset":46005}}}],"position":{"start":{"line":1193,"column":1,"offset":45991},"end":{"line":1193,"column":15,"offset":46005}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n"}],"position":{"start":{"line":1195,"column":1,"offset":46009},"end":{"line":1206,"column":4,"offset":46115}}}],"position":{"start":{"line":1195,"column":1,"offset":46009},"end":{"line":1206,"column":4,"offset":46115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1208,"column":5,"offset":46123},"end":{"line":1208,"column":14,"offset":46132}}}],"position":{"start":{"line":1208,"column":1,"offset":46119},"end":{"line":1208,"column":14,"offset":46132}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For every ","position":{"start":{"line":1210,"column":1,"offset":46136},"end":{"line":1210,"column":11,"offset":46146}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node"}],"position":{"start":{"line":1210,"column":11,"offset":46146},"end":{"line":1210,"column":17,"offset":46152}}},{"type":"text","value":", there are six possible ways to get the max path sum:","position":{"start":{"line":1210,"column":17,"offset":46152},"end":{"line":1210,"column":71,"offset":46206}}}],"position":{"start":{"line":1210,"column":1,"offset":46136},"end":{"line":1210,"column":71,"offset":46206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"With ","position":{"start":{"line":1212,"column":5,"offset":46214},"end":{"line":1212,"column":10,"offset":46219}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1212,"column":10,"offset":46219},"end":{"line":1212,"column":20,"offset":46229}}}],"position":{"start":{"line":1212,"column":5,"offset":46214},"end":{"line":1212,"column":20,"offset":46229}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1213,"column":9,"offset":46239},"end":{"line":1213,"column":19,"offset":46249}}},{"type":"text","value":" plus the max sum of a path that ends with ","position":{"start":{"line":1213,"column":19,"offset":46249},"end":{"line":1213,"column":62,"offset":46292}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.left"}],"position":{"start":{"line":1213,"column":62,"offset":46292},"end":{"line":1213,"column":73,"offset":46303}}},{"type":"text","value":".","position":{"start":{"line":1213,"column":73,"offset":46303},"end":{"line":1213,"column":74,"offset":46304}}}],"position":{"start":{"line":1213,"column":5,"offset":46235},"end":{"line":1213,"column":74,"offset":46304}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1214,"column":9,"offset":46314},"end":{"line":1214,"column":19,"offset":46324}}},{"type":"text","value":" plus the max sum of a path that starts with ","position":{"start":{"line":1214,"column":19,"offset":46324},"end":{"line":1214,"column":64,"offset":46369}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":1214,"column":64,"offset":46369},"end":{"line":1214,"column":76,"offset":46381}}},{"type":"text","value":".","position":{"start":{"line":1214,"column":76,"offset":46381},"end":{"line":1214,"column":77,"offset":46382}}}],"position":{"start":{"line":1214,"column":5,"offset":46310},"end":{"line":1214,"column":77,"offset":46382}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1215,"column":9,"offset":46392},"end":{"line":1215,"column":19,"offset":46402}}},{"type":"text","value":" plus the max sum of both paths.","position":{"start":{"line":1215,"column":19,"offset":46402},"end":{"line":1215,"column":51,"offset":46434}}}],"position":{"start":{"line":1215,"column":5,"offset":46388},"end":{"line":1215,"column":51,"offset":46434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Just ","position":{"start":{"line":1216,"column":9,"offset":46444},"end":{"line":1216,"column":14,"offset":46449}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1216,"column":14,"offset":46449},"end":{"line":1216,"column":24,"offset":46459}}},{"type":"text","value":" (the max sum of both paths are negative).","position":{"start":{"line":1216,"column":24,"offset":46459},"end":{"line":1216,"column":66,"offset":46501}}}],"position":{"start":{"line":1216,"column":5,"offset":46440},"end":{"line":1216,"column":66,"offset":46501}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1213,"column":5,"offset":46235},"end":{"line":1216,"column":66,"offset":46501}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1212,"column":1,"offset":46210},"end":{"line":1216,"column":66,"offset":46501}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Without","position":{"start":{"line":1217,"column":5,"offset":46507},"end":{"line":1217,"column":12,"offset":46514}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.val"}],"position":{"start":{"line":1217,"column":12,"offset":46514},"end":{"line":1217,"column":22,"offset":46524}}},{"type":"text","value":" (disconnected)","position":{"start":{"line":1217,"column":22,"offset":46524},"end":{"line":1217,"column":37,"offset":46539}}}],"position":{"start":{"line":1217,"column":5,"offset":46507},"end":{"line":1217,"column":37,"offset":46539}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The max-sum path is somewhere under the ","position":{"start":{"line":1218,"column":9,"offset":46549},"end":{"line":1218,"column":49,"offset":46589}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.left"}],"position":{"start":{"line":1218,"column":49,"offset":46589},"end":{"line":1218,"column":60,"offset":46600}}},{"type":"text","value":" subtree.","position":{"start":{"line":1218,"column":60,"offset":46600},"end":{"line":1218,"column":69,"offset":46609}}}],"position":{"start":{"line":1218,"column":5,"offset":46545},"end":{"line":1218,"column":69,"offset":46609}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The max-sum path is somewhere under the ","position":{"start":{"line":1219,"column":9,"offset":46619},"end":{"line":1219,"column":49,"offset":46659}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"node.right"}],"position":{"start":{"line":1219,"column":49,"offset":46659},"end":{"line":1219,"column":61,"offset":46671}}},{"type":"text","value":" subtree.","position":{"start":{"line":1219,"column":61,"offset":46671},"end":{"line":1219,"column":70,"offset":46680}}}],"position":{"start":{"line":1219,"column":5,"offset":46615},"end":{"line":1219,"column":70,"offset":46680}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1218,"column":5,"offset":46545},"end":{"line":1219,"column":70,"offset":46680}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1217,"column":1,"offset":46503},"end":{"line":1219,"column":70,"offset":46680}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1212,"column":1,"offset":46210},"end":{"line":1219,"column":70,"offset":46680}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are two ways to implement this.","position":{"start":{"line":1221,"column":1,"offset":46684},"end":{"line":1221,"column":38,"offset":46721}}}],"position":{"start":{"line":1221,"column":1,"offset":46684},"end":{"line":1221,"column":38,"offset":46721}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":1223,"column":6,"offset":46730},"end":{"line":1223,"column":9,"offset":46733}}}],"position":{"start":{"line":1223,"column":1,"offset":46725},"end":{"line":1223,"column":9,"offset":46733}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Define a function that returns two values. The max sum of a path that may or may not end with ","position":{"start":{"line":1225,"column":1,"offset":46737},"end":{"line":1225,"column":95,"offset":46831}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1225,"column":95,"offset":46831},"end":{"line":1225,"column":101,"offset":46837}}},{"type":"text","value":" node, and the max sum of the path that ends with ","position":{"start":{"line":1225,"column":101,"offset":46837},"end":{"line":1225,"column":151,"offset":46887}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1225,"column":151,"offset":46887},"end":{"line":1225,"column":157,"offset":46893}}},{"type":"text","value":" node.","position":{"start":{"line":1225,"column":157,"offset":46893},"end":{"line":1225,"column":163,"offset":46899}}}],"position":{"start":{"line":1225,"column":1,"offset":46737},"end":{"line":1225,"column":163,"offset":46899}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    return Math.max(..._maxPathSum(root));\n};\n\n/**\n * @param {TreeNode} root\n * @return {number[]}\n */\nfunction _maxPathSum(root) {\n    if (!root) {\n        return [-Infinity, -Infinity];\n    }\n\n    const left = _maxPathSum(root.left);\n    const right = _maxPathSum(root.right);\n    return [Math.max(left[0], right[0], root.val + Math.max(0, left[1], right[1], left[1] + right[1])), Math.max(left[1], right[1], 0) + root.val];\n}\n"}],"position":{"start":{"line":1227,"column":1,"offset":46903},"end":{"line":1256,"column":4,"offset":47599}}}],"position":{"start":{"line":1227,"column":1,"offset":46903},"end":{"line":1256,"column":4,"offset":47599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":1258,"column":6,"offset":47608},"end":{"line":1258,"column":9,"offset":47611}}}],"position":{"start":{"line":1258,"column":1,"offset":47603},"end":{"line":1258,"column":9,"offset":47611}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just return the later (max sum of a path that ends with ","position":{"start":{"line":1260,"column":1,"offset":47615},"end":{"line":1260,"column":57,"offset":47671}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":1260,"column":57,"offset":47671},"end":{"line":1260,"column":63,"offset":47677}}},{"type":"text","value":"). Maintain a global variable to store the disconnected max sum.","position":{"start":{"line":1260,"column":63,"offset":47677},"end":{"line":1260,"column":127,"offset":47741}}}],"position":{"start":{"line":1260,"column":1,"offset":47615},"end":{"line":1260,"column":127,"offset":47741}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet maxPathSum = function (root) {\n    const global = { max: -Infinity };\n    _maxPathSum(root, global);\n    return global.max;\n};\n\n/**\n * @param {TreeNode} root\n * @param {object} global\n * @param {number} global.max\n * @return {number[]}\n */\nfunction _maxPathSum(root, global) {\n    if (!root) {\n        return -Infinity;\n    }\n\n    const left = _maxPathSum(root.left, global);\n    const right = _maxPathSum(root.right, global);\n    const localMax = Math.max(left, right, 0) + root.val;\n    global.max = Math.max(global.max, localMax, root.val + left + right);\n    return localMax;\n}\n"}],"position":{"start":{"line":1262,"column":1,"offset":47745},"end":{"line":1297,"column":4,"offset":48569}}}],"position":{"start":{"line":1262,"column":1,"offset":47745},"end":{"line":1297,"column":4,"offset":48569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1299,"column":1,"offset":48573},"end":{"line":1299,"column":4,"offset":48576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Easy\nRelated Topics:\n\"Two Pointers\": ","position":{"start":{"line":1301,"column":1,"offset":48580},"end":{"line":1303,"column":17,"offset":48631}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/two-pointers"},"children":[{"type":"text","value":"https://leetcode.com/tag/two-pointers","position":{"start":{"line":1303,"column":17,"offset":48631},"end":{"line":1303,"column":54,"offset":48668}}}],"position":{"start":{"line":1303,"column":17,"offset":48631},"end":{"line":1303,"column":54,"offset":48668}}},{"type":"text","value":"\n\"String\": ","position":{"start":{"line":1303,"column":54,"offset":48668},"end":{"line":1304,"column":11,"offset":48680}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/string"},"children":[{"type":"text","value":"https://leetcode.com/tag/string","position":{"start":{"line":1304,"column":11,"offset":48680},"end":{"line":1304,"column":42,"offset":48711}}}],"position":{"start":{"line":1304,"column":11,"offset":48680},"end":{"line":1304,"column":42,"offset":48711}}},{"type":"text","value":"\nSimilar Questions:\n\"Palindrome Linked List\": ","position":{"start":{"line":1304,"column":42,"offset":48711},"end":{"line":1306,"column":27,"offset":48759}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/palindrome-linked-list"},"children":[{"type":"text","value":"https://leetcode.com/problems/palindrome-linked-list","position":{"start":{"line":1306,"column":27,"offset":48759},"end":{"line":1306,"column":79,"offset":48811}}}],"position":{"start":{"line":1306,"column":27,"offset":48759},"end":{"line":1306,"column":79,"offset":48811}}},{"type":"text","value":"\n\"Valid Palindrome II\": ","position":{"start":{"line":1306,"column":79,"offset":48811},"end":{"line":1307,"column":24,"offset":48836}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/valid-palindrome-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/valid-palindrome-ii","position":{"start":{"line":1307,"column":24,"offset":48836},"end":{"line":1307,"column":73,"offset":48885}}}],"position":{"start":{"line":1307,"column":24,"offset":48836},"end":{"line":1307,"column":73,"offset":48885}}}],"position":{"start":{"line":1301,"column":1,"offset":48580},"end":{"line":1307,"column":73,"offset":48885}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1309,"column":1,"offset":48889},"end":{"line":1309,"column":4,"offset":48892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#125-valid-palindromehttpsleetcodecomproblemsvalid-palindromedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1311,"column":2,"offset":48897},"end":{"line":1311,"column":142,"offset":49037}}}],"position":{"start":{"line":1311,"column":1,"offset":48896},"end":{"line":1311,"column":217,"offset":49112}}}],"position":{"start":{"line":1311,"column":1,"offset":48896},"end":{"line":1311,"column":217,"offset":49112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1313,"column":4,"offset":49119},"end":{"line":1313,"column":6,"offset":49121}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/valid-palindrome/description/"},"children":[{"type":"text","value":"125. Valid Palindrome","position":{"start":{"line":1313,"column":7,"offset":49122},"end":{"line":1313,"column":28,"offset":49143}}}],"position":{"start":{"line":1313,"column":6,"offset":49121},"end":{"line":1313,"column":90,"offset":49205}}}],"position":{"start":{"line":1313,"column":1,"offset":49116},"end":{"line":1313,"column":90,"offset":49205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1315,"column":5,"offset":49213},"end":{"line":1315,"column":13,"offset":49221}}}],"position":{"start":{"line":1315,"column":1,"offset":49209},"end":{"line":1315,"column":13,"offset":49221}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.","position":{"start":{"line":1317,"column":1,"offset":49225},"end":{"line":1317,"column":110,"offset":49334}}}],"position":{"start":{"line":1317,"column":1,"offset":49225},"end":{"line":1317,"column":110,"offset":49334}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1319,"column":3,"offset":49340},"end":{"line":1319,"column":8,"offset":49345}}}],"position":{"start":{"line":1319,"column":1,"offset":49338},"end":{"line":1319,"column":10,"offset":49347}}},{"type":"text","value":" For the purpose of this problem, we define empty string as valid palindrome.","position":{"start":{"line":1319,"column":10,"offset":49347},"end":{"line":1319,"column":87,"offset":49424}}}],"position":{"start":{"line":1319,"column":1,"offset":49338},"end":{"line":1319,"column":87,"offset":49424}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1321,"column":3,"offset":49430},"end":{"line":1321,"column":13,"offset":49440}}}],"position":{"start":{"line":1321,"column":1,"offset":49428},"end":{"line":1321,"column":15,"offset":49442}}}],"position":{"start":{"line":1321,"column":1,"offset":49428},"end":{"line":1321,"column":15,"offset":49442}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: \"A man, a plan, a canal: Panama\"\nOutput: true\n"}],"position":{"start":{"line":1323,"column":1,"offset":49446},"end":{"line":1327,"column":4,"offset":49511}}}],"position":{"start":{"line":1323,"column":1,"offset":49446},"end":{"line":1327,"column":4,"offset":49511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1329,"column":3,"offset":49517},"end":{"line":1329,"column":13,"offset":49527}}}],"position":{"start":{"line":1329,"column":1,"offset":49515},"end":{"line":1329,"column":15,"offset":49529}}}],"position":{"start":{"line":1329,"column":1,"offset":49515},"end":{"line":1329,"column":15,"offset":49529}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: \"race a car\"\nOutput: false\n"}],"position":{"start":{"line":1331,"column":1,"offset":49533},"end":{"line":1335,"column":4,"offset":49579}}}],"position":{"start":{"line":1331,"column":1,"offset":49533},"end":{"line":1335,"column":4,"offset":49579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1337,"column":5,"offset":49587},"end":{"line":1337,"column":14,"offset":49596}}}],"position":{"start":{"line":1337,"column":1,"offset":49583},"end":{"line":1337,"column":14,"offset":49596}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"ONE","position":{"start":{"line":1339,"column":6,"offset":49605},"end":{"line":1339,"column":9,"offset":49608}}}],"position":{"start":{"line":1339,"column":1,"offset":49600},"end":{"line":1339,"column":9,"offset":49608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.toLowerCase().split(/[^a-z0-9]*/);\n    return clean.join('') === clean.reverse().join('');\n};\n"}],"position":{"start":{"line":1341,"column":1,"offset":49612},"end":{"line":1350,"column":4,"offset":49828}}}],"position":{"start":{"line":1341,"column":1,"offset":49612},"end":{"line":1350,"column":4,"offset":49828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"TWO","position":{"start":{"line":1352,"column":6,"offset":49837},"end":{"line":1352,"column":9,"offset":49840}}}],"position":{"start":{"line":1352,"column":1,"offset":49832},"end":{"line":1352,"column":9,"offset":49840}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Remove non-alphanumeric characters then compare.","position":{"start":{"line":1354,"column":1,"offset":49844},"end":{"line":1354,"column":49,"offset":49892}}}],"position":{"start":{"line":1354,"column":1,"offset":49844},"end":{"line":1354,"column":49,"offset":49892}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    const clean = s.replace(/[^a-zA-Z0-9]/g, '').toLowerCase();\n    for (let i = 0, j = clean.length - 1; i < j; i++, j--) {\n        if (clean[i] !== clean[j]) {\n            return false;\n        }\n    }\n    return true;\n};\n"}],"position":{"start":{"line":1356,"column":1,"offset":49896},"end":{"line":1370,"column":4,"offset":50227}}}],"position":{"start":{"line":1356,"column":1,"offset":49896},"end":{"line":1370,"column":4,"offset":50227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"text","value":"THREE","position":{"start":{"line":1372,"column":6,"offset":50236},"end":{"line":1372,"column":11,"offset":50241}}}],"position":{"start":{"line":1372,"column":1,"offset":50231},"end":{"line":1372,"column":11,"offset":50241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Compare the char codes.","position":{"start":{"line":1374,"column":1,"offset":50245},"end":{"line":1374,"column":24,"offset":50268}}}],"position":{"start":{"line":1374,"column":1,"offset":50245},"end":{"line":1374,"column":24,"offset":50268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} s\n * @return {boolean}\n */\nlet isPalindrome = function (s) {\n    for (let i = 0, j = s.length - 1; i < j; i++, j--) {\n        let left = s.charCodeAt(i);\n        while (i < j && (left < 48 || (left > 57 && left < 65) || (left > 90 && left < 97) || left > 122)) {\n            left = s.charCodeAt(++i);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (left >= 65 && left <= 90) {\n            left += 32;\n        }\n\n        let right = s.charCodeAt(j);\n        while (i < j && (right < 48 || (right > 57 && right < 65) || (right > 90 && right < 97) || right > 122)) {\n            right = s.charCodeAt(--j);\n        }\n        if (i >= j) {\n            return true;\n        }\n        if (right >= 65 && right <= 90) {\n            right += 32;\n        }\n\n        if (left !== right) {\n            return false;\n        }\n    }\n\n    return true;\n};\n"}],"position":{"start":{"line":1376,"column":1,"offset":50272},"end":{"line":1412,"column":4,"offset":51212}}}],"position":{"start":{"line":1376,"column":1,"offset":50272},"end":{"line":1412,"column":4,"offset":51212}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1414,"column":1,"offset":51216},"end":{"line":1414,"column":4,"offset":51219}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1416,"column":1,"offset":51223},"end":{"line":1418,"column":10,"offset":51267}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1418,"column":10,"offset":51267},"end":{"line":1418,"column":40,"offset":51297}}}],"position":{"start":{"line":1418,"column":10,"offset":51267},"end":{"line":1418,"column":40,"offset":51297}}},{"type":"text","value":"\n\"String\": ","position":{"start":{"line":1418,"column":40,"offset":51297},"end":{"line":1419,"column":11,"offset":51309}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/string"},"children":[{"type":"text","value":"https://leetcode.com/tag/string","position":{"start":{"line":1419,"column":11,"offset":51309},"end":{"line":1419,"column":42,"offset":51340}}}],"position":{"start":{"line":1419,"column":11,"offset":51309},"end":{"line":1419,"column":42,"offset":51340}}},{"type":"text","value":"\n\"Backtracking\": ","position":{"start":{"line":1419,"column":42,"offset":51340},"end":{"line":1420,"column":17,"offset":51358}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/backtracking"},"children":[{"type":"text","value":"https://leetcode.com/tag/backtracking","position":{"start":{"line":1420,"column":17,"offset":51358},"end":{"line":1420,"column":54,"offset":51395}}}],"position":{"start":{"line":1420,"column":17,"offset":51358},"end":{"line":1420,"column":54,"offset":51395}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1420,"column":54,"offset":51395},"end":{"line":1421,"column":25,"offset":51421}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1421,"column":25,"offset":51421},"end":{"line":1421,"column":70,"offset":51466}}}],"position":{"start":{"line":1421,"column":25,"offset":51421},"end":{"line":1421,"column":70,"offset":51466}}},{"type":"text","value":"\nSimilar Questions:\n\"Word Ladder\": ","position":{"start":{"line":1421,"column":70,"offset":51466},"end":{"line":1423,"column":16,"offset":51503}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder"},"children":[{"type":"text","value":"https://leetcode.com/problems/word-ladder","position":{"start":{"line":1423,"column":16,"offset":51503},"end":{"line":1423,"column":57,"offset":51544}}}],"position":{"start":{"line":1423,"column":16,"offset":51503},"end":{"line":1423,"column":57,"offset":51544}}}],"position":{"start":{"line":1416,"column":1,"offset":51223},"end":{"line":1423,"column":57,"offset":51544}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1425,"column":1,"offset":51548},"end":{"line":1425,"column":4,"offset":51551}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#126-word-ladder-iihttpsleetcodecomproblemsword-ladder-iidescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1427,"column":2,"offset":51556},"end":{"line":1427,"column":142,"offset":51696}}}],"position":{"start":{"line":1427,"column":1,"offset":51555},"end":{"line":1427,"column":213,"offset":51767}}}],"position":{"start":{"line":1427,"column":1,"offset":51555},"end":{"line":1427,"column":213,"offset":51767}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1429,"column":4,"offset":51774},"end":{"line":1429,"column":6,"offset":51776}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder-ii/description/"},"children":[{"type":"text","value":"126. Word Ladder II","position":{"start":{"line":1429,"column":7,"offset":51777},"end":{"line":1429,"column":26,"offset":51796}}}],"position":{"start":{"line":1429,"column":6,"offset":51776},"end":{"line":1429,"column":86,"offset":51856}}}],"position":{"start":{"line":1429,"column":1,"offset":51771},"end":{"line":1429,"column":86,"offset":51856}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1431,"column":5,"offset":51864},"end":{"line":1431,"column":13,"offset":51872}}}],"position":{"start":{"line":1431,"column":1,"offset":51860},"end":{"line":1431,"column":13,"offset":51872}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given two words (","position":{"start":{"line":1433,"column":1,"offset":51876},"end":{"line":1433,"column":18,"offset":51893}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1433,"column":19,"offset":51894},"end":{"line":1433,"column":28,"offset":51903}}}],"position":{"start":{"line":1433,"column":18,"offset":51893},"end":{"line":1433,"column":29,"offset":51904}}},{"type":"text","value":" and ","position":{"start":{"line":1433,"column":29,"offset":51904},"end":{"line":1433,"column":34,"offset":51909}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1433,"column":35,"offset":51910},"end":{"line":1433,"column":42,"offset":51917}}}],"position":{"start":{"line":1433,"column":34,"offset":51909},"end":{"line":1433,"column":43,"offset":51918}}},{"type":"text","value":"), and a dictionary's word list, find all shortest transformation sequence(s) from ","position":{"start":{"line":1433,"column":43,"offset":51918},"end":{"line":1433,"column":126,"offset":52001}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1433,"column":127,"offset":52002},"end":{"line":1433,"column":136,"offset":52011}}}],"position":{"start":{"line":1433,"column":126,"offset":52001},"end":{"line":1433,"column":137,"offset":52012}}},{"type":"text","value":" to ","position":{"start":{"line":1433,"column":137,"offset":52012},"end":{"line":1433,"column":141,"offset":52016}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1433,"column":142,"offset":52017},"end":{"line":1433,"column":149,"offset":52024}}}],"position":{"start":{"line":1433,"column":141,"offset":52016},"end":{"line":1433,"column":150,"offset":52025}}},{"type":"text","value":", such that:","position":{"start":{"line":1433,"column":150,"offset":52025},"end":{"line":1433,"column":162,"offset":52037}}}],"position":{"start":{"line":1433,"column":1,"offset":51876},"end":{"line":1433,"column":162,"offset":52037}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Only one letter can be changed at a time","position":{"start":{"line":1435,"column":5,"offset":52045},"end":{"line":1435,"column":45,"offset":52085}}}],"position":{"start":{"line":1435,"column":1,"offset":52041},"end":{"line":1435,"column":45,"offset":52085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each transformed word must exist in the word list. Note that ","position":{"start":{"line":1436,"column":5,"offset":52091},"end":{"line":1436,"column":66,"offset":52152}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1436,"column":67,"offset":52153},"end":{"line":1436,"column":76,"offset":52162}}}],"position":{"start":{"line":1436,"column":66,"offset":52152},"end":{"line":1436,"column":77,"offset":52163}}},{"type":"text","value":" is ","position":{"start":{"line":1436,"column":77,"offset":52163},"end":{"line":1436,"column":81,"offset":52167}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":1436,"column":82,"offset":52168},"end":{"line":1436,"column":85,"offset":52171}}}],"position":{"start":{"line":1436,"column":81,"offset":52167},"end":{"line":1436,"column":86,"offset":52172}}},{"type":"text","value":" a transformed word.","position":{"start":{"line":1436,"column":86,"offset":52172},"end":{"line":1436,"column":106,"offset":52192}}}],"position":{"start":{"line":1436,"column":1,"offset":52087},"end":{"line":1436,"column":106,"offset":52192}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1435,"column":1,"offset":52041},"end":{"line":1436,"column":106,"offset":52192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1438,"column":3,"offset":52198},"end":{"line":1438,"column":8,"offset":52203}}}],"position":{"start":{"line":1438,"column":1,"offset":52196},"end":{"line":1438,"column":10,"offset":52205}}}],"position":{"start":{"line":1438,"column":1,"offset":52196},"end":{"line":1438,"column":10,"offset":52205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Return an empty list if there is no such transformation sequence.","position":{"start":{"line":1440,"column":5,"offset":52213},"end":{"line":1440,"column":70,"offset":52278}}}],"position":{"start":{"line":1440,"column":1,"offset":52209},"end":{"line":1440,"column":70,"offset":52278}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words have the same length.","position":{"start":{"line":1441,"column":5,"offset":52284},"end":{"line":1441,"column":36,"offset":52315}}}],"position":{"start":{"line":1441,"column":1,"offset":52280},"end":{"line":1441,"column":36,"offset":52315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words contain only lowercase alphabetic characters.","position":{"start":{"line":1442,"column":5,"offset":52321},"end":{"line":1442,"column":60,"offset":52376}}}],"position":{"start":{"line":1442,"column":1,"offset":52317},"end":{"line":1442,"column":60,"offset":52376}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume no duplicates in the word list.","position":{"start":{"line":1443,"column":5,"offset":52382},"end":{"line":1443,"column":51,"offset":52428}}}],"position":{"start":{"line":1443,"column":1,"offset":52378},"end":{"line":1443,"column":51,"offset":52428}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume ","position":{"start":{"line":1444,"column":5,"offset":52434},"end":{"line":1444,"column":20,"offset":52449}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1444,"column":21,"offset":52450},"end":{"line":1444,"column":30,"offset":52459}}}],"position":{"start":{"line":1444,"column":20,"offset":52449},"end":{"line":1444,"column":31,"offset":52460}}},{"type":"text","value":" and ","position":{"start":{"line":1444,"column":31,"offset":52460},"end":{"line":1444,"column":36,"offset":52465}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1444,"column":37,"offset":52466},"end":{"line":1444,"column":44,"offset":52473}}}],"position":{"start":{"line":1444,"column":36,"offset":52465},"end":{"line":1444,"column":45,"offset":52474}}},{"type":"text","value":" are non-empty and are not the same.","position":{"start":{"line":1444,"column":45,"offset":52474},"end":{"line":1444,"column":81,"offset":52510}}}],"position":{"start":{"line":1444,"column":1,"offset":52430},"end":{"line":1444,"column":81,"offset":52510}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1440,"column":1,"offset":52209},"end":{"line":1444,"column":81,"offset":52510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1446,"column":3,"offset":52516},"end":{"line":1446,"column":13,"offset":52526}}}],"position":{"start":{"line":1446,"column":1,"offset":52514},"end":{"line":1446,"column":15,"offset":52528}}}],"position":{"start":{"line":1446,"column":1,"offset":52514},"end":{"line":1446,"column":15,"offset":52528}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput:\n[\n  [\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],\n  [\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]\n]\n"}],"position":{"start":{"line":1448,"column":1,"offset":52532},"end":{"line":1460,"column":4,"offset":52726}}}],"position":{"start":{"line":1448,"column":1,"offset":52532},"end":{"line":1460,"column":4,"offset":52726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1462,"column":3,"offset":52732},"end":{"line":1462,"column":13,"offset":52742}}}],"position":{"start":{"line":1462,"column":1,"offset":52730},"end":{"line":1462,"column":15,"offset":52744}}}],"position":{"start":{"line":1462,"column":1,"offset":52730},"end":{"line":1462,"column":15,"offset":52744}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: []\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n"}],"position":{"start":{"line":1464,"column":1,"offset":52748},"end":{"line":1474,"column":4,"offset":52952}}}],"position":{"start":{"line":1464,"column":1,"offset":52748},"end":{"line":1474,"column":4,"offset":52952}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1476,"column":5,"offset":52960},"end":{"line":1476,"column":14,"offset":52969}}}],"position":{"start":{"line":1476,"column":1,"offset":52956},"end":{"line":1476,"column":14,"offset":52969}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is just like ","position":{"start":{"line":1478,"column":1,"offset":52973},"end":{"line":1478,"column":19,"offset":52991}}},{"type":"element","tagName":"a","properties":{"href":"./127.%20Word%20Ladder"},"children":[{"type":"text","value":"127. Word Ladder","position":{"start":{"line":1478,"column":20,"offset":52992},"end":{"line":1478,"column":36,"offset":53008}}}],"position":{"start":{"line":1478,"column":19,"offset":52991},"end":{"line":1478,"column":61,"offset":53033}}},{"type":"text","value":".","position":{"start":{"line":1478,"column":61,"offset":53033},"end":{"line":1478,"column":62,"offset":53034}}}],"position":{"start":{"line":1478,"column":1,"offset":52973},"end":{"line":1478,"column":62,"offset":53034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The constrain still works, but instead of deleting the words right away, collect them and delete them all when a level ends, so that we can reuse the words (matching different parents in the same level).","position":{"start":{"line":1480,"column":1,"offset":53038},"end":{"line":1480,"column":204,"offset":53241}}}],"position":{"start":{"line":1480,"column":1,"offset":53038},"end":{"line":1480,"column":204,"offset":53241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The items in the queue are not just words now. Parent nodes are also kept so that we can backtrack the path from the end.","position":{"start":{"line":1482,"column":1,"offset":53245},"end":{"line":1482,"column":122,"offset":53366}}}],"position":{"start":{"line":1482,"column":1,"offset":53245},"end":{"line":1482,"column":122,"offset":53366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {string[][]}\n */\nfunction findLadders(beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return [];\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    const result = [];\n    let isEndWordFound = false;\n    const levelWords = new Set();\n    const queue = [[beginWord, null], null];\n    while (queue.length > 1) {\n        const node = queue.shift();\n\n        if (node === null) {\n            if (isEndWordFound) {\n                break;\n            }\n            levelWords.forEach((word) => wordList.delete(word));\n            levelWords.clear();\n            queue.push(null);\n            continue;\n        }\n\n        const word = node[0];\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c < 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const w = head + ALPHABET[c] + tail;\n                    if (w === endWord) {\n                        const path = [endWord];\n                        for (let n = node; n !== null; n = n[1]) {\n                            path.unshift(n[0]);\n                        }\n                        result.push(path);\n                        isEndWordFound = true;\n                    }\n                    if (wordList.has(w)) {\n                        levelWords.add(w);\n                        queue.push([w, node]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n}\n"}],"position":{"start":{"line":1484,"column":1,"offset":53370},"end":{"line":1544,"column":4,"offset":55104}}}],"position":{"start":{"line":1484,"column":1,"offset":53370},"end":{"line":1544,"column":4,"offset":55104}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1546,"column":1,"offset":55108},"end":{"line":1546,"column":4,"offset":55111}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Breadth-first Search\": ","position":{"start":{"line":1548,"column":1,"offset":55115},"end":{"line":1550,"column":25,"offset":55176}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1550,"column":25,"offset":55176},"end":{"line":1550,"column":70,"offset":55221}}}],"position":{"start":{"line":1550,"column":25,"offset":55176},"end":{"line":1550,"column":70,"offset":55221}}},{"type":"text","value":"\nSimilar Questions:\n\"Word Ladder II\": ","position":{"start":{"line":1550,"column":70,"offset":55221},"end":{"line":1552,"column":19,"offset":55261}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder-ii"},"children":[{"type":"text","value":"https://leetcode.com/problems/word-ladder-ii","position":{"start":{"line":1552,"column":19,"offset":55261},"end":{"line":1552,"column":63,"offset":55305}}}],"position":{"start":{"line":1552,"column":19,"offset":55261},"end":{"line":1552,"column":63,"offset":55305}}},{"type":"text","value":"\n\"Minimum Genetic Mutation\": ","position":{"start":{"line":1552,"column":63,"offset":55305},"end":{"line":1553,"column":29,"offset":55335}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/minimum-genetic-mutation"},"children":[{"type":"text","value":"https://leetcode.com/problems/minimum-genetic-mutation","position":{"start":{"line":1553,"column":29,"offset":55335},"end":{"line":1553,"column":83,"offset":55389}}}],"position":{"start":{"line":1553,"column":29,"offset":55335},"end":{"line":1553,"column":83,"offset":55389}}}],"position":{"start":{"line":1548,"column":1,"offset":55115},"end":{"line":1553,"column":83,"offset":55389}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1555,"column":1,"offset":55393},"end":{"line":1555,"column":4,"offset":55396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#127-word-ladderhttpsleetcodecomproblemsword-ladderdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1557,"column":2,"offset":55401},"end":{"line":1557,"column":142,"offset":55541}}}],"position":{"start":{"line":1557,"column":1,"offset":55400},"end":{"line":1557,"column":207,"offset":55606}}}],"position":{"start":{"line":1557,"column":1,"offset":55400},"end":{"line":1557,"column":207,"offset":55606}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1559,"column":4,"offset":55613},"end":{"line":1559,"column":6,"offset":55615}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/word-ladder/description/"},"children":[{"type":"text","value":"127. Word Ladder","position":{"start":{"line":1559,"column":7,"offset":55616},"end":{"line":1559,"column":23,"offset":55632}}}],"position":{"start":{"line":1559,"column":6,"offset":55615},"end":{"line":1559,"column":80,"offset":55689}}}],"position":{"start":{"line":1559,"column":1,"offset":55610},"end":{"line":1559,"column":80,"offset":55689}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1561,"column":5,"offset":55697},"end":{"line":1561,"column":13,"offset":55705}}}],"position":{"start":{"line":1561,"column":1,"offset":55693},"end":{"line":1561,"column":13,"offset":55705}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given two words (","position":{"start":{"line":1563,"column":1,"offset":55709},"end":{"line":1563,"column":18,"offset":55726}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1563,"column":19,"offset":55727},"end":{"line":1563,"column":28,"offset":55736}}}],"position":{"start":{"line":1563,"column":18,"offset":55726},"end":{"line":1563,"column":29,"offset":55737}}},{"type":"text","value":" and ","position":{"start":{"line":1563,"column":29,"offset":55737},"end":{"line":1563,"column":34,"offset":55742}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1563,"column":35,"offset":55743},"end":{"line":1563,"column":42,"offset":55750}}}],"position":{"start":{"line":1563,"column":34,"offset":55742},"end":{"line":1563,"column":43,"offset":55751}}},{"type":"text","value":"), and a dictionary's word list, find the length of shortest transformation sequence from ","position":{"start":{"line":1563,"column":43,"offset":55751},"end":{"line":1563,"column":133,"offset":55841}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1563,"column":134,"offset":55842},"end":{"line":1563,"column":143,"offset":55851}}}],"position":{"start":{"line":1563,"column":133,"offset":55841},"end":{"line":1563,"column":144,"offset":55852}}},{"type":"text","value":" to ","position":{"start":{"line":1563,"column":144,"offset":55852},"end":{"line":1563,"column":148,"offset":55856}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1563,"column":149,"offset":55857},"end":{"line":1563,"column":156,"offset":55864}}}],"position":{"start":{"line":1563,"column":148,"offset":55856},"end":{"line":1563,"column":157,"offset":55865}}},{"type":"text","value":", such that:","position":{"start":{"line":1563,"column":157,"offset":55865},"end":{"line":1563,"column":169,"offset":55877}}}],"position":{"start":{"line":1563,"column":1,"offset":55709},"end":{"line":1563,"column":169,"offset":55877}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Only one letter can be changed at a time.","position":{"start":{"line":1565,"column":5,"offset":55885},"end":{"line":1565,"column":46,"offset":55926}}}],"position":{"start":{"line":1565,"column":1,"offset":55881},"end":{"line":1565,"column":46,"offset":55926}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each transformed word must exist in the word list. Note that ","position":{"start":{"line":1566,"column":5,"offset":55932},"end":{"line":1566,"column":66,"offset":55993}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1566,"column":67,"offset":55994},"end":{"line":1566,"column":76,"offset":56003}}}],"position":{"start":{"line":1566,"column":66,"offset":55993},"end":{"line":1566,"column":77,"offset":56004}}},{"type":"text","value":" is ","position":{"start":{"line":1566,"column":77,"offset":56004},"end":{"line":1566,"column":81,"offset":56008}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"not","position":{"start":{"line":1566,"column":82,"offset":56009},"end":{"line":1566,"column":85,"offset":56012}}}],"position":{"start":{"line":1566,"column":81,"offset":56008},"end":{"line":1566,"column":86,"offset":56013}}},{"type":"text","value":" a transformed word.","position":{"start":{"line":1566,"column":86,"offset":56013},"end":{"line":1566,"column":106,"offset":56033}}}],"position":{"start":{"line":1566,"column":1,"offset":55928},"end":{"line":1566,"column":106,"offset":56033}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1565,"column":1,"offset":55881},"end":{"line":1566,"column":106,"offset":56033}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1568,"column":3,"offset":56039},"end":{"line":1568,"column":8,"offset":56044}}}],"position":{"start":{"line":1568,"column":1,"offset":56037},"end":{"line":1568,"column":10,"offset":56046}}}],"position":{"start":{"line":1568,"column":1,"offset":56037},"end":{"line":1568,"column":10,"offset":56046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Return 0 if there is no such transformation sequence.","position":{"start":{"line":1570,"column":5,"offset":56054},"end":{"line":1570,"column":58,"offset":56107}}}],"position":{"start":{"line":1570,"column":1,"offset":56050},"end":{"line":1570,"column":58,"offset":56107}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words have the same length.","position":{"start":{"line":1571,"column":5,"offset":56113},"end":{"line":1571,"column":36,"offset":56144}}}],"position":{"start":{"line":1571,"column":1,"offset":56109},"end":{"line":1571,"column":36,"offset":56144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"All words contain only lowercase alphabetic characters.","position":{"start":{"line":1572,"column":5,"offset":56150},"end":{"line":1572,"column":60,"offset":56205}}}],"position":{"start":{"line":1572,"column":1,"offset":56146},"end":{"line":1572,"column":60,"offset":56205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume no duplicates in the word list.","position":{"start":{"line":1573,"column":5,"offset":56211},"end":{"line":1573,"column":51,"offset":56257}}}],"position":{"start":{"line":1573,"column":1,"offset":56207},"end":{"line":1573,"column":51,"offset":56257}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You may assume ","position":{"start":{"line":1574,"column":5,"offset":56263},"end":{"line":1574,"column":20,"offset":56278}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"beginWord","position":{"start":{"line":1574,"column":21,"offset":56279},"end":{"line":1574,"column":30,"offset":56288}}}],"position":{"start":{"line":1574,"column":20,"offset":56278},"end":{"line":1574,"column":31,"offset":56289}}},{"type":"text","value":" and ","position":{"start":{"line":1574,"column":31,"offset":56289},"end":{"line":1574,"column":36,"offset":56294}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"endWord","position":{"start":{"line":1574,"column":37,"offset":56295},"end":{"line":1574,"column":44,"offset":56302}}}],"position":{"start":{"line":1574,"column":36,"offset":56294},"end":{"line":1574,"column":45,"offset":56303}}},{"type":"text","value":" are non-empty and are not the same.","position":{"start":{"line":1574,"column":45,"offset":56303},"end":{"line":1574,"column":81,"offset":56339}}}],"position":{"start":{"line":1574,"column":1,"offset":56259},"end":{"line":1574,"column":81,"offset":56339}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1570,"column":1,"offset":56050},"end":{"line":1574,"column":81,"offset":56339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":1576,"column":3,"offset":56345},"end":{"line":1576,"column":13,"offset":56355}}}],"position":{"start":{"line":1576,"column":1,"offset":56343},"end":{"line":1576,"column":15,"offset":56357}}}],"position":{"start":{"line":1576,"column":1,"offset":56343},"end":{"line":1576,"column":15,"offset":56357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\",\nendWord = \"cog\",\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\",\nreturn its length 5.\n"}],"position":{"start":{"line":1578,"column":1,"offset":56361},"end":{"line":1589,"column":4,"offset":56595}}}],"position":{"start":{"line":1578,"column":1,"offset":56361},"end":{"line":1589,"column":4,"offset":56595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1591,"column":3,"offset":56601},"end":{"line":1591,"column":13,"offset":56611}}}],"position":{"start":{"line":1591,"column":1,"offset":56599},"end":{"line":1591,"column":15,"offset":56613}}}],"position":{"start":{"line":1591,"column":1,"offset":56599},"end":{"line":1591,"column":15,"offset":56613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input:\nbeginWord = \"hit\"\nendWord = \"cog\"\nwordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n\nOutput: 0\n\nExplanation: The endWord \"cog\" is not in wordList, therefore no possible transformation.\n"}],"position":{"start":{"line":1593,"column":1,"offset":56617},"end":{"line":1603,"column":4,"offset":56820}}}],"position":{"start":{"line":1593,"column":1,"offset":56617},"end":{"line":1603,"column":4,"offset":56820}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1605,"column":5,"offset":56828},"end":{"line":1605,"column":14,"offset":56837}}}],"position":{"start":{"line":1605,"column":1,"offset":56824},"end":{"line":1605,"column":14,"offset":56837}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Think of it as building a tree, with ","position":{"start":{"line":1607,"column":1,"offset":56841},"end":{"line":1607,"column":38,"offset":56878}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"begineWord"}],"position":{"start":{"line":1607,"column":38,"offset":56878},"end":{"line":1607,"column":50,"offset":56890}}},{"type":"text","value":" as root and ","position":{"start":{"line":1607,"column":50,"offset":56890},"end":{"line":1607,"column":63,"offset":56903}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"endWord"}],"position":{"start":{"line":1607,"column":63,"offset":56903},"end":{"line":1607,"column":72,"offset":56912}}},{"type":"text","value":" as leaves.","position":{"start":{"line":1607,"column":72,"offset":56912},"end":{"line":1607,"column":83,"offset":56923}}}],"position":{"start":{"line":1607,"column":1,"offset":56841},"end":{"line":1607,"column":83,"offset":56923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The best way control the depth (length of the shortest transformations) while building the tree is level-order traversal (BFS).","position":{"start":{"line":1609,"column":1,"offset":56927},"end":{"line":1609,"column":128,"offset":57054}}}],"position":{"start":{"line":1609,"column":1,"offset":56927},"end":{"line":1609,"column":128,"offset":57054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We do not actually build the tree because it is expensive (astronomical if the list is huge). In fact, we only need one shortest path. So just like Dijkstra's algorithm, we say that the first time (level ","position":{"start":{"line":1611,"column":1,"offset":57058},"end":{"line":1611,"column":205,"offset":57262}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"i"}],"position":{"start":{"line":1611,"column":205,"offset":57262},"end":{"line":1611,"column":208,"offset":57265}}},{"type":"text","value":") we encounter a word that turns out to be in a shortest path, then level ","position":{"start":{"line":1611,"column":208,"offset":57265},"end":{"line":1611,"column":282,"offset":57339}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"i"}],"position":{"start":{"line":1611,"column":282,"offset":57339},"end":{"line":1611,"column":285,"offset":57342}}},{"type":"text","value":" is the lowest level this word could ever get. We can safely remove it from the ","position":{"start":{"line":1611,"column":285,"offset":57342},"end":{"line":1611,"column":365,"offset":57422}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1611,"column":365,"offset":57422},"end":{"line":1611,"column":375,"offset":57432}}},{"type":"text","value":".","position":{"start":{"line":1611,"column":375,"offset":57432},"end":{"line":1611,"column":376,"offset":57433}}}],"position":{"start":{"line":1611,"column":1,"offset":57058},"end":{"line":1611,"column":376,"offset":57433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To find all the next words, instead of filtering the ","position":{"start":{"line":1613,"column":1,"offset":57437},"end":{"line":1613,"column":54,"offset":57490}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1613,"column":54,"offset":57490},"end":{"line":1613,"column":64,"offset":57500}}},{"type":"text","value":", enumerate all 25 possible words and check if in ","position":{"start":{"line":1613,"column":64,"offset":57500},"end":{"line":1613,"column":114,"offset":57550}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wordList"}],"position":{"start":{"line":1613,"column":114,"offset":57550},"end":{"line":1613,"column":124,"offset":57560}}},{"type":"text","value":".","position":{"start":{"line":1613,"column":124,"offset":57560},"end":{"line":1613,"column":125,"offset":57561}}}],"position":{"start":{"line":1613,"column":1,"offset":57437},"end":{"line":1613,"column":125,"offset":57561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {string} beginWord\n * @param {string} endWord\n * @param {string[]} wordList\n * @return {number}\n */\nlet ladderLength = function (beginWord, endWord, wordList) {\n    wordList = new Set(wordList);\n    if (!wordList.has(endWord)) {\n        return 0;\n    }\n\n    const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n\n    let level = 1;\n    const queue = [beginWord, null];\n    while (queue.length > 1) {\n        const word = queue.shift();\n\n        if (word === null) {\n            level++;\n            queue.push(null);\n            continue;\n        }\n\n        for (let i = word.length - 1; i >= 0; i--) {\n            const head = word.slice(0, i);\n            const tail = word.slice(i + 1);\n\n            for (let c = 0; c < 26; c++) {\n                if (ALPHABET[c] !== word[i]) {\n                    const word = head + ALPHABET[c] + tail;\n                    if (word === endWord) {\n                        return level + 1;\n                    }\n                    if (wordList.delete(word)) {\n                        queue.push(word);\n                    }\n                }\n            }\n        }\n    }\n\n    return 0;\n};\n"}],"position":{"start":{"line":1615,"column":1,"offset":57565},"end":{"line":1661,"column":4,"offset":58755}}}],"position":{"start":{"line":1615,"column":1,"offset":57565},"end":{"line":1661,"column":4,"offset":58755}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1663,"column":1,"offset":58759},"end":{"line":1663,"column":4,"offset":58762}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Hard\nRelated Topics:\n\"Array\": ","position":{"start":{"line":1665,"column":1,"offset":58766},"end":{"line":1667,"column":10,"offset":58810}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/array"},"children":[{"type":"text","value":"https://leetcode.com/tag/array","position":{"start":{"line":1667,"column":10,"offset":58810},"end":{"line":1667,"column":40,"offset":58840}}}],"position":{"start":{"line":1667,"column":10,"offset":58810},"end":{"line":1667,"column":40,"offset":58840}}},{"type":"text","value":"\n\"Union Find\": ","position":{"start":{"line":1667,"column":40,"offset":58840},"end":{"line":1668,"column":15,"offset":58856}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/union-find"},"children":[{"type":"text","value":"https://leetcode.com/tag/union-find","position":{"start":{"line":1668,"column":15,"offset":58856},"end":{"line":1668,"column":50,"offset":58891}}}],"position":{"start":{"line":1668,"column":15,"offset":58856},"end":{"line":1668,"column":50,"offset":58891}}},{"type":"text","value":"\nSimilar Questions:\n\"Binary Tree Longest Consecutive Sequence\": ","position":{"start":{"line":1668,"column":50,"offset":58891},"end":{"line":1670,"column":45,"offset":58957}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-longest-consecutive-sequence","position":{"start":{"line":1670,"column":45,"offset":58957},"end":{"line":1670,"column":115,"offset":59027}}}],"position":{"start":{"line":1670,"column":45,"offset":58957},"end":{"line":1670,"column":115,"offset":59027}}}],"position":{"start":{"line":1665,"column":1,"offset":58766},"end":{"line":1670,"column":115,"offset":59027}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1672,"column":1,"offset":59031},"end":{"line":1672,"column":4,"offset":59034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#128-longest-consecutive-sequencehttpsleetcodecomproblemslongest-consecutive-sequencedescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1674,"column":2,"offset":59039},"end":{"line":1674,"column":142,"offset":59179}}}],"position":{"start":{"line":1674,"column":1,"offset":59038},"end":{"line":1674,"column":241,"offset":59278}}}],"position":{"start":{"line":1674,"column":1,"offset":59038},"end":{"line":1674,"column":241,"offset":59278}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1676,"column":4,"offset":59285},"end":{"line":1676,"column":6,"offset":59287}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/longest-consecutive-sequence/description/"},"children":[{"type":"text","value":"128. Longest Consecutive Sequence","position":{"start":{"line":1676,"column":7,"offset":59288},"end":{"line":1676,"column":40,"offset":59321}}}],"position":{"start":{"line":1676,"column":6,"offset":59287},"end":{"line":1676,"column":114,"offset":59395}}}],"position":{"start":{"line":1676,"column":1,"offset":59282},"end":{"line":1676,"column":114,"offset":59395}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1678,"column":5,"offset":59403},"end":{"line":1678,"column":13,"offset":59411}}}],"position":{"start":{"line":1678,"column":1,"offset":59399},"end":{"line":1678,"column":13,"offset":59411}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an unsorted array of integers, find the length of the longest consecutive elements sequence.","position":{"start":{"line":1680,"column":1,"offset":59415},"end":{"line":1680,"column":99,"offset":59513}}}],"position":{"start":{"line":1680,"column":1,"offset":59415},"end":{"line":1680,"column":99,"offset":59513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Your algorithm should run in O(","position":{"start":{"line":1682,"column":1,"offset":59517},"end":{"line":1682,"column":32,"offset":59548}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"n","position":{"start":{"line":1682,"column":33,"offset":59549},"end":{"line":1682,"column":34,"offset":59550}}}],"position":{"start":{"line":1682,"column":32,"offset":59548},"end":{"line":1682,"column":35,"offset":59551}}},{"type":"text","value":") complexity.","position":{"start":{"line":1682,"column":35,"offset":59551},"end":{"line":1682,"column":48,"offset":59564}}}],"position":{"start":{"line":1682,"column":1,"offset":59517},"end":{"line":1682,"column":48,"offset":59564}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1684,"column":3,"offset":59570},"end":{"line":1684,"column":11,"offset":59578}}}],"position":{"start":{"line":1684,"column":1,"offset":59568},"end":{"line":1684,"column":13,"offset":59580}}}],"position":{"start":{"line":1684,"column":1,"offset":59568},"end":{"line":1684,"column":13,"offset":59580}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n"}],"position":{"start":{"line":1686,"column":1,"offset":59584},"end":{"line":1691,"column":4,"offset":59736}}}],"position":{"start":{"line":1686,"column":1,"offset":59584},"end":{"line":1691,"column":4,"offset":59736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1693,"column":5,"offset":59744},"end":{"line":1693,"column":14,"offset":59753}}}],"position":{"start":{"line":1693,"column":1,"offset":59740},"end":{"line":1693,"column":14,"offset":59753}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Build a Set from the list. Pick a number, find all it's adjacent numbers that are also in the Set. Count them and remove them all from the Set. Repeat until the Set is empty. Time complexity O(n + n) = O(n).","position":{"start":{"line":1695,"column":1,"offset":59757},"end":{"line":1695,"column":208,"offset":59964}}}],"position":{"start":{"line":1695,"column":1,"offset":59757},"end":{"line":1695,"column":208,"offset":59964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} nums\n * @return {number}\n */\nlet longestConsecutive = function (nums) {\n    const numSet = new Set(nums);\n    let maxCount = 0;\n    while (numSet.size > 0) {\n        const num = numSet.values().next().value;\n        numSet.delete(num);\n        let count = 1;\n        for (let n = num + 1; numSet.delete(n); n++) {\n            count++;\n        }\n        for (let n = num - 1; numSet.delete(n); n--) {\n            count++;\n        }\n        if (count > maxCount) {\n            maxCount = count;\n        }\n    }\n    return maxCount;\n};\n"}],"position":{"start":{"line":1697,"column":1,"offset":59968},"end":{"line":1721,"column":4,"offset":60559}}}],"position":{"start":{"line":1697,"column":1,"offset":59968},"end":{"line":1721,"column":4,"offset":60559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1723,"column":1,"offset":60563},"end":{"line":1723,"column":4,"offset":60566}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Tree\": ","position":{"start":{"line":1725,"column":1,"offset":60570},"end":{"line":1727,"column":9,"offset":60615}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/tree"},"children":[{"type":"text","value":"https://leetcode.com/tag/tree","position":{"start":{"line":1727,"column":9,"offset":60615},"end":{"line":1727,"column":38,"offset":60644}}}],"position":{"start":{"line":1727,"column":9,"offset":60615},"end":{"line":1727,"column":38,"offset":60644}}},{"type":"text","value":"\n\"Depth-first Search\": ","position":{"start":{"line":1727,"column":38,"offset":60644},"end":{"line":1728,"column":23,"offset":60668}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1728,"column":23,"offset":60668},"end":{"line":1728,"column":66,"offset":60711}}}],"position":{"start":{"line":1728,"column":23,"offset":60668},"end":{"line":1728,"column":66,"offset":60711}}},{"type":"text","value":"\nSimilar Questions:\n\"Path Sum\": ","position":{"start":{"line":1728,"column":66,"offset":60711},"end":{"line":1730,"column":13,"offset":60745}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/path-sum","position":{"start":{"line":1730,"column":13,"offset":60745},"end":{"line":1730,"column":51,"offset":60783}}}],"position":{"start":{"line":1730,"column":13,"offset":60745},"end":{"line":1730,"column":51,"offset":60783}}},{"type":"text","value":"\n\"Binary Tree Maximum Path Sum\": ","position":{"start":{"line":1730,"column":51,"offset":60783},"end":{"line":1731,"column":33,"offset":60817}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/binary-tree-maximum-path-sum"},"children":[{"type":"text","value":"https://leetcode.com/problems/binary-tree-maximum-path-sum","position":{"start":{"line":1731,"column":33,"offset":60817},"end":{"line":1731,"column":91,"offset":60875}}}],"position":{"start":{"line":1731,"column":33,"offset":60817},"end":{"line":1731,"column":91,"offset":60875}}}],"position":{"start":{"line":1725,"column":1,"offset":60570},"end":{"line":1731,"column":91,"offset":60875}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1733,"column":1,"offset":60879},"end":{"line":1733,"column":4,"offset":60882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#129-sum-root-to-leaf-numbershttpsleetcodecomproblemssum-root-to-leaf-numbersdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1735,"column":2,"offset":60887},"end":{"line":1735,"column":142,"offset":61027}}}],"position":{"start":{"line":1735,"column":1,"offset":60886},"end":{"line":1735,"column":233,"offset":61118}}}],"position":{"start":{"line":1735,"column":1,"offset":60886},"end":{"line":1735,"column":233,"offset":61118}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1737,"column":4,"offset":61125},"end":{"line":1737,"column":6,"offset":61127}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/sum-root-to-leaf-numbers/description/"},"children":[{"type":"text","value":"129. Sum Root to Leaf Numbers","position":{"start":{"line":1737,"column":7,"offset":61128},"end":{"line":1737,"column":36,"offset":61157}}}],"position":{"start":{"line":1737,"column":6,"offset":61127},"end":{"line":1737,"column":106,"offset":61227}}}],"position":{"start":{"line":1737,"column":1,"offset":61122},"end":{"line":1737,"column":106,"offset":61227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1739,"column":5,"offset":61235},"end":{"line":1739,"column":13,"offset":61243}}}],"position":{"start":{"line":1739,"column":1,"offset":61231},"end":{"line":1739,"column":13,"offset":61243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree containing digits from ","position":{"start":{"line":1741,"column":1,"offset":61247},"end":{"line":1741,"column":44,"offset":61290}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0-9"}],"position":{"start":{"line":1741,"column":44,"offset":61290},"end":{"line":1741,"column":49,"offset":61295}}},{"type":"text","value":" only, each root-to-leaf path could represent a number.","position":{"start":{"line":1741,"column":49,"offset":61295},"end":{"line":1741,"column":104,"offset":61350}}}],"position":{"start":{"line":1741,"column":1,"offset":61247},"end":{"line":1741,"column":104,"offset":61350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An example is the root-to-leaf path ","position":{"start":{"line":1743,"column":1,"offset":61354},"end":{"line":1743,"column":37,"offset":61390}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1->2->3"}],"position":{"start":{"line":1743,"column":37,"offset":61390},"end":{"line":1743,"column":46,"offset":61399}}},{"type":"text","value":" which represents the number ","position":{"start":{"line":1743,"column":46,"offset":61399},"end":{"line":1743,"column":75,"offset":61428}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"123"}],"position":{"start":{"line":1743,"column":75,"offset":61428},"end":{"line":1743,"column":80,"offset":61433}}},{"type":"text","value":".","position":{"start":{"line":1743,"column":80,"offset":61433},"end":{"line":1743,"column":81,"offset":61434}}}],"position":{"start":{"line":1743,"column":1,"offset":61354},"end":{"line":1743,"column":81,"offset":61434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Find the total sum of all root-to-leaf numbers.","position":{"start":{"line":1745,"column":1,"offset":61438},"end":{"line":1745,"column":48,"offset":61485}}}],"position":{"start":{"line":1745,"column":1,"offset":61438},"end":{"line":1745,"column":48,"offset":61485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":1747,"column":3,"offset":61491},"end":{"line":1747,"column":8,"offset":61496}}}],"position":{"start":{"line":1747,"column":1,"offset":61489},"end":{"line":1747,"column":10,"offset":61498}}},{"type":"text","value":" A leaf is a node with no children.","position":{"start":{"line":1747,"column":10,"offset":61498},"end":{"line":1747,"column":45,"offset":61533}}}],"position":{"start":{"line":1747,"column":1,"offset":61489},"end":{"line":1747,"column":45,"offset":61533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1749,"column":3,"offset":61539},"end":{"line":1749,"column":11,"offset":61547}}}],"position":{"start":{"line":1749,"column":1,"offset":61537},"end":{"line":1749,"column":13,"offset":61549}}}],"position":{"start":{"line":1749,"column":1,"offset":61537},"end":{"line":1749,"column":13,"offset":61549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n"}],"position":{"start":{"line":1751,"column":1,"offset":61553},"end":{"line":1759,"column":35,"offset":61793}}}],"position":{"start":{"line":1751,"column":1,"offset":61553},"end":{"line":1759,"column":35,"offset":61793}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":1761,"column":3,"offset":61799},"end":{"line":1761,"column":13,"offset":61809}}}],"position":{"start":{"line":1761,"column":1,"offset":61797},"end":{"line":1761,"column":15,"offset":61811}}}],"position":{"start":{"line":1761,"column":1,"offset":61797},"end":{"line":1761,"column":15,"offset":61811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n"}],"position":{"start":{"line":1763,"column":1,"offset":61815},"end":{"line":1774,"column":44,"offset":62157}}}],"position":{"start":{"line":1763,"column":1,"offset":61815},"end":{"line":1774,"column":44,"offset":62157}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1776,"column":5,"offset":62165},"end":{"line":1776,"column":14,"offset":62174}}}],"position":{"start":{"line":1776,"column":1,"offset":62161},"end":{"line":1776,"column":14,"offset":62174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To write a clean solution for this promblem, use ","position":{"start":{"line":1778,"column":1,"offset":62178},"end":{"line":1778,"column":50,"offset":62227}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1778,"column":50,"offset":62227},"end":{"line":1778,"column":53,"offset":62230}}},{"type":"text","value":" as indicator of leaf node. If all the children get ","position":{"start":{"line":1778,"column":53,"offset":62230},"end":{"line":1778,"column":105,"offset":62282}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1778,"column":105,"offset":62282},"end":{"line":1778,"column":108,"offset":62285}}},{"type":"text","value":", it is a leaf node, return the sum of current level.","position":{"start":{"line":1778,"column":108,"offset":62285},"end":{"line":1778,"column":161,"offset":62338}}}],"position":{"start":{"line":1778,"column":1,"offset":62178},"end":{"line":1778,"column":161,"offset":62338}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {number}\n */\nlet sumNumbers = function (root, sum = 0) {\n    if (!root) {\n        return 0;\n    }\n    sum = sum * 10 + root.val;\n    return sumNumbers(root.left, sum) + sumNumbers(root.right, sum) || sum;\n};\n"}],"position":{"start":{"line":1780,"column":1,"offset":62342},"end":{"line":1799,"column":4,"offset":62759}}}],"position":{"start":{"line":1780,"column":1,"offset":62342},"end":{"line":1799,"column":4,"offset":62759}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1801,"column":1,"offset":62763},"end":{"line":1801,"column":4,"offset":62766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": ","position":{"start":{"line":1803,"column":1,"offset":62770},"end":{"line":1805,"column":23,"offset":62829}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1805,"column":23,"offset":62829},"end":{"line":1805,"column":66,"offset":62872}}}],"position":{"start":{"line":1805,"column":23,"offset":62829},"end":{"line":1805,"column":66,"offset":62872}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1805,"column":66,"offset":62872},"end":{"line":1806,"column":25,"offset":62898}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1806,"column":25,"offset":62898},"end":{"line":1806,"column":70,"offset":62943}}}],"position":{"start":{"line":1806,"column":25,"offset":62898},"end":{"line":1806,"column":70,"offset":62943}}},{"type":"text","value":"\n\"Union Find\": ","position":{"start":{"line":1806,"column":70,"offset":62943},"end":{"line":1807,"column":15,"offset":62959}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/union-find"},"children":[{"type":"text","value":"https://leetcode.com/tag/union-find","position":{"start":{"line":1807,"column":15,"offset":62959},"end":{"line":1807,"column":50,"offset":62994}}}],"position":{"start":{"line":1807,"column":15,"offset":62959},"end":{"line":1807,"column":50,"offset":62994}}},{"type":"text","value":"\nSimilar Questions:\n\"Number of Islands\": ","position":{"start":{"line":1807,"column":50,"offset":62994},"end":{"line":1809,"column":22,"offset":63037}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/number-of-islands"},"children":[{"type":"text","value":"https://leetcode.com/problems/number-of-islands","position":{"start":{"line":1809,"column":22,"offset":63037},"end":{"line":1809,"column":69,"offset":63084}}}],"position":{"start":{"line":1809,"column":22,"offset":63037},"end":{"line":1809,"column":69,"offset":63084}}},{"type":"text","value":"\n\"Walls and Gates\": ","position":{"start":{"line":1809,"column":69,"offset":63084},"end":{"line":1810,"column":20,"offset":63105}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/walls-and-gates"},"children":[{"type":"text","value":"https://leetcode.com/problems/walls-and-gates","position":{"start":{"line":1810,"column":20,"offset":63105},"end":{"line":1810,"column":65,"offset":63150}}}],"position":{"start":{"line":1810,"column":20,"offset":63105},"end":{"line":1810,"column":65,"offset":63150}}}],"position":{"start":{"line":1803,"column":1,"offset":62770},"end":{"line":1810,"column":65,"offset":63150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1812,"column":1,"offset":63154},"end":{"line":1812,"column":4,"offset":63157}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#130-surrounded-regionshttpsleetcodecomproblemssurrounded-regionsdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1814,"column":2,"offset":63162},"end":{"line":1814,"column":142,"offset":63302}}}],"position":{"start":{"line":1814,"column":1,"offset":63161},"end":{"line":1814,"column":221,"offset":63381}}}],"position":{"start":{"line":1814,"column":1,"offset":63161},"end":{"line":1814,"column":221,"offset":63381}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1816,"column":4,"offset":63388},"end":{"line":1816,"column":6,"offset":63390}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/surrounded-regions/description/"},"children":[{"type":"text","value":"130. Surrounded Regions","position":{"start":{"line":1816,"column":7,"offset":63391},"end":{"line":1816,"column":30,"offset":63414}}}],"position":{"start":{"line":1816,"column":6,"offset":63390},"end":{"line":1816,"column":94,"offset":63478}}}],"position":{"start":{"line":1816,"column":1,"offset":63385},"end":{"line":1816,"column":94,"offset":63478}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1818,"column":5,"offset":63486},"end":{"line":1818,"column":13,"offset":63494}}}],"position":{"start":{"line":1818,"column":1,"offset":63482},"end":{"line":1818,"column":13,"offset":63494}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a 2D board containing ","position":{"start":{"line":1820,"column":1,"offset":63498},"end":{"line":1820,"column":29,"offset":63526}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1820,"column":29,"offset":63526},"end":{"line":1820,"column":34,"offset":63531}}},{"type":"text","value":" and ","position":{"start":{"line":1820,"column":34,"offset":63531},"end":{"line":1820,"column":39,"offset":63536}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1820,"column":39,"offset":63536},"end":{"line":1820,"column":44,"offset":63541}}},{"type":"text","value":" (","position":{"start":{"line":1820,"column":44,"offset":63541},"end":{"line":1820,"column":46,"offset":63543}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"the letter O","position":{"start":{"line":1820,"column":48,"offset":63545},"end":{"line":1820,"column":60,"offset":63557}}}],"position":{"start":{"line":1820,"column":46,"offset":63543},"end":{"line":1820,"column":62,"offset":63559}}},{"type":"text","value":"), capture all regions surrounded by ","position":{"start":{"line":1820,"column":62,"offset":63559},"end":{"line":1820,"column":99,"offset":63596}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1820,"column":99,"offset":63596},"end":{"line":1820,"column":104,"offset":63601}}},{"type":"text","value":".","position":{"start":{"line":1820,"column":104,"offset":63601},"end":{"line":1820,"column":105,"offset":63602}}}],"position":{"start":{"line":1820,"column":1,"offset":63498},"end":{"line":1820,"column":105,"offset":63602}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A region is captured by flipping all ","position":{"start":{"line":1822,"column":1,"offset":63606},"end":{"line":1822,"column":38,"offset":63643}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1822,"column":38,"offset":63643},"end":{"line":1822,"column":43,"offset":63648}}},{"type":"text","value":"s into ","position":{"start":{"line":1822,"column":43,"offset":63648},"end":{"line":1822,"column":50,"offset":63655}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1822,"column":50,"offset":63655},"end":{"line":1822,"column":55,"offset":63660}}},{"type":"text","value":"s in that surrounded region.","position":{"start":{"line":1822,"column":55,"offset":63660},"end":{"line":1822,"column":83,"offset":63688}}}],"position":{"start":{"line":1822,"column":1,"offset":63606},"end":{"line":1822,"column":83,"offset":63688}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":1824,"column":3,"offset":63694},"end":{"line":1824,"column":11,"offset":63702}}}],"position":{"start":{"line":1824,"column":1,"offset":63692},"end":{"line":1824,"column":13,"offset":63704}}}],"position":{"start":{"line":1824,"column":1,"offset":63692},"end":{"line":1824,"column":13,"offset":63704}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X X X X\nX O O X\nX X O X\nX O X X\n"}],"position":{"start":{"line":1826,"column":1,"offset":63708},"end":{"line":1832,"column":4,"offset":63754}}}],"position":{"start":{"line":1826,"column":1,"offset":63708},"end":{"line":1832,"column":4,"offset":63754}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After running your function, the board should be:","position":{"start":{"line":1834,"column":1,"offset":63758},"end":{"line":1834,"column":50,"offset":63807}}}],"position":{"start":{"line":1834,"column":1,"offset":63758},"end":{"line":1834,"column":50,"offset":63807}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X X X X\nX X X X\nX X X X\nX O X X\n"}],"position":{"start":{"line":1836,"column":1,"offset":63811},"end":{"line":1842,"column":4,"offset":63857}}}],"position":{"start":{"line":1836,"column":1,"offset":63811},"end":{"line":1842,"column":4,"offset":63857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":1844,"column":3,"offset":63863},"end":{"line":1844,"column":15,"offset":63875}}}],"position":{"start":{"line":1844,"column":1,"offset":63861},"end":{"line":1844,"column":17,"offset":63877}}}],"position":{"start":{"line":1844,"column":1,"offset":63861},"end":{"line":1844,"column":17,"offset":63877}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Surrounded regions shouldn't be on the border, which means that any ","position":{"start":{"line":1846,"column":1,"offset":63881},"end":{"line":1846,"column":69,"offset":63949}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1846,"column":69,"offset":63949},"end":{"line":1846,"column":74,"offset":63954}}},{"type":"text","value":" on the border of the board are not flipped to ","position":{"start":{"line":1846,"column":74,"offset":63954},"end":{"line":1846,"column":121,"offset":64001}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1846,"column":121,"offset":64001},"end":{"line":1846,"column":126,"offset":64006}}},{"type":"text","value":". Any ","position":{"start":{"line":1846,"column":126,"offset":64006},"end":{"line":1846,"column":132,"offset":64012}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1846,"column":132,"offset":64012},"end":{"line":1846,"column":137,"offset":64017}}},{"type":"text","value":" that is not on the border and it is not connected to an ","position":{"start":{"line":1846,"column":137,"offset":64017},"end":{"line":1846,"column":194,"offset":64074}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'O'"}],"position":{"start":{"line":1846,"column":194,"offset":64074},"end":{"line":1846,"column":199,"offset":64079}}},{"type":"text","value":" on the border will be flipped to ","position":{"start":{"line":1846,"column":199,"offset":64079},"end":{"line":1846,"column":233,"offset":64113}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"'X'"}],"position":{"start":{"line":1846,"column":233,"offset":64113},"end":{"line":1846,"column":238,"offset":64118}}},{"type":"text","value":". Two cells are connected if they are adjacent cells connected horizontally or vertically.","position":{"start":{"line":1846,"column":238,"offset":64118},"end":{"line":1846,"column":328,"offset":64208}}}],"position":{"start":{"line":1846,"column":1,"offset":63881},"end":{"line":1846,"column":328,"offset":64208}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1848,"column":5,"offset":64216},"end":{"line":1848,"column":14,"offset":64225}}}],"position":{"start":{"line":1848,"column":1,"offset":64212},"end":{"line":1848,"column":14,"offset":64225}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Find all the ","position":{"start":{"line":1850,"column":1,"offset":64229},"end":{"line":1850,"column":14,"offset":64242}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":14,"offset":64242},"end":{"line":1850,"column":17,"offset":64245}}},{"type":"text","value":"s that are connected to the ","position":{"start":{"line":1850,"column":17,"offset":64245},"end":{"line":1850,"column":45,"offset":64273}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":45,"offset":64273},"end":{"line":1850,"column":48,"offset":64276}}},{"type":"text","value":"s on the border, change them to ","position":{"start":{"line":1850,"column":48,"offset":64276},"end":{"line":1850,"column":80,"offset":64308}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1850,"column":80,"offset":64308},"end":{"line":1850,"column":83,"offset":64311}}},{"type":"text","value":". Then scan the board, change ","position":{"start":{"line":1850,"column":83,"offset":64311},"end":{"line":1850,"column":113,"offset":64341}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":113,"offset":64341},"end":{"line":1850,"column":116,"offset":64344}}},{"type":"text","value":" to ","position":{"start":{"line":1850,"column":116,"offset":64344},"end":{"line":1850,"column":120,"offset":64348}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"X"}],"position":{"start":{"line":1850,"column":120,"offset":64348},"end":{"line":1850,"column":123,"offset":64351}}},{"type":"text","value":" and ","position":{"start":{"line":1850,"column":123,"offset":64351},"end":{"line":1850,"column":128,"offset":64356}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1850,"column":128,"offset":64356},"end":{"line":1850,"column":131,"offset":64359}}},{"type":"text","value":" back to ","position":{"start":{"line":1850,"column":131,"offset":64359},"end":{"line":1850,"column":140,"offset":64368}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1850,"column":140,"offset":64368},"end":{"line":1850,"column":143,"offset":64371}}},{"type":"text","value":".","position":{"start":{"line":1850,"column":143,"offset":64371},"end":{"line":1850,"column":144,"offset":64372}}}],"position":{"start":{"line":1850,"column":1,"offset":64229},"end":{"line":1850,"column":144,"offset":64372}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The process of finding the connected ","position":{"start":{"line":1852,"column":1,"offset":64376},"end":{"line":1852,"column":38,"offset":64413}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1852,"column":38,"offset":64413},"end":{"line":1852,"column":41,"offset":64416}}},{"type":"text","value":"s is just like tree traversal. ","position":{"start":{"line":1852,"column":41,"offset":64416},"end":{"line":1852,"column":72,"offset":64447}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O"}],"position":{"start":{"line":1852,"column":72,"offset":64447},"end":{"line":1852,"column":75,"offset":64450}}},{"type":"text","value":"s on the border are the same level. Their children are the second level. And so on.","position":{"start":{"line":1852,"column":75,"offset":64450},"end":{"line":1852,"column":158,"offset":64533}}}],"position":{"start":{"line":1852,"column":1,"offset":64376},"end":{"line":1852,"column":158,"offset":64533}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"So both BFS and DFS are good. I prefer BFS when pruning is not needed in favor of its readability.","position":{"start":{"line":1854,"column":1,"offset":64537},"end":{"line":1854,"column":99,"offset":64635}}}],"position":{"start":{"line":1854,"column":1,"offset":64537},"end":{"line":1854,"column":99,"offset":64635}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {character[][]} board\n * @return {void} Do not return anything, modify board in-place instead.\n */\nlet solve = function (board) {\n    const height = board.length;\n    if (height <= 1) {\n        return;\n    }\n    const width = board[0].length;\n    if (width <= 1) {\n        return;\n    }\n\n    const rowend = height - 1;\n    const colend = width - 1;\n\n    const queue = [];\n\n    for (let row = 0; row < height; row++) {\n        if (board[row][0] === 'O') {\n            board[row][0] = '#';\n            queue.push(row, 0);\n        }\n        if (board[row][colend] === 'O') {\n            board[row][colend] = '#';\n            queue.push(row, colend);\n        }\n    }\n\n    for (let col = 0; col < width; col++) {\n        if (board[0][col] === 'O') {\n            board[0][col] = '#';\n            queue.push(0, col);\n        }\n        if (board[rowend][col] === 'O') {\n            board[rowend][col] = '#';\n            queue.push(rowend, col);\n        }\n    }\n\n    while (queue.length > 0) {\n        const row = queue.shift();\n        const col = queue.shift();\n        if (row < rowend && board[row + 1][col] === 'O') {\n            board[row + 1][col] = '#';\n            queue.push(row + 1, col);\n        }\n        if (row > 0 && board[row - 1][col] === 'O') {\n            board[row - 1][col] = '#';\n            queue.push(row - 1, col);\n        }\n        if (board[row][col + 1] === 'O') {\n            board[row][col + 1] = '#';\n            queue.push(row, col + 1);\n        }\n        if (board[row][col - 1] === 'O') {\n            board[row][col - 1] = '#';\n            queue.push(row, col - 1);\n        }\n    }\n\n    for (let row = 0; row < height; row++) {\n        for (let col = 0; col < width; col++) {\n            if (board[row][col] === '#') {\n                board[row][col] = 'O';\n            } else if (board[row][col] === 'O') {\n                board[row][col] = 'X';\n            }\n        }\n    }\n};\n"}],"position":{"start":{"line":1856,"column":1,"offset":64639},"end":{"line":1929,"column":4,"offset":66641}}}],"position":{"start":{"line":1856,"column":1,"offset":64639},"end":{"line":1929,"column":4,"offset":66641}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1931,"column":1,"offset":66645},"end":{"line":1931,"column":4,"offset":66648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Difficulty: Medium\nRelated Topics:\n\"Depth-first Search\": ","position":{"start":{"line":1933,"column":1,"offset":66652},"end":{"line":1935,"column":23,"offset":66711}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/depth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/depth-first-search","position":{"start":{"line":1935,"column":23,"offset":66711},"end":{"line":1935,"column":66,"offset":66754}}}],"position":{"start":{"line":1935,"column":23,"offset":66711},"end":{"line":1935,"column":66,"offset":66754}}},{"type":"text","value":"\n\"Breadth-first Search\": ","position":{"start":{"line":1935,"column":66,"offset":66754},"end":{"line":1936,"column":25,"offset":66780}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/breadth-first-search"},"children":[{"type":"text","value":"https://leetcode.com/tag/breadth-first-search","position":{"start":{"line":1936,"column":25,"offset":66780},"end":{"line":1936,"column":70,"offset":66825}}}],"position":{"start":{"line":1936,"column":25,"offset":66780},"end":{"line":1936,"column":70,"offset":66825}}},{"type":"text","value":"\n\"Graph\": ","position":{"start":{"line":1936,"column":70,"offset":66825},"end":{"line":1937,"column":10,"offset":66836}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/tag/graph"},"children":[{"type":"text","value":"https://leetcode.com/tag/graph","position":{"start":{"line":1937,"column":10,"offset":66836},"end":{"line":1937,"column":40,"offset":66866}}}],"position":{"start":{"line":1937,"column":10,"offset":66836},"end":{"line":1937,"column":40,"offset":66866}}},{"type":"text","value":"\nSimilar Questions:\n\"Copy List with Random Pointer\": ","position":{"start":{"line":1937,"column":40,"offset":66866},"end":{"line":1939,"column":34,"offset":66921}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/copy-list-with-random-pointer"},"children":[{"type":"text","value":"https://leetcode.com/problems/copy-list-with-random-pointer","position":{"start":{"line":1939,"column":34,"offset":66921},"end":{"line":1939,"column":93,"offset":66980}}}],"position":{"start":{"line":1939,"column":34,"offset":66921},"end":{"line":1939,"column":93,"offset":66980}}}],"position":{"start":{"line":1933,"column":1,"offset":66652},"end":{"line":1939,"column":93,"offset":66980}}},{"type":"text","value":"\n"},{"type":"element","tagName":"hr","properties":{},"children":[],"position":{"start":{"line":1941,"column":1,"offset":66984},"end":{"line":1941,"column":4,"offset":66987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#133-clone-graphhttpsleetcodecomproblemsclone-graphdescription"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":1943,"column":2,"offset":66992},"end":{"line":1943,"column":142,"offset":67132}}}],"position":{"start":{"line":1943,"column":1,"offset":66991},"end":{"line":1943,"column":207,"offset":67197}}}],"position":{"start":{"line":1943,"column":1,"offset":66991},"end":{"line":1943,"column":207,"offset":67197}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"➤ ","position":{"start":{"line":1945,"column":4,"offset":67204},"end":{"line":1945,"column":6,"offset":67206}}},{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/clone-graph/description/"},"children":[{"type":"text","value":"133. Clone Graph","position":{"start":{"line":1945,"column":7,"offset":67207},"end":{"line":1945,"column":23,"offset":67223}}}],"position":{"start":{"line":1945,"column":6,"offset":67206},"end":{"line":1945,"column":80,"offset":67280}}}],"position":{"start":{"line":1945,"column":1,"offset":67201},"end":{"line":1945,"column":80,"offset":67280}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Problem:","position":{"start":{"line":1947,"column":5,"offset":67288},"end":{"line":1947,"column":13,"offset":67296}}}],"position":{"start":{"line":1947,"column":1,"offset":67284},"end":{"line":1947,"column":13,"offset":67296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the head of a graph, return a deep copy (clone) of the graph. Each node in the graph contains a ","position":{"start":{"line":1949,"column":1,"offset":67300},"end":{"line":1949,"column":103,"offset":67402}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":1949,"column":103,"offset":67402},"end":{"line":1949,"column":110,"offset":67409}}},{"type":"text","value":" (","position":{"start":{"line":1949,"column":110,"offset":67409},"end":{"line":1949,"column":112,"offset":67411}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"int"}],"position":{"start":{"line":1949,"column":112,"offset":67411},"end":{"line":1949,"column":117,"offset":67416}}},{"type":"text","value":") and a list (","position":{"start":{"line":1949,"column":117,"offset":67416},"end":{"line":1949,"column":131,"offset":67430}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"List[UndirectedGraphNode]"}],"position":{"start":{"line":1949,"column":131,"offset":67430},"end":{"line":1949,"column":158,"offset":67457}}},{"type":"text","value":") of its ","position":{"start":{"line":1949,"column":158,"offset":67457},"end":{"line":1949,"column":167,"offset":67466}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"neighbors"}],"position":{"start":{"line":1949,"column":167,"offset":67466},"end":{"line":1949,"column":178,"offset":67477}}},{"type":"text","value":". There is an edge between the given node and each of the nodes in its neighbors.","position":{"start":{"line":1949,"column":178,"offset":67477},"end":{"line":1949,"column":259,"offset":67558}}}],"position":{"start":{"line":1949,"column":1,"offset":67300},"end":{"line":1949,"column":259,"offset":67558}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"OJ's undirected graph serialization (so you can understand error output):","position":{"start":{"line":1951,"column":1,"offset":67562},"end":{"line":1951,"column":74,"offset":67635}}}],"position":{"start":{"line":1951,"column":1,"offset":67562},"end":{"line":1951,"column":74,"offset":67635}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Nodes are labeled uniquely.","position":{"start":{"line":1953,"column":1,"offset":67639},"end":{"line":1953,"column":28,"offset":67666}}}],"position":{"start":{"line":1953,"column":1,"offset":67639},"end":{"line":1953,"column":28,"offset":67666}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We use ","position":{"start":{"line":1955,"column":1,"offset":67670},"end":{"line":1955,"column":8,"offset":67677}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1955,"column":8,"offset":67677},"end":{"line":1955,"column":11,"offset":67680}}},{"type":"text","value":" as a separator for each node, and ","position":{"start":{"line":1955,"column":11,"offset":67680},"end":{"line":1955,"column":46,"offset":67715}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":","}],"position":{"start":{"line":1955,"column":46,"offset":67715},"end":{"line":1955,"column":49,"offset":67718}}},{"type":"text","value":" as a separator for node label and each neighbor of the node.","position":{"start":{"line":1955,"column":49,"offset":67718},"end":{"line":1955,"column":110,"offset":67779}}}],"position":{"start":{"line":1955,"column":1,"offset":67670},"end":{"line":1955,"column":110,"offset":67779}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As an example, consider the serialized graph ","position":{"start":{"line":1957,"column":1,"offset":67783},"end":{"line":1957,"column":46,"offset":67828}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{0,1,2#1,2#2,2}"}],"position":{"start":{"line":1957,"column":46,"offset":67828},"end":{"line":1957,"column":63,"offset":67845}}},{"type":"text","value":".","position":{"start":{"line":1957,"column":63,"offset":67845},"end":{"line":1957,"column":64,"offset":67846}}}],"position":{"start":{"line":1957,"column":1,"offset":67783},"end":{"line":1957,"column":64,"offset":67846}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The graph has a total of three nodes, and therefore contains three parts as separated by ","position":{"start":{"line":1959,"column":1,"offset":67850},"end":{"line":1959,"column":90,"offset":67939}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"#"}],"position":{"start":{"line":1959,"column":90,"offset":67939},"end":{"line":1959,"column":93,"offset":67942}}},{"type":"text","value":".","position":{"start":{"line":1959,"column":93,"offset":67942},"end":{"line":1959,"column":94,"offset":67943}}}],"position":{"start":{"line":1959,"column":1,"offset":67850},"end":{"line":1959,"column":94,"offset":67943}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"First node is labeled as ","position":{"start":{"line":1961,"column":5,"offset":67951},"end":{"line":1961,"column":30,"offset":67976}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1961,"column":30,"offset":67976},"end":{"line":1961,"column":33,"offset":67979}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1961,"column":33,"offset":67979},"end":{"line":1961,"column":48,"offset":67994}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":1961,"column":48,"offset":67994},"end":{"line":1961,"column":51,"offset":67997}}},{"type":"text","value":" to both nodes ","position":{"start":{"line":1961,"column":51,"offset":67997},"end":{"line":1961,"column":66,"offset":68012}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1961,"column":66,"offset":68012},"end":{"line":1961,"column":69,"offset":68015}}},{"type":"text","value":" and ","position":{"start":{"line":1961,"column":69,"offset":68015},"end":{"line":1961,"column":74,"offset":68020}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1961,"column":74,"offset":68020},"end":{"line":1961,"column":77,"offset":68023}}},{"type":"text","value":".","position":{"start":{"line":1961,"column":77,"offset":68023},"end":{"line":1961,"column":78,"offset":68024}}}],"position":{"start":{"line":1961,"column":1,"offset":67947},"end":{"line":1961,"column":78,"offset":68024}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Second node is labeled as ","position":{"start":{"line":1962,"column":5,"offset":68030},"end":{"line":1962,"column":31,"offset":68056}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1962,"column":31,"offset":68056},"end":{"line":1962,"column":34,"offset":68059}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1962,"column":34,"offset":68059},"end":{"line":1962,"column":49,"offset":68074}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":1962,"column":49,"offset":68074},"end":{"line":1962,"column":52,"offset":68077}}},{"type":"text","value":" to node ","position":{"start":{"line":1962,"column":52,"offset":68077},"end":{"line":1962,"column":61,"offset":68086}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1962,"column":61,"offset":68086},"end":{"line":1962,"column":64,"offset":68089}}},{"type":"text","value":".","position":{"start":{"line":1962,"column":64,"offset":68089},"end":{"line":1962,"column":65,"offset":68090}}}],"position":{"start":{"line":1962,"column":1,"offset":68026},"end":{"line":1962,"column":65,"offset":68090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Third node is labeled as ","position":{"start":{"line":1963,"column":5,"offset":68096},"end":{"line":1963,"column":30,"offset":68121}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1963,"column":30,"offset":68121},"end":{"line":1963,"column":33,"offset":68124}}},{"type":"text","value":". Connect node ","position":{"start":{"line":1963,"column":33,"offset":68124},"end":{"line":1963,"column":48,"offset":68139}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1963,"column":48,"offset":68139},"end":{"line":1963,"column":51,"offset":68142}}},{"type":"text","value":" to node ","position":{"start":{"line":1963,"column":51,"offset":68142},"end":{"line":1963,"column":60,"offset":68151}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"2"}],"position":{"start":{"line":1963,"column":60,"offset":68151},"end":{"line":1963,"column":63,"offset":68154}}},{"type":"text","value":" (itself), thus forming a self-cycle.","position":{"start":{"line":1963,"column":63,"offset":68154},"end":{"line":1963,"column":100,"offset":68191}}}],"position":{"start":{"line":1963,"column":1,"offset":68092},"end":{"line":1963,"column":100,"offset":68191}}},{"type":"text","value":"\n"}],"position":{"start":{"line":1961,"column":1,"offset":67947},"end":{"line":1963,"column":100,"offset":68191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Visually, the graph looks like the following:","position":{"start":{"line":1965,"column":1,"offset":68195},"end":{"line":1965,"column":46,"offset":68240}}}],"position":{"start":{"line":1965,"column":1,"offset":68195},"end":{"line":1965,"column":46,"offset":68240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n"}],"position":{"start":{"line":1967,"column":1,"offset":68244},"end":{"line":1975,"column":4,"offset":68328}}}],"position":{"start":{"line":1967,"column":1,"offset":68244},"end":{"line":1975,"column":4,"offset":68328}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note","position":{"start":{"line":1977,"column":3,"offset":68334},"end":{"line":1977,"column":7,"offset":68338}}}],"position":{"start":{"line":1977,"column":1,"offset":68332},"end":{"line":1977,"column":9,"offset":68340}}},{"type":"text","value":": The information about the tree serialization is only meant so that you can understand error output if you get a wrong answer. You don't need to understand the serialization to solve the problem.","position":{"start":{"line":1977,"column":9,"offset":68340},"end":{"line":1977,"column":205,"offset":68536}}}],"position":{"start":{"line":1977,"column":1,"offset":68332},"end":{"line":1977,"column":205,"offset":68536}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Solution:","position":{"start":{"line":1979,"column":5,"offset":68544},"end":{"line":1979,"column":14,"offset":68553}}}],"position":{"start":{"line":1979,"column":1,"offset":68540},"end":{"line":1979,"column":14,"offset":68553}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DFS. Cache the visited node before entering the next recursion.","position":{"start":{"line":1981,"column":1,"offset":68557},"end":{"line":1981,"column":64,"offset":68620}}}],"position":{"start":{"line":1981,"column":1,"offset":68557},"end":{"line":1981,"column":64,"offset":68620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for undirected graph.\n * function UndirectedGraphNode(label) {\n *     this.label = label;\n *     this.neighbors = [];   // Array of UndirectedGraphNode\n * }\n */\n\n/**\n * @param {UndirectedGraphNode} graph\n * @return {UndirectedGraphNode}\n */\nlet cloneGraph = function (graph) {\n    const cache = {};\n    return _clone(graph);\n\n    function _clone(graph) {\n        if (!graph) {\n            return graph;\n        }\n        const label = graph.label;\n        if (!cache[label]) {\n            cache[label] = new UndirectedGraphNode(label);\n            cache[label].neighbors = graph.neighbors.map(_clone);\n        }\n        return cache[label];\n    }\n};\n"}],"position":{"start":{"line":1983,"column":1,"offset":68624},"end":{"line":2012,"column":4,"offset":69330}}}],"position":{"start":{"line":1983,"column":1,"offset":68624},"end":{"line":2012,"column":4,"offset":69330}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/binary-tree-upside-down.webp","alt":"alt text","title":"binary-tree-upside-down"},"children":[],"position":{"start":{"line":2014,"column":1,"offset":69334},"end":{"line":2014,"column":127,"offset":69460}}}],"position":{"start":{"line":2014,"column":1,"offset":69334},"end":{"line":2014,"column":127,"offset":69460}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * Definition for a binary tree node.\n * function TreeNode(val) {\n *     this.val = val;\n *     this.left = this.right = null;\n * }\n */\n/**\n * @param {TreeNode} root\n * @return {TreeNode}\n */\nconst upsideDownBinaryTree = function (root) {\n    let curr = root;\n    let next = null;\n    let temp = null;\n    let prev = null;\n    while (curr !== null) {\n        next = curr.left;\n        curr.left = temp;\n        temp = curr.right;\n        curr.right = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n};\n\n// another\n\nconst upsideDownBinaryTree = function (root) {\n    if (root == null || root.left == null) {\n        return root;\n    }\n    const newRoot = upsideDownBinaryTree(root.left);\n    root.left.left = root.right;\n    root.left.right = root;\n    root.left = null;\n    root.right = null;\n    return newRoot;\n};\n"}],"position":{"start":{"line":2016,"column":1,"offset":69464},"end":{"line":2057,"column":4,"offset":70357}}}],"position":{"start":{"line":2016,"column":1,"offset":69464},"end":{"line":2057,"column":4,"offset":70357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/maximum-sum-circular-subarray.png","alt":"alt text","title":"maximum-sum-circular-subarray"},"children":[],"position":{"start":{"line":2059,"column":1,"offset":70361},"end":{"line":2059,"column":138,"offset":70498}}}],"position":{"start":{"line":2059,"column":1,"offset":70361},"end":{"line":2059,"column":138,"offset":70498}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[]} A\n * @return {number}\n */\nconst maxSubarraySumCircular = function (A) {\n    let minSum = Infinity,\n        sum = 0,\n        maxSum = -Infinity,\n        curMax = 0,\n        curMin = 0;\n    for (let a of A) {\n        sum += a;\n        curMax = Math.max(curMax + a, a);\n        maxSum = Math.max(maxSum, curMax);\n        curMin = Math.min(curMin + a, a);\n        minSum = Math.min(minSum, curMin);\n    }\n    return maxSum > 0 ? Math.max(maxSum, sum - minSum) : maxSum;\n};\n"}],"position":{"start":{"line":2061,"column":1,"offset":70502},"end":{"line":2081,"column":4,"offset":71025}}}],"position":{"start":{"line":2061,"column":1,"offset":70502},"end":{"line":2081,"column":4,"offset":71025}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#balanced-binary-tree---leetcode"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":2083,"column":2,"offset":71030},"end":{"line":2083,"column":142,"offset":71170}}}],"position":{"start":{"line":2083,"column":1,"offset":71029},"end":{"line":2083,"column":177,"offset":71205}}}],"position":{"start":{"line":2083,"column":1,"offset":71029},"end":{"line":2083,"column":177,"offset":71205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"➤ Balanced Binary Tree - LeetCode","position":{"start":{"line":2085,"column":3,"offset":71211},"end":{"line":2085,"column":36,"offset":71244}}}],"position":{"start":{"line":2085,"column":1,"offset":71209},"end":{"line":2085,"column":36,"offset":71244}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2087,"column":3,"offset":71250},"end":{"line":2087,"column":144,"offset":71391}}}],"position":{"start":{"line":2087,"column":3,"offset":71250},"end":{"line":2087,"column":144,"offset":71391}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2087,"column":1,"offset":71248},"end":{"line":2087,"column":144,"offset":71391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a binary tree, determine if it is height-balanced.","position":{"start":{"line":2089,"column":1,"offset":71395},"end":{"line":2089,"column":57,"offset":71451}}}],"position":{"start":{"line":2089,"column":1,"offset":71395},"end":{"line":2089,"column":57,"offset":71451}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a height-balanced binary tree is defined as:","position":{"start":{"line":2091,"column":1,"offset":71455},"end":{"line":2091,"column":63,"offset":71517}}}],"position":{"start":{"line":2091,"column":1,"offset":71455},"end":{"line":2091,"column":63,"offset":71517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"a binary tree in which the left and right subtrees of ","position":{"start":{"line":2093,"column":3,"offset":71523},"end":{"line":2093,"column":57,"offset":71577}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"every","position":{"start":{"line":2093,"column":58,"offset":71578},"end":{"line":2093,"column":63,"offset":71583}}}],"position":{"start":{"line":2093,"column":57,"offset":71577},"end":{"line":2093,"column":64,"offset":71584}}},{"type":"text","value":" node differ in height by no more than 1.","position":{"start":{"line":2093,"column":64,"offset":71584},"end":{"line":2093,"column":105,"offset":71625}}}],"position":{"start":{"line":2093,"column":3,"offset":71523},"end":{"line":2093,"column":105,"offset":71625}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2093,"column":1,"offset":71521},"end":{"line":2093,"column":105,"offset":71625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":2095,"column":3,"offset":71631},"end":{"line":2095,"column":13,"offset":71641}}}],"position":{"start":{"line":2095,"column":1,"offset":71629},"end":{"line":2095,"column":15,"offset":71643}}}],"position":{"start":{"line":2095,"column":1,"offset":71629},"end":{"line":2095,"column":15,"offset":71643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg","alt":null},"children":[],"position":{"start":{"line":2097,"column":1,"offset":71647},"end":{"line":2097,"column":66,"offset":71712}}}],"position":{"start":{"line":2097,"column":1,"offset":71647},"end":{"line":2097,"column":66,"offset":71712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2099,"column":3,"offset":71718},"end":{"line":2099,"column":9,"offset":71724}}}],"position":{"start":{"line":2099,"column":1,"offset":71716},"end":{"line":2099,"column":11,"offset":71726}}},{"type":"text","value":" root = ","position":{"start":{"line":2099,"column":11,"offset":71726},"end":{"line":2099,"column":19,"offset":71734}}},{"type":"text","value":"[","position":{"start":{"line":2099,"column":19,"offset":71734},"end":{"line":2099,"column":21,"offset":71736}}},{"type":"text","value":"3,9,20,null,null,15,7]\n","position":{"start":{"line":2099,"column":21,"offset":71736},"end":{"line":2100,"column":1,"offset":71760}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2100,"column":3,"offset":71762},"end":{"line":2100,"column":10,"offset":71769}}}],"position":{"start":{"line":2100,"column":1,"offset":71760},"end":{"line":2100,"column":12,"offset":71771}}},{"type":"text","value":" true","position":{"start":{"line":2100,"column":12,"offset":71771},"end":{"line":2100,"column":17,"offset":71776}}}],"position":{"start":{"line":2099,"column":1,"offset":71716},"end":{"line":2100,"column":17,"offset":71776}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":2102,"column":3,"offset":71782},"end":{"line":2102,"column":13,"offset":71792}}}],"position":{"start":{"line":2102,"column":1,"offset":71780},"end":{"line":2102,"column":15,"offset":71794}}}],"position":{"start":{"line":2102,"column":1,"offset":71780},"end":{"line":2102,"column":15,"offset":71794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg","alt":null},"children":[],"position":{"start":{"line":2104,"column":1,"offset":71798},"end":{"line":2104,"column":66,"offset":71863}}}],"position":{"start":{"line":2104,"column":1,"offset":71798},"end":{"line":2104,"column":66,"offset":71863}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2106,"column":3,"offset":71869},"end":{"line":2106,"column":9,"offset":71875}}}],"position":{"start":{"line":2106,"column":1,"offset":71867},"end":{"line":2106,"column":11,"offset":71877}}},{"type":"text","value":" root = ","position":{"start":{"line":2106,"column":11,"offset":71877},"end":{"line":2106,"column":19,"offset":71885}}},{"type":"text","value":"[","position":{"start":{"line":2106,"column":19,"offset":71885},"end":{"line":2106,"column":21,"offset":71887}}},{"type":"text","value":"1,2,2,3,3,null,null,4,4]\n","position":{"start":{"line":2106,"column":21,"offset":71887},"end":{"line":2107,"column":1,"offset":71913}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2107,"column":3,"offset":71915},"end":{"line":2107,"column":10,"offset":71922}}}],"position":{"start":{"line":2107,"column":1,"offset":71913},"end":{"line":2107,"column":12,"offset":71924}}},{"type":"text","value":" false","position":{"start":{"line":2107,"column":12,"offset":71924},"end":{"line":2107,"column":18,"offset":71930}}}],"position":{"start":{"line":2106,"column":1,"offset":71867},"end":{"line":2107,"column":18,"offset":71930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":2109,"column":3,"offset":71936},"end":{"line":2109,"column":13,"offset":71946}}}],"position":{"start":{"line":2109,"column":1,"offset":71934},"end":{"line":2109,"column":15,"offset":71948}}}],"position":{"start":{"line":2109,"column":1,"offset":71934},"end":{"line":2109,"column":15,"offset":71948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2111,"column":3,"offset":71954},"end":{"line":2111,"column":9,"offset":71960}}}],"position":{"start":{"line":2111,"column":1,"offset":71952},"end":{"line":2111,"column":11,"offset":71962}}},{"type":"text","value":" root = ","position":{"start":{"line":2111,"column":11,"offset":71962},"end":{"line":2111,"column":19,"offset":71970}}},{"type":"text","value":"[","position":{"start":{"line":2111,"column":19,"offset":71970},"end":{"line":2111,"column":21,"offset":71972}}},{"type":"text","value":"]\n","position":{"start":{"line":2111,"column":21,"offset":71972},"end":{"line":2112,"column":1,"offset":71975}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2112,"column":3,"offset":71977},"end":{"line":2112,"column":10,"offset":71984}}}],"position":{"start":{"line":2112,"column":1,"offset":71975},"end":{"line":2112,"column":12,"offset":71986}}},{"type":"text","value":" true","position":{"start":{"line":2112,"column":12,"offset":71986},"end":{"line":2112,"column":17,"offset":71991}}}],"position":{"start":{"line":2111,"column":1,"offset":71952},"end":{"line":2112,"column":17,"offset":71991}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Constraints:","position":{"start":{"line":2114,"column":3,"offset":71997},"end":{"line":2114,"column":15,"offset":72009}}}],"position":{"start":{"line":2114,"column":1,"offset":71995},"end":{"line":2114,"column":17,"offset":72011}}}],"position":{"start":{"line":2114,"column":1,"offset":71995},"end":{"line":2114,"column":17,"offset":72011}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The number of nodes in the tree is in the range ","position":{"start":{"line":2116,"column":5,"offset":72019},"end":{"line":2116,"column":53,"offset":72067}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 5000]"}],"position":{"start":{"line":2116,"column":53,"offset":72067},"end":{"line":2116,"column":64,"offset":72078}}},{"type":"text","value":".","position":{"start":{"line":2116,"column":64,"offset":72078},"end":{"line":2116,"column":65,"offset":72079}}}],"position":{"start":{"line":2116,"column":1,"offset":72015},"end":{"line":2116,"column":65,"offset":72079}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-104 <= Node.val <= 104"}],"position":{"start":{"line":2117,"column":5,"offset":72085},"end":{"line":2117,"column":30,"offset":72110}}}],"position":{"start":{"line":2117,"column":1,"offset":72081},"end":{"line":2117,"column":30,"offset":72110}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2116,"column":1,"offset":72015},"end":{"line":2117,"column":30,"offset":72110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/balanced-binary-tree/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2119,"column":2,"offset":72115},"end":{"line":2119,"column":8,"offset":72121}}}],"position":{"start":{"line":2119,"column":1,"offset":72114},"end":{"line":2119,"column":62,"offset":72175}}},{"type":"text","value":"# Convert Sorted Array to Binary Search Tree","position":{"start":{"line":2119,"column":62,"offset":72175},"end":{"line":2119,"column":106,"offset":72219}}}],"position":{"start":{"line":2119,"column":1,"offset":72114},"end":{"line":2119,"column":106,"offset":72219}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2121,"column":3,"offset":72225},"end":{"line":2121,"column":144,"offset":72366}}}],"position":{"start":{"line":2121,"column":3,"offset":72225},"end":{"line":2121,"column":144,"offset":72366}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2121,"column":1,"offset":72223},"end":{"line":2121,"column":144,"offset":72366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.","position":{"start":{"line":2123,"column":1,"offset":72370},"end":{"line":2123,"column":98,"offset":72467}}}],"position":{"start":{"line":2123,"column":1,"offset":72370},"end":{"line":2123,"column":98,"offset":72467}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of ","position":{"start":{"line":2125,"column":1,"offset":72471},"end":{"line":2125,"column":119,"offset":72589}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"every","position":{"start":{"line":2125,"column":120,"offset":72590},"end":{"line":2125,"column":125,"offset":72595}}}],"position":{"start":{"line":2125,"column":119,"offset":72589},"end":{"line":2125,"column":126,"offset":72596}}},{"type":"text","value":" node never differ by more than 1.","position":{"start":{"line":2125,"column":126,"offset":72596},"end":{"line":2125,"column":160,"offset":72630}}}],"position":{"start":{"line":2125,"column":1,"offset":72471},"end":{"line":2125,"column":160,"offset":72630}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":2127,"column":3,"offset":72636},"end":{"line":2127,"column":11,"offset":72644}}}],"position":{"start":{"line":2127,"column":1,"offset":72634},"end":{"line":2127,"column":13,"offset":72646}}}],"position":{"start":{"line":2127,"column":1,"offset":72634},"end":{"line":2127,"column":13,"offset":72646}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given the sorted array: ","position":{"start":{"line":2129,"column":1,"offset":72650},"end":{"line":2129,"column":25,"offset":72674}}},{"type":"text","value":"[","position":{"start":{"line":2129,"column":25,"offset":72674},"end":{"line":2129,"column":27,"offset":72676}}},{"type":"text","value":"-10,-3,0,5,9],","position":{"start":{"line":2129,"column":27,"offset":72676},"end":{"line":2129,"column":41,"offset":72690}}}],"position":{"start":{"line":2129,"column":1,"offset":72650},"end":{"line":2129,"column":41,"offset":72690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One possible answer is: ","position":{"start":{"line":2131,"column":1,"offset":72694},"end":{"line":2131,"column":25,"offset":72718}}},{"type":"text","value":"[","position":{"start":{"line":2131,"column":25,"offset":72718},"end":{"line":2131,"column":27,"offset":72720}}},{"type":"text","value":"0,-3,9,-10,null,5], which represents the following height balanced BST:","position":{"start":{"line":2131,"column":27,"offset":72720},"end":{"line":2131,"column":98,"offset":72791}}}],"position":{"start":{"line":2131,"column":1,"offset":72694},"end":{"line":2131,"column":98,"offset":72791}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"  0\n / \\\\\n"}],"position":{"start":{"line":2133,"column":1,"offset":72795},"end":{"line":2134,"column":10,"offset":72813}}}],"position":{"start":{"line":2133,"column":1,"offset":72795},"end":{"line":2134,"column":10,"offset":72813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"-","position":{"start":{"line":2136,"column":1,"offset":72817},"end":{"line":2136,"column":3,"offset":72819}}},{"type":"text","value":"3 9\n/ /\n","position":{"start":{"line":2136,"column":3,"offset":72819},"end":{"line":2138,"column":1,"offset":72829}}},{"type":"text","value":"-","position":{"start":{"line":2138,"column":1,"offset":72829},"end":{"line":2138,"column":3,"offset":72831}}},{"type":"text","value":"10 5","position":{"start":{"line":2138,"column":3,"offset":72831},"end":{"line":2138,"column":7,"offset":72835}}}],"position":{"start":{"line":2136,"column":1,"offset":72817},"end":{"line":2138,"column":7,"offset":72835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2140,"column":2,"offset":72840},"end":{"line":2140,"column":8,"offset":72846}}}],"position":{"start":{"line":2140,"column":1,"offset":72839},"end":{"line":2140,"column":84,"offset":72922}}},{"type":"text","value":"# Delete Node in a BST","position":{"start":{"line":2140,"column":84,"offset":72922},"end":{"line":2140,"column":106,"offset":72944}}}],"position":{"start":{"line":2140,"column":1,"offset":72839},"end":{"line":2140,"column":106,"offset":72944}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Level up your coding skills and quickly land a job. This is the best place to expand your knowledge and get prepared for your next interview.","position":{"start":{"line":2142,"column":3,"offset":72950},"end":{"line":2142,"column":144,"offset":73091}}}],"position":{"start":{"line":2142,"column":3,"offset":72950},"end":{"line":2142,"column":144,"offset":73091}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2142,"column":1,"offset":72948},"end":{"line":2142,"column":144,"offset":73091}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.","position":{"start":{"line":2144,"column":1,"offset":73095},"end":{"line":2144,"column":157,"offset":73251}}}],"position":{"start":{"line":2144,"column":1,"offset":73095},"end":{"line":2144,"column":157,"offset":73251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Basically, the deletion can be divided into two stages:","position":{"start":{"line":2146,"column":1,"offset":73255},"end":{"line":2146,"column":56,"offset":73310}}}],"position":{"start":{"line":2146,"column":1,"offset":73255},"end":{"line":2146,"column":56,"offset":73310}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Search for a node to remove.","position":{"start":{"line":2148,"column":5,"offset":73318},"end":{"line":2148,"column":33,"offset":73346}}}],"position":{"start":{"line":2148,"column":1,"offset":73314},"end":{"line":2148,"column":33,"offset":73346}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the node is found, delete the node.","position":{"start":{"line":2149,"column":5,"offset":73352},"end":{"line":2149,"column":43,"offset":73390}}}],"position":{"start":{"line":2149,"column":1,"offset":73348},"end":{"line":2149,"column":43,"offset":73390}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2148,"column":1,"offset":73314},"end":{"line":2149,"column":43,"offset":73390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Follow up:","position":{"start":{"line":2151,"column":3,"offset":73396},"end":{"line":2151,"column":13,"offset":73406}}}],"position":{"start":{"line":2151,"column":1,"offset":73394},"end":{"line":2151,"column":15,"offset":73408}}},{"type":"text","value":" Can you solve it with time complexity ","position":{"start":{"line":2151,"column":15,"offset":73408},"end":{"line":2151,"column":54,"offset":73447}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"O(height of tree)"}],"position":{"start":{"line":2151,"column":54,"offset":73447},"end":{"line":2151,"column":73,"offset":73466}}},{"type":"text","value":"?","position":{"start":{"line":2151,"column":73,"offset":73466},"end":{"line":2151,"column":74,"offset":73467}}}],"position":{"start":{"line":2151,"column":1,"offset":73394},"end":{"line":2151,"column":74,"offset":73467}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 1:","position":{"start":{"line":2153,"column":3,"offset":73473},"end":{"line":2153,"column":13,"offset":73483}}}],"position":{"start":{"line":2153,"column":1,"offset":73471},"end":{"line":2153,"column":15,"offset":73485}}}],"position":{"start":{"line":2153,"column":1,"offset":73471},"end":{"line":2153,"column":15,"offset":73485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg","alt":null},"children":[],"position":{"start":{"line":2155,"column":1,"offset":73489},"end":{"line":2155,"column":67,"offset":73555}}}],"position":{"start":{"line":2155,"column":1,"offset":73489},"end":{"line":2155,"column":67,"offset":73555}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2157,"column":3,"offset":73561},"end":{"line":2157,"column":9,"offset":73567}}}],"position":{"start":{"line":2157,"column":1,"offset":73559},"end":{"line":2157,"column":11,"offset":73569}}},{"type":"text","value":" root = ","position":{"start":{"line":2157,"column":11,"offset":73569},"end":{"line":2157,"column":19,"offset":73577}}},{"type":"text","value":"[","position":{"start":{"line":2157,"column":19,"offset":73577},"end":{"line":2157,"column":21,"offset":73579}}},{"type":"text","value":"5,3,6,2,4,null,7], key = 3\n","position":{"start":{"line":2157,"column":21,"offset":73579},"end":{"line":2158,"column":1,"offset":73607}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2158,"column":3,"offset":73609},"end":{"line":2158,"column":10,"offset":73616}}}],"position":{"start":{"line":2158,"column":1,"offset":73607},"end":{"line":2158,"column":12,"offset":73618}}},{"type":"text","value":" ","position":{"start":{"line":2158,"column":12,"offset":73618},"end":{"line":2158,"column":13,"offset":73619}}},{"type":"text","value":"[","position":{"start":{"line":2158,"column":13,"offset":73619},"end":{"line":2158,"column":15,"offset":73621}}},{"type":"text","value":"5,4,6,2,null,null,7]\n","position":{"start":{"line":2158,"column":15,"offset":73621},"end":{"line":2159,"column":1,"offset":73643}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":2159,"column":3,"offset":73645},"end":{"line":2159,"column":15,"offset":73657}}}],"position":{"start":{"line":2159,"column":1,"offset":73643},"end":{"line":2159,"column":17,"offset":73659}}},{"type":"text","value":" Given key to delete is 3. So we find the node with value 3 and delete it.\nOne valid answer is ","position":{"start":{"line":2159,"column":17,"offset":73659},"end":{"line":2160,"column":21,"offset":73755}}},{"type":"text","value":"[","position":{"start":{"line":2160,"column":21,"offset":73755},"end":{"line":2160,"column":23,"offset":73757}}},{"type":"text","value":"5,4,6,2,null,null,7], shown in the above BST.\nPlease notice that another valid answer is ","position":{"start":{"line":2160,"column":23,"offset":73757},"end":{"line":2161,"column":44,"offset":73847}}},{"type":"text","value":"[","position":{"start":{"line":2161,"column":44,"offset":73847},"end":{"line":2161,"column":46,"offset":73849}}},{"type":"text","value":"5,2,6,null,4,null,7] and it's also accepted.\n","position":{"start":{"line":2161,"column":46,"offset":73849},"end":{"line":2162,"column":1,"offset":73895}}},{"type":"element","tagName":"img","properties":{"src":"https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg","alt":null},"children":[],"position":{"start":{"line":2162,"column":1,"offset":73895},"end":{"line":2162,"column":70,"offset":73964}}}],"position":{"start":{"line":2157,"column":1,"offset":73559},"end":{"line":2162,"column":70,"offset":73964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 2:","position":{"start":{"line":2164,"column":3,"offset":73970},"end":{"line":2164,"column":13,"offset":73980}}}],"position":{"start":{"line":2164,"column":1,"offset":73968},"end":{"line":2164,"column":15,"offset":73982}}}],"position":{"start":{"line":2164,"column":1,"offset":73968},"end":{"line":2164,"column":15,"offset":73982}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2166,"column":3,"offset":73988},"end":{"line":2166,"column":9,"offset":73994}}}],"position":{"start":{"line":2166,"column":1,"offset":73986},"end":{"line":2166,"column":11,"offset":73996}}},{"type":"text","value":" root = ","position":{"start":{"line":2166,"column":11,"offset":73996},"end":{"line":2166,"column":19,"offset":74004}}},{"type":"text","value":"[","position":{"start":{"line":2166,"column":19,"offset":74004},"end":{"line":2166,"column":21,"offset":74006}}},{"type":"text","value":"5,3,6,2,4,null,7], key = 0\n","position":{"start":{"line":2166,"column":21,"offset":74006},"end":{"line":2167,"column":1,"offset":74034}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2167,"column":3,"offset":74036},"end":{"line":2167,"column":10,"offset":74043}}}],"position":{"start":{"line":2167,"column":1,"offset":74034},"end":{"line":2167,"column":12,"offset":74045}}},{"type":"text","value":" ","position":{"start":{"line":2167,"column":12,"offset":74045},"end":{"line":2167,"column":13,"offset":74046}}},{"type":"text","value":"[","position":{"start":{"line":2167,"column":13,"offset":74046},"end":{"line":2167,"column":15,"offset":74048}}},{"type":"text","value":"5,3,6,2,4,null,7]\n","position":{"start":{"line":2167,"column":15,"offset":74048},"end":{"line":2168,"column":1,"offset":74067}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Explanation:","position":{"start":{"line":2168,"column":3,"offset":74069},"end":{"line":2168,"column":15,"offset":74081}}}],"position":{"start":{"line":2168,"column":1,"offset":74067},"end":{"line":2168,"column":17,"offset":74083}}},{"type":"text","value":" The tree does not contain a node with value = 0.","position":{"start":{"line":2168,"column":17,"offset":74083},"end":{"line":2168,"column":66,"offset":74132}}}],"position":{"start":{"line":2166,"column":1,"offset":73986},"end":{"line":2168,"column":66,"offset":74132}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Example 3:","position":{"start":{"line":2170,"column":3,"offset":74138},"end":{"line":2170,"column":13,"offset":74148}}}],"position":{"start":{"line":2170,"column":1,"offset":74136},"end":{"line":2170,"column":15,"offset":74150}}}],"position":{"start":{"line":2170,"column":1,"offset":74136},"end":{"line":2170,"column":15,"offset":74150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":2172,"column":3,"offset":74156},"end":{"line":2172,"column":9,"offset":74162}}}],"position":{"start":{"line":2172,"column":1,"offset":74154},"end":{"line":2172,"column":11,"offset":74164}}},{"type":"text","value":" root = ","position":{"start":{"line":2172,"column":11,"offset":74164},"end":{"line":2172,"column":19,"offset":74172}}},{"type":"text","value":"[","position":{"start":{"line":2172,"column":19,"offset":74172},"end":{"line":2172,"column":21,"offset":74174}}},{"type":"text","value":"], key = 0\n","position":{"start":{"line":2172,"column":21,"offset":74174},"end":{"line":2173,"column":1,"offset":74186}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":2173,"column":3,"offset":74188},"end":{"line":2173,"column":10,"offset":74195}}}],"position":{"start":{"line":2173,"column":1,"offset":74186},"end":{"line":2173,"column":12,"offset":74197}}},{"type":"text","value":" ","position":{"start":{"line":2173,"column":12,"offset":74197},"end":{"line":2173,"column":13,"offset":74198}}},{"type":"text","value":"[","position":{"start":{"line":2173,"column":13,"offset":74198},"end":{"line":2173,"column":15,"offset":74200}}},{"type":"text","value":"]","position":{"start":{"line":2173,"column":15,"offset":74200},"end":{"line":2173,"column":16,"offset":74201}}}],"position":{"start":{"line":2172,"column":1,"offset":74154},"end":{"line":2173,"column":16,"offset":74201}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Constraints:","position":{"start":{"line":2175,"column":3,"offset":74207},"end":{"line":2175,"column":15,"offset":74219}}}],"position":{"start":{"line":2175,"column":1,"offset":74205},"end":{"line":2175,"column":17,"offset":74221}}}],"position":{"start":{"line":2175,"column":1,"offset":74205},"end":{"line":2175,"column":17,"offset":74221}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The number of nodes in the tree is in the range ","position":{"start":{"line":2177,"column":5,"offset":74229},"end":{"line":2177,"column":53,"offset":74277}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 104]"}],"position":{"start":{"line":2177,"column":53,"offset":74277},"end":{"line":2177,"column":63,"offset":74287}}},{"type":"text","value":".","position":{"start":{"line":2177,"column":63,"offset":74287},"end":{"line":2177,"column":64,"offset":74288}}}],"position":{"start":{"line":2177,"column":1,"offset":74225},"end":{"line":2177,"column":64,"offset":74288}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-105 <= Node.val <= 105"}],"position":{"start":{"line":2178,"column":5,"offset":74294},"end":{"line":2178,"column":30,"offset":74319}}}],"position":{"start":{"line":2178,"column":1,"offset":74290},"end":{"line":2178,"column":30,"offset":74319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Each node has a ","position":{"start":{"line":2179,"column":5,"offset":74325},"end":{"line":2179,"column":21,"offset":74341}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"unique","position":{"start":{"line":2179,"column":23,"offset":74343},"end":{"line":2179,"column":29,"offset":74349}}}],"position":{"start":{"line":2179,"column":21,"offset":74341},"end":{"line":2179,"column":31,"offset":74351}}},{"type":"text","value":" value.","position":{"start":{"line":2179,"column":31,"offset":74351},"end":{"line":2179,"column":38,"offset":74358}}}],"position":{"start":{"line":2179,"column":1,"offset":74321},"end":{"line":2179,"column":38,"offset":74358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"root"}],"position":{"start":{"line":2180,"column":5,"offset":74364},"end":{"line":2180,"column":11,"offset":74370}}},{"type":"text","value":" is a valid binary search tree.","position":{"start":{"line":2180,"column":11,"offset":74370},"end":{"line":2180,"column":42,"offset":74401}}}],"position":{"start":{"line":2180,"column":1,"offset":74360},"end":{"line":2180,"column":42,"offset":74401}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-105 <= key <= 105"}],"position":{"start":{"line":2181,"column":5,"offset":74407},"end":{"line":2181,"column":25,"offset":74427}}}],"position":{"start":{"line":2181,"column":1,"offset":74403},"end":{"line":2181,"column":25,"offset":74427}}},{"type":"text","value":"\n"}],"position":{"start":{"line":2177,"column":1,"offset":74225},"end":{"line":2181,"column":25,"offset":74427}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://leetcode.com/problems/delete-node-in-a-bst/"},"children":[{"type":"text","value":"Source","position":{"start":{"line":2183,"column":2,"offset":74432},"end":{"line":2183,"column":8,"offset":74438}}}],"position":{"start":{"line":2183,"column":1,"offset":74431},"end":{"line":2183,"column":62,"offset":74492}}},{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-0.jpg","alt":"alt text","title":"meeting-room-ii"},"children":[],"position":{"start":{"line":2183,"column":62,"offset":74492},"end":{"line":2183,"column":173,"offset":74603}}},{"type":"text","value":"\n","position":{"start":{"line":2183,"column":173,"offset":74603},"end":{"line":2184,"column":1,"offset":74605}}},{"type":"element","tagName":"img","properties":{"src":"https://github.com/everthis/leetcode-js/blob/master/images/meeting-room-ii-1.jpg","alt":"alt text","title":"meeting-room-ii"},"children":[],"position":{"start":{"line":2184,"column":1,"offset":74605},"end":{"line":2184,"column":112,"offset":74716}}}],"position":{"start":{"line":2183,"column":1,"offset":74431},"end":{"line":2184,"column":112,"offset":74716}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-js"]},"children":[{"type":"text","value":"/**\n * @param {number[][]} intervals\n * @return {number}\n */\nconst minMeetingRooms = function (intervals) {\n    const len = intervals.length;\n    const starts = new Array(len);\n    const ends = new Array(len);\n    for (let i = 0; i < len; i++) {\n        starts[i] = intervals[i][0];\n        ends[i] = intervals[i][1];\n    }\n    starts.sort((a, b) => a - b);\n    ends.sort((a, b) => a - b);\n    let rooms = 0;\n    let endsIdx = 0;\n    for (let i = 0; i < len; i++) {\n        if (starts[i] < ends[endsIdx]) rooms++;\n        else endsIdx++;\n    }\n    return rooms;\n};\n"}],"position":{"start":{"line":2186,"column":1,"offset":74720},"end":{"line":2209,"column":4,"offset":75317}}}],"position":{"start":{"line":2186,"column":1,"offset":74720},"end":{"line":2209,"column":4,"offset":75317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"#-"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png","alt":"-----------------------------------------------------"},"children":[],"position":{"start":{"line":2211,"column":2,"offset":75322},"end":{"line":2211,"column":142,"offset":75462}}}],"position":{"start":{"line":2211,"column":1,"offset":75321},"end":{"line":2211,"column":147,"offset":75467}}}],"position":{"start":{"line":2211,"column":1,"offset":75321},"end":{"line":2211,"column":147,"offset":75467}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2212,"column":1,"offset":75469}}}}