{"expireTime":9007200903816788000,"key":"transformer-remark-markdown-html-ast-dc4f8080ba8b1c0135bf464b40ab4792--","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring","position":{"start":{"line":2,"column":4,"offset":5},"end":{"line":2,"column":22,"offset":23}}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":22,"offset":23}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a HTML Element","position":{"start":{"line":4,"column":5,"offset":31},"end":{"line":4,"column":38,"offset":64}}}],"position":{"start":{"line":4,"column":1,"offset":27},"end":{"line":4,"column":38,"offset":64}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: you want to make a ","position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":6,"column":29,"offset":96}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Button>"}],"position":{"start":{"line":6,"column":29,"offset":96},"end":{"line":6,"column":39,"offset":106}}},{"type":"text","value":" that takes all the normal props of ","position":{"start":{"line":6,"column":39,"offset":106},"end":{"line":6,"column":75,"offset":142}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<button>"}],"position":{"start":{"line":6,"column":75,"offset":142},"end":{"line":6,"column":85,"offset":152}}},{"type":"text","value":" and does extra stuff.","position":{"start":{"line":6,"column":85,"offset":152},"end":{"line":6,"column":107,"offset":174}}}],"position":{"start":{"line":6,"column":1,"offset":68},"end":{"line":6,"column":107,"offset":174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extend ","position":{"start":{"line":8,"column":1,"offset":178},"end":{"line":8,"column":18,"offset":195}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ComponentPropsWithoutRef<'button'>"}],"position":{"start":{"line":8,"column":18,"offset":195},"end":{"line":8,"column":60,"offset":237}}}],"position":{"start":{"line":8,"column":1,"offset":178},"end":{"line":8,"column":60,"offset":237}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// usage\nfunction App() {\n    // Type '\"foo\"' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.(2322)\n    // return <Button type=\"foo\"> sldkj </Button>\n\n    // no error\n    return <Button type=\"button\"> text </Button>;\n}\n\n// implementation\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n    specialProp?: string;\n}\nexport function Button(props: ButtonProps) {\n    const { specialProp, ...rest } = props;\n    // do something with specialProp\n    return <button {...rest} />;\n}\n"}],"position":{"start":{"line":10,"column":1,"offset":241},"end":{"line":29,"column":4,"offset":800}}}],"position":{"start":{"line":10,"column":1,"offset":241},"end":{"line":29,"column":4,"offset":800}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUI4wPQtwCuqyA5lowQ4A7fMAhC4AQTBgAFAEo4Ab0Zw4bOABUAnmCzkARAQgQDZOMHRCI8NKmA8hyAEYAbfTAhwYu-WQPOHDCeQgZwAD5wBqgcziDAMGGRBpSoWIkRnEIAJlgEwEJY2WQAdLIATADM5eXyqurslDAcUBIAPABCQSHevgC8RiYGAHxwqK7ZANYAVnBtLF3B4sP19RrWcFhQxFD1TS3tiz0+egOBS6GjMFgAHvDzR8uMAL7MDBqgYO4gWEIwyDAxEJGLdILALH8tgQ8PpHkIAArEMDoW7XHLobB4GAlADCJEghT+iIgyLaZHOITIoxUDDUqD0uGAyFcxLAAH4AFxjGBQAo8egMV4MUHQQjCUTiOBw2RgJGoLlw1moRQ0tS4cSoeBKMYMpkspEAGjgJRNqXgzzgfTgspJqAFag02S8qBI6QAFny4AB3BJunVYRnM1l7dIHOYUyVKE0lM0WljDAXPIA"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"See this in the TS Playground","position":{"start":{"line":31,"column":3,"offset":806},"end":{"line":31,"column":32,"offset":835}}}],"position":{"start":{"line":31,"column":2,"offset":805},"end":{"line":31,"column":33,"offset":836}}}],"position":{"start":{"line":31,"column":1,"offset":804},"end":{"line":31,"column":609,"offset":1412}}}],"position":{"start":{"line":31,"column":1,"offset":804},"end":{"line":31,"column":609,"offset":1412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Forwarding Refs","position":{"start":{"line":33,"column":3,"offset":1418},"end":{"line":33,"column":18,"offset":1433}}}],"position":{"start":{"line":33,"column":1,"offset":1416},"end":{"line":33,"column":20,"offset":1435}}},{"type":"text","value":": As ","position":{"start":{"line":33,"column":20,"offset":1435},"end":{"line":33,"column":25,"offset":1440}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/forwarding-refs.html"},"children":[{"type":"text","value":"the React docs themselves note","position":{"start":{"line":33,"column":26,"offset":1441},"end":{"line":33,"column":56,"offset":1471}}}],"position":{"start":{"line":33,"column":25,"offset":1440},"end":{"line":33,"column":104,"offset":1519}}},{"type":"text","value":", most usecases will not need to obtain a ref to the inner element. But for people making reusable component libraries, you will need to ","position":{"start":{"line":33,"column":104,"offset":1519},"end":{"line":33,"column":241,"offset":1656}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forwardRef"}],"position":{"start":{"line":33,"column":241,"offset":1656},"end":{"line":33,"column":253,"offset":1668}}},{"type":"text","value":" the underlying element, and then you can use ","position":{"start":{"line":33,"column":253,"offset":1668},"end":{"line":33,"column":299,"offset":1714}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentPropsWithRef"}],"position":{"start":{"line":33,"column":299,"offset":1714},"end":{"line":33,"column":322,"offset":1737}}},{"type":"text","value":" to grab props for your wrapper component. Check ","position":{"start":{"line":33,"column":322,"offset":1737},"end":{"line":33,"column":371,"offset":1786}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"our docs on forwarding Refs","position":{"start":{"line":33,"column":372,"offset":1787},"end":{"line":33,"column":399,"offset":1814}}}],"position":{"start":{"line":33,"column":371,"offset":1786},"end":{"line":33,"column":500,"offset":1915}}},{"type":"text","value":" for more.","position":{"start":{"line":33,"column":500,"offset":1915},"end":{"line":33,"column":510,"offset":1925}}}],"position":{"start":{"line":33,"column":1,"offset":1416},"end":{"line":33,"column":510,"offset":1925}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In future, the need to ","position":{"start":{"line":35,"column":1,"offset":1929},"end":{"line":35,"column":24,"offset":1952}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forwardRef"}],"position":{"start":{"line":35,"column":24,"offset":1952},"end":{"line":35,"column":36,"offset":1964}}},{"type":"text","value":" may go away in React 17+, but for now we still have to deal with this. ðŸ™ƒ","position":{"start":{"line":35,"column":36,"offset":1964},"end":{"line":35,"column":110,"offset":2038}}}],"position":{"start":{"line":35,"column":1,"offset":1929},"end":{"line":35,"column":110,"offset":2038}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>","position":{"start":{"line":37,"column":1,"offset":2042},"end":{"line":38,"column":10,"offset":2062}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Why not ","position":{"start":{"line":40,"column":1,"offset":2066},"end":{"line":40,"column":9,"offset":2074}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":40,"column":9,"offset":2074},"end":{"line":40,"column":25,"offset":2090}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":25,"offset":2090},"end":{"line":40,"column":29,"offset":2094}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"IntrinsicElements"}],"position":{"start":{"line":40,"column":29,"offset":2094},"end":{"line":40,"column":48,"offset":2113}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":48,"offset":2113},"end":{"line":40,"column":52,"offset":2117}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[Element]HTMLAttributes"}],"position":{"start":{"line":40,"column":52,"offset":2117},"end":{"line":40,"column":77,"offset":2142}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":77,"offset":2142},"end":{"line":40,"column":81,"offset":2146}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLProps"}],"position":{"start":{"line":40,"column":81,"offset":2146},"end":{"line":40,"column":92,"offset":2157}}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":92,"offset":2157},"end":{"line":40,"column":96,"offset":2161}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLAttributes"}],"position":{"start":{"line":40,"column":96,"offset":2161},"end":{"line":40,"column":112,"offset":2177}}},{"type":"text","value":"?","position":{"start":{"line":40,"column":112,"offset":2177},"end":{"line":40,"column":113,"offset":2178}}}],"position":{"start":{"line":40,"column":1,"offset":2066},"end":{"line":40,"column":113,"offset":2178}}},{"type":"text","value":"\n"},{"type":"raw","value":"</summary>","position":{"start":{"line":42,"column":1,"offset":2182},"end":{"line":42,"column":11,"offset":2192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":44,"column":4,"offset":2199},"end":{"line":44,"column":20,"offset":2215}}}],"position":{"start":{"line":44,"column":1,"offset":2196},"end":{"line":44,"column":20,"offset":2215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You CAN use ","position":{"start":{"line":46,"column":1,"offset":2219},"end":{"line":46,"column":13,"offset":2231}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":46,"column":13,"offset":2231},"end":{"line":46,"column":29,"offset":2247}}},{"type":"text","value":" in place of ","position":{"start":{"line":46,"column":29,"offset":2247},"end":{"line":46,"column":42,"offset":2260}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentPropsWithRef"}],"position":{"start":{"line":46,"column":42,"offset":2260},"end":{"line":46,"column":65,"offset":2283}}},{"type":"text","value":", but you may prefer to be explicit about whether or not the component's refs are forwarded, which is what we have chosen to demonstrate. The tradeoff is slightly more intimidating terminology.","position":{"start":{"line":46,"column":65,"offset":2283},"end":{"line":46,"column":258,"offset":2476}}}],"position":{"start":{"line":46,"column":1,"offset":2219},"end":{"line":46,"column":258,"offset":2476}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"More info: ","position":{"start":{"line":48,"column":1,"offset":2480},"end":{"line":48,"column":12,"offset":2491}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/","position":{"start":{"line":48,"column":12,"offset":2491},"end":{"line":48,"column":110,"offset":2589}}}],"position":{"start":{"line":48,"column":12,"offset":2491},"end":{"line":48,"column":110,"offset":2589}}}],"position":{"start":{"line":48,"column":1,"offset":2480},"end":{"line":48,"column":110,"offset":2589}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Maybe ","position":{"start":{"line":50,"column":5,"offset":2597},"end":{"line":50,"column":11,"offset":2603}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"JSX.IntrinsicElements"}],"position":{"start":{"line":50,"column":11,"offset":2603},"end":{"line":50,"column":34,"offset":2626}}},{"type":"text","value":" or ","position":{"start":{"line":50,"column":34,"offset":2626},"end":{"line":50,"column":38,"offset":2630}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.[Element]HTMLAttributes"}],"position":{"start":{"line":50,"column":38,"offset":2630},"end":{"line":50,"column":69,"offset":2661}}}],"position":{"start":{"line":50,"column":1,"offset":2593},"end":{"line":50,"column":69,"offset":2661}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are at least 2 other equivalent ways to do this, but they are more verbose:","position":{"start":{"line":52,"column":1,"offset":2665},"end":{"line":52,"column":82,"offset":2746}}}],"position":{"start":{"line":52,"column":1,"offset":2665},"end":{"line":52,"column":82,"offset":2746}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Method 1: JSX.IntrinsicElements\ntype btnType = JSX.IntrinsicElements[\"button\"]; // cannot inline or will error\nexport interface ButtonProps extends btnType {} // etc\n\n// Method 2: React.[Element]HTMLAttributes\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>\n"}],"position":{"start":{"line":54,"column":1,"offset":2750},"end":{"line":61,"column":4,"offset":3063}}}],"position":{"start":{"line":54,"column":1,"offset":2750},"end":{"line":61,"column":4,"offset":3063}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Looking at ","position":{"start":{"line":63,"column":1,"offset":3067},"end":{"line":63,"column":12,"offset":3078}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/f3134f4897c8473f590cbcdd5788da8d59796f45/types/react/index.d.ts#L821"},"children":[{"type":"text","value":"the source for ","position":{"start":{"line":63,"column":13,"offset":3079},"end":{"line":63,"column":28,"offset":3094}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":63,"column":28,"offset":3094},"end":{"line":63,"column":44,"offset":3110}}}],"position":{"start":{"line":63,"column":12,"offset":3078},"end":{"line":63,"column":171,"offset":3237}}},{"type":"text","value":" shows that this is a clever wrapper for ","position":{"start":{"line":63,"column":171,"offset":3237},"end":{"line":63,"column":212,"offset":3278}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"JSX.IntrinsicElements"}],"position":{"start":{"line":63,"column":212,"offset":3278},"end":{"line":63,"column":235,"offset":3301}}},{"type":"text","value":", whereas the second method relies on specialized interfaces with unfamiliar naming/capitalization.","position":{"start":{"line":63,"column":235,"offset":3301},"end":{"line":63,"column":334,"offset":3400}}}],"position":{"start":{"line":63,"column":1,"offset":3067},"end":{"line":63,"column":334,"offset":3400}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: There are over 50 of these specialized interfaces available - look for ","position":{"start":{"line":65,"column":3,"offset":3406},"end":{"line":65,"column":80,"offset":3483}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLAttributes"}],"position":{"start":{"line":65,"column":80,"offset":3483},"end":{"line":65,"column":96,"offset":3499}}},{"type":"text","value":" in our ","position":{"start":{"line":65,"column":96,"offset":3499},"end":{"line":65,"column":104,"offset":3507}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/advanced/types_react_api#typesreact"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@types/react"}],"position":{"start":{"line":65,"column":105,"offset":3508},"end":{"line":65,"column":119,"offset":3522}}},{"type":"text","value":" commentary","position":{"start":{"line":65,"column":119,"offset":3522},"end":{"line":65,"column":130,"offset":3533}}}],"position":{"start":{"line":65,"column":104,"offset":3507},"end":{"line":65,"column":221,"offset":3624}}},{"type":"text","value":".","position":{"start":{"line":65,"column":221,"offset":3624},"end":{"line":65,"column":222,"offset":3625}}}],"position":{"start":{"line":65,"column":3,"offset":3406},"end":{"line":65,"column":222,"offset":3625}}},{"type":"text","value":"\n"}],"position":{"start":{"line":65,"column":1,"offset":3404},"end":{"line":65,"column":222,"offset":3625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ultimately, ","position":{"start":{"line":67,"column":1,"offset":3629},"end":{"line":67,"column":13,"offset":3641}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/pull/276"},"children":[{"type":"text","value":"we picked the ","position":{"start":{"line":67,"column":14,"offset":3642},"end":{"line":67,"column":28,"offset":3656}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":67,"column":28,"offset":3656},"end":{"line":67,"column":44,"offset":3672}}},{"type":"text","value":" method","position":{"start":{"line":67,"column":44,"offset":3672},"end":{"line":67,"column":51,"offset":3679}}}],"position":{"start":{"line":67,"column":13,"offset":3641},"end":{"line":67,"column":110,"offset":3738}}},{"type":"text","value":" as it involves the least TS specific jargon and has the most ease of use. But you'll be fine with either of these methods if you prefer.","position":{"start":{"line":67,"column":110,"offset":3738},"end":{"line":67,"column":247,"offset":3875}}}],"position":{"start":{"line":67,"column":1,"offset":3629},"end":{"line":67,"column":247,"offset":3875}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Definitely not ","position":{"start":{"line":69,"column":5,"offset":3883},"end":{"line":69,"column":20,"offset":3898}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLProps"}],"position":{"start":{"line":69,"column":20,"offset":3898},"end":{"line":69,"column":37,"offset":3915}}},{"type":"text","value":" or ","position":{"start":{"line":69,"column":37,"offset":3915},"end":{"line":69,"column":41,"offset":3919}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLAttributes"}],"position":{"start":{"line":69,"column":41,"offset":3919},"end":{"line":69,"column":63,"offset":3941}}}],"position":{"start":{"line":69,"column":1,"offset":3879},"end":{"line":69,"column":63,"offset":3941}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":71,"column":1,"offset":3945},"end":{"line":71,"column":35,"offset":3979}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLProps"}],"position":{"start":{"line":71,"column":35,"offset":3979},"end":{"line":71,"column":52,"offset":3996}}},{"type":"text","value":":","position":{"start":{"line":71,"column":52,"offset":3996},"end":{"line":71,"column":53,"offset":3997}}}],"position":{"start":{"line":71,"column":1,"offset":3945},"end":{"line":71,"column":53,"offset":3997}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface ButtonProps extends React.HTMLProps<HTMLButtonElement> {\n    specialProp: string;\n}\nexport function Button(props: ButtonProps) {\n    const { specialProp, ...rest } = props;\n    // ERROR: Type 'string' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.\n    return <button {...rest} />;\n}\n"}],"position":{"start":{"line":73,"column":1,"offset":4001},"end":{"line":82,"column":4,"offset":4344}}}],"position":{"start":{"line":73,"column":1,"offset":4001},"end":{"line":82,"column":4,"offset":4344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It infers a too-wide type of ","position":{"start":{"line":84,"column":1,"offset":4348},"end":{"line":84,"column":30,"offset":4377}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"string"}],"position":{"start":{"line":84,"column":30,"offset":4377},"end":{"line":84,"column":38,"offset":4385}}},{"type":"text","value":" for ","position":{"start":{"line":84,"column":38,"offset":4385},"end":{"line":84,"column":43,"offset":4390}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type"}],"position":{"start":{"line":84,"column":43,"offset":4390},"end":{"line":84,"column":49,"offset":4396}}},{"type":"text","value":", because it ","position":{"start":{"line":84,"column":49,"offset":4396},"end":{"line":84,"column":62,"offset":4409}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/128#issuecomment-508103558"},"children":[{"type":"text","value":"uses ","position":{"start":{"line":84,"column":63,"offset":4410},"end":{"line":84,"column":68,"offset":4415}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AllHTMLAttributes"}],"position":{"start":{"line":84,"column":68,"offset":4415},"end":{"line":84,"column":87,"offset":4434}}},{"type":"text","value":" under the hood","position":{"start":{"line":84,"column":87,"offset":4434},"end":{"line":84,"column":102,"offset":4449}}}],"position":{"start":{"line":84,"column":62,"offset":4409},"end":{"line":84,"column":186,"offset":4533}}},{"type":"text","value":".","position":{"start":{"line":84,"column":186,"offset":4533},"end":{"line":84,"column":187,"offset":4534}}}],"position":{"start":{"line":84,"column":1,"offset":4348},"end":{"line":84,"column":187,"offset":4534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":86,"column":1,"offset":4538},"end":{"line":86,"column":35,"offset":4572}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLAttributes"}],"position":{"start":{"line":86,"column":35,"offset":4572},"end":{"line":86,"column":57,"offset":4594}}},{"type":"text","value":":","position":{"start":{"line":86,"column":57,"offset":4594},"end":{"line":86,"column":58,"offset":4595}}}],"position":{"start":{"line":86,"column":1,"offset":4538},"end":{"line":86,"column":58,"offset":4595}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n    /* etc */\n}\n// usage\nfunction App() {\n    // Property 'type' does not exist on type 'IntrinsicAttributes & ButtonProps'\n    return <Button type=\"submit\"> text </Button>;\n}\n"}],"position":{"start":{"line":88,"column":1,"offset":4599},"end":{"line":97,"column":4,"offset":4873}}}],"position":{"start":{"line":88,"column":1,"offset":4599},"end":{"line":97,"column":4,"offset":4873}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":99,"column":1,"offset":4877},"end":{"line":99,"column":11,"offset":4887}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a Component","position":{"start":{"line":101,"column":5,"offset":4895},"end":{"line":101,"column":35,"offset":4925}}}],"position":{"start":{"line":101,"column":1,"offset":4891},"end":{"line":101,"column":35,"offset":4925}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TODO: this section needs work to make it simplified.","position":{"start":{"line":103,"column":3,"offset":4931},"end":{"line":103,"column":55,"offset":4983}}}],"position":{"start":{"line":103,"column":3,"offset":4931},"end":{"line":103,"column":55,"offset":4983}}},{"type":"text","value":"\n"}],"position":{"start":{"line":103,"column":1,"offset":4929},"end":{"line":103,"column":55,"offset":4983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: same as above, but for a React Component you don't have access to the underlying props","position":{"start":{"line":105,"column":1,"offset":4987},"end":{"line":105,"column":96,"offset":5082}}}],"position":{"start":{"line":105,"column":1,"offset":4987},"end":{"line":105,"column":96,"offset":5082}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const Box = (props: React.CSSProperties) => <div style={props} />;\n\nconst Card = (\n    { title, children, ...props }: { title: string } & $ElementProps<typeof Box> // new utility, see below\n) => (\n    <Box {...props}>\n        {title}: {children}\n    </Box>\n);\n"}],"position":{"start":{"line":107,"column":1,"offset":5086},"end":{"line":117,"column":4,"offset":5366}}}],"position":{"start":{"line":107,"column":1,"offset":5086},"end":{"line":117,"column":4,"offset":5366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extract a component's props by inferring them","position":{"start":{"line":119,"column":1,"offset":5370},"end":{"line":119,"column":56,"offset":5425}}}],"position":{"start":{"line":119,"column":1,"offset":5370},"end":{"line":119,"column":56,"offset":5425}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":121,"column":1,"offset":5429},"end":{"line":121,"column":9,"offset":5437}}}],"position":{"start":{"line":121,"column":1,"offset":5429},"end":{"line":121,"column":9,"offset":5437}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// ReactUtilityTypes.d.ts\ndeclare type $ElementProps<T> = T extends React.ComponentType<infer Props> ? (Props extends object ? Props : never) : never;\n"}],"position":{"start":{"line":123,"column":1,"offset":5441},"end":{"line":126,"column":4,"offset":5605}}}],"position":{"start":{"line":123,"column":1,"offset":5441},"end":{"line":126,"column":4,"offset":5605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage:","position":{"start":{"line":128,"column":1,"offset":5609},"end":{"line":128,"column":7,"offset":5615}}}],"position":{"start":{"line":128,"column":1,"offset":5609},"end":{"line":128,"column":7,"offset":5615}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"import * as Recompose from 'recompose';\nexport const defaultProps = <C extends React.ComponentType, D extends Partial<$ElementProps<C>>>(\n    defaults: D,\n    Component: C\n): React.ComponentType<$ElementProps<C> & Partial<D>> => Recompose.defaultProps(defaults)(Component);\n"}],"position":{"start":{"line":130,"column":1,"offset":5619},"end":{"line":136,"column":4,"offset":5909}}}],"position":{"start":{"line":130,"column":1,"offset":5619},"end":{"line":136,"column":4,"offset":5909}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks ","position":{"start":{"line":138,"column":2,"offset":5914},"end":{"line":138,"column":9,"offset":5921}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/23"},"children":[{"type":"text","value":"dmisdm","position":{"start":{"line":138,"column":10,"offset":5922},"end":{"line":138,"column":16,"offset":5928}}}],"position":{"start":{"line":138,"column":9,"offset":5921},"end":{"line":138,"column":76,"offset":5988}}}],"position":{"start":{"line":138,"column":1,"offset":5913},"end":{"line":138,"column":77,"offset":5989}}}],"position":{"start":{"line":138,"column":1,"offset":5913},"end":{"line":138,"column":77,"offset":5989}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":":new: You should also consider whether to explicitly forward refs:","position":{"start":{"line":140,"column":1,"offset":5993},"end":{"line":140,"column":67,"offset":6059}}}],"position":{"start":{"line":140,"column":1,"offset":5993},"end":{"line":140,"column":67,"offset":6059}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// base button, with ref forwarding\ntype Props = { children: React.ReactNode; type: 'submit' | 'button' };\nexport type Ref = HTMLButtonElement;\nexport const FancyButton = React.forwardRef<Ref, Props>((props, ref) => (\n    <button ref={ref} className=\"MyCustomButtonClass\" type={props.type}>\n        {props.children}\n    </button>\n));\n\n// second layer button, no need for forwardRef (TODO: doublecheck this)\nexport interface DoubleWrappedProps extends React.ComponentPropsWithRef<typeof FancyButton> {\n    specialProp?: string;\n}\nexport function DoubleWrappedButton(props: DoubleWrappedProps) {\n    const { specialProp, ref, ...rest } = props;\n    return <button ref={ref} {...rest} />;\n}\n\n// usage\nfunction App() {\n    const btnRef = React.useRef<HTMLButtonElement>(null!);\n    return (\n        <DoubleWrappedButton type=\"button\" ref={btnRef}>\n            {' '}\n            text{' '}\n        </DoubleWrappedButton>\n    );\n}\n"}],"position":{"start":{"line":142,"column":1,"offset":6063},"end":{"line":171,"column":4,"offset":7026}}}],"position":{"start":{"line":142,"column":1,"offset":6063},"end":{"line":171,"column":4,"offset":7026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUIwPTNwBGaWHArjDBAB2AGjgB3YDAAWcSgTgFoY5FAAmwQQHNGMAJ5huABWJh0AXjgBvOLinAANqsqCAXJiowAdNjwwAchCqWDRwegZuAESoPOwgkhFwAD5wEex8AoIJAL70DFgAHpCwofrc2PIWABIAKgCyADIAQulCAKL2WCBYgjC5BUXwuEKo8ABiyIK4us38QnAWPvieilDKauUAPOWixhCmAHwAFIdgJqiicgCU8-twh4xwcBtps4KyWARmlnJZNvZoqD8yC6ZgitV0AGF-qhAcCsAkwlgvqc9qhPIisvsHo8rCjTJ5bA4nN0stiNswXhksQxLpdcowWGxUFghoJVHB-rosFBeK9GP1oPANDBuQQ8NwACIQGIdADqUGQYAMql2pjgBRFbPQiy8EJIkEE3RgqtQsskUk2iIg8nGk2mLUEt0s2NQBlwwGQ9lVAH43CMoBpNLlSXlCoKFDxJjBgHMpTKsPLFcqZhkTmc3HH2HKFUqsCqztdnQxHqyRlY4K6WR6vSYLh9RJ5G5Qy78LHjULlHpQYDwoG9ng73p9vh9fpZG55mzBfsx9sGGQxWHAeKhkJosIwCJH8DG3gBBJWHQvY0vwdgwQTlebuXyeFdYTY1BoptodLo9I6CHj2ewAQku2Ldr2-aZtmSZ5i+byIqClJCAkchfOel6jrcIr5PA5KgQmObJg61IhkAA"},"children":[{"type":"text","value":"TS Playground link","position":{"start":{"line":173,"column":3,"offset":7032},"end":{"line":173,"column":21,"offset":7050}}}],"position":{"start":{"line":173,"column":2,"offset":7031},"end":{"line":173,"column":817,"offset":7846}}}],"position":{"start":{"line":173,"column":1,"offset":7030},"end":{"line":173,"column":818,"offset":7847}}}],"position":{"start":{"line":173,"column":1,"offset":7030},"end":{"line":173,"column":818,"offset":7847}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Polymorphic Components (e.g. with ","position":{"start":{"line":175,"column":4,"offset":7854},"end":{"line":175,"column":38,"offset":7888}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}],"position":{"start":{"line":175,"column":38,"offset":7888},"end":{"line":175,"column":42,"offset":7892}}},{"type":"text","value":" props)","position":{"start":{"line":175,"column":42,"offset":7892},"end":{"line":175,"column":49,"offset":7899}}}],"position":{"start":{"line":175,"column":1,"offset":7851},"end":{"line":175,"column":49,"offset":7899}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"Polymorphic Components\" = passing a component to be rendered, e.g. with ","position":{"start":{"line":177,"column":3,"offset":7905},"end":{"line":177,"column":76,"offset":7978}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}],"position":{"start":{"line":177,"column":76,"offset":7978},"end":{"line":177,"column":80,"offset":7982}}},{"type":"text","value":" props","position":{"start":{"line":177,"column":80,"offset":7982},"end":{"line":177,"column":86,"offset":7988}}}],"position":{"start":{"line":177,"column":3,"offset":7905},"end":{"line":177,"column":86,"offset":7988}}},{"type":"text","value":"\n"}],"position":{"start":{"line":177,"column":1,"offset":7903},"end":{"line":177,"column":86,"offset":7988}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ElementType"}],"position":{"start":{"line":179,"column":1,"offset":7992},"end":{"line":179,"column":14,"offset":8005}}},{"type":"text","value":" is pretty useful to cover most types that can be passed to createElement e.g.","position":{"start":{"line":179,"column":14,"offset":8005},"end":{"line":179,"column":92,"offset":8083}}}],"position":{"start":{"line":179,"column":1,"offset":7992},"end":{"line":179,"column":92,"offset":8083}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"function PassThrough(props: { as: React.ElementType<any> }) {\n    const { as: Component } = props;\n\n    return <Component />;\n}\n"}],"position":{"start":{"line":181,"column":1,"offset":8087},"end":{"line":187,"column":4,"offset":8231}}}],"position":{"start":{"line":181,"column":1,"offset":8087},"end":{"line":187,"column":4,"offset":8231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You might also see this with React Router:","position":{"start":{"line":189,"column":1,"offset":8235},"end":{"line":189,"column":43,"offset":8277}}}],"position":{"start":{"line":189,"column":1,"offset":8235},"end":{"line":189,"column":43,"offset":8277}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const PrivateRoute = ({ component: Component, ...rest }: PrivateRouteProps) => {\n    const { isLoggedIn } = useAuth();\n\n    return isLoggedIn ? <Component {...rest} /> : <Redirect to=\"/\" />;\n};\n"}],"position":{"start":{"line":191,"column":1,"offset":8281},"end":{"line":197,"column":4,"offset":8491}}}],"position":{"start":{"line":191,"column":1,"offset":8281},"end":{"line":197,"column":4,"offset":8491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For more info you can refer to these resources:","position":{"start":{"line":199,"column":1,"offset":8495},"end":{"line":199,"column":48,"offset":8542}}}],"position":{"start":{"line":199,"column":1,"offset":8495},"end":{"line":199,"column":48,"offset":8542}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/polymorphic-react-components/"},"children":[{"type":"text","value":"https://blog.andrewbran.ch/polymorphic-react-components/","position":{"start":{"line":201,"column":3,"offset":8548},"end":{"line":201,"column":59,"offset":8604}}}],"position":{"start":{"line":201,"column":3,"offset":8548},"end":{"line":201,"column":59,"offset":8604}}}],"position":{"start":{"line":201,"column":1,"offset":8546},"end":{"line":201,"column":59,"offset":8604}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/kripod/react-polymorphic-box"},"children":[{"type":"text","value":"https://github.com/kripod/react-polymorphic-box","position":{"start":{"line":202,"column":3,"offset":8608},"end":{"line":202,"column":50,"offset":8655}}}],"position":{"start":{"line":202,"column":3,"offset":8608},"end":{"line":202,"column":50,"offset":8655}}}],"position":{"start":{"line":202,"column":1,"offset":8606},"end":{"line":202,"column":50,"offset":8655}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom"},"children":[{"type":"text","value":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom","position":{"start":{"line":203,"column":3,"offset":8659},"end":{"line":203,"column":124,"offset":8780}}}],"position":{"start":{"line":203,"column":3,"offset":8659},"end":{"line":203,"column":124,"offset":8780}}}],"position":{"start":{"line":203,"column":1,"offset":8657},"end":{"line":203,"column":124,"offset":8780}}},{"type":"text","value":"\n"}],"position":{"start":{"line":201,"column":1,"offset":8546},"end":{"line":203,"column":124,"offset":8780}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/69"},"children":[{"type":"text","value":"Thanks @eps1lon","position":{"start":{"line":205,"column":2,"offset":8785},"end":{"line":205,"column":17,"offset":8800}}}],"position":{"start":{"line":205,"column":1,"offset":8784},"end":{"line":205,"column":97,"offset":8880}}},{"type":"text","value":" and ","position":{"start":{"line":205,"column":97,"offset":8880},"end":{"line":205,"column":102,"offset":8885}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/151"},"children":[{"type":"text","value":"@karol-majewski","position":{"start":{"line":205,"column":103,"offset":8886},"end":{"line":205,"column":118,"offset":8901}}}],"position":{"start":{"line":205,"column":102,"offset":8885},"end":{"line":205,"column":179,"offset":8962}}},{"type":"text","value":" for thoughts!","position":{"start":{"line":205,"column":179,"offset":8962},"end":{"line":205,"column":193,"offset":8976}}}],"position":{"start":{"line":205,"column":1,"offset":8784},"end":{"line":205,"column":193,"offset":8976}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Generic Components","position":{"start":{"line":207,"column":4,"offset":8983},"end":{"line":207,"column":22,"offset":9001}}}],"position":{"start":{"line":207,"column":1,"offset":8980},"end":{"line":207,"column":22,"offset":9001}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just as you can make generic functions and classes in TypeScript, you can also make generic components to take advantage of the type system for reusable type safety. Both Props and State can take advantage of the same generic types, although it probably makes more sense for Props than for State. You can then use the generic type to annotate types of any variables defined inside your function / class scope.","position":{"start":{"line":209,"column":1,"offset":9005},"end":{"line":209,"column":410,"offset":9414}}}],"position":{"start":{"line":209,"column":1,"offset":9005},"end":{"line":209,"column":410,"offset":9414}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\nfunction List<T>(props: Props<T>) {\n    const { items, renderItem } = props;\n    const [state, setState] = React.useState<T[]>([]); // You can use type T in List function scope.\n    return (\n        <div>\n            {items.map(renderItem)}\n            <button onClick={() => setState(items)}>Clone</button>\n            {JSON.stringify(state, null, 2)}\n        </div>\n    );\n}\n"}],"position":{"start":{"line":211,"column":1,"offset":9418},"end":{"line":227,"column":4,"offset":9906}}}],"position":{"start":{"line":211,"column":1,"offset":9418},"end":{"line":227,"column":4,"offset":9906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can then use the generic components and get nice type safety through type inference:","position":{"start":{"line":229,"column":1,"offset":9910},"end":{"line":229,"column":89,"offset":9998}}}],"position":{"start":{"line":229,"column":1,"offset":9910},"end":{"line":229,"column":89,"offset":9998}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"ReactDOM.render(\n    <List\n        items={['a', 'b']} // type of 'string' inferred\n        renderItem={(item) => (\n            <li key={item}>\n                {/* Error: Property 'toPrecision' does not exist on type 'string'. */}\n                {item.toPrecision(3)}\n            </li>\n        )}\n    />,\n    document.body\n);\n"}],"position":{"start":{"line":231,"column":1,"offset":10002},"end":{"line":244,"column":4,"offset":10351}}}],"position":{"start":{"line":231,"column":1,"offset":10002},"end":{"line":244,"column":4,"offset":10351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As of ","position":{"start":{"line":246,"column":1,"offset":10355},"end":{"line":246,"column":7,"offset":10361}}},{"type":"element","tagName":"a","properties":{"href":"#typescript-29"},"children":[{"type":"text","value":"TS 2.9","position":{"start":{"line":246,"column":8,"offset":10362},"end":{"line":246,"column":14,"offset":10368}}}],"position":{"start":{"line":246,"column":7,"offset":10361},"end":{"line":246,"column":31,"offset":10385}}},{"type":"text","value":", you can also supply the type parameter in your JSX to opt out of type inference:","position":{"start":{"line":246,"column":31,"offset":10385},"end":{"line":246,"column":113,"offset":10467}}}],"position":{"start":{"line":246,"column":1,"offset":10355},"end":{"line":246,"column":113,"offset":10467}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"ReactDOM.render(\n    <List<number>\n        items={['a', 'b']} // Error: Type 'string' is not assignable to type 'number'.\n        renderItem={(item) => <li key={item}>{item.toPrecision(3)}</li>}\n    />,\n    document.body\n);\n"}],"position":{"start":{"line":248,"column":1,"offset":10471},"end":{"line":256,"column":4,"offset":10713}}}],"position":{"start":{"line":248,"column":1,"offset":10471},"end":{"line":256,"column":4,"offset":10713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also use Generics using fat arrow function style:","position":{"start":{"line":258,"column":1,"offset":10717},"end":{"line":258,"column":58,"offset":10774}}}],"position":{"start":{"line":258,"column":1,"offset":10717},"end":{"line":258,"column":58,"offset":10774}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\n\n// Note the <T extends unknown> before the function definition.\n// You can't use just `<T>` as it will confuse the TSX parser whether it's a JSX tag or a Generic Declaration.\n// You can also use <T,> https://github.com/microsoft/TypeScript/issues/15713#issuecomment-499474386\nconst List = <T extends unknown>(props: Props<T>) => {\n    const { items, renderItem } = props;\n    const [state, setState] = React.useState<T[]>([]); // You can use type T in List function scope.\n    return (\n        <div>\n            {items.map(renderItem)}\n            <button onClick={() => setState(items)}>Clone</button>\n            {JSON.stringify(state, null, 2)}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":260,"column":1,"offset":10778},"end":{"line":280,"column":4,"offset":11567}}}],"position":{"start":{"line":260,"column":1,"offset":10778},"end":{"line":280,"column":4,"offset":11567}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The same for using classes: (Credit: ","position":{"start":{"line":282,"column":1,"offset":11571},"end":{"line":282,"column":38,"offset":11608}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/WrocTypeScript/status/1163234064343736326"},"children":[{"type":"text","value":"Karol Majewski","position":{"start":{"line":282,"column":39,"offset":11609},"end":{"line":282,"column":53,"offset":11623}}}],"position":{"start":{"line":282,"column":38,"offset":11608},"end":{"line":282,"column":117,"offset":11687}}},{"type":"text","value":"'s ","position":{"start":{"line":282,"column":117,"offset":11687},"end":{"line":282,"column":120,"offset":11690}}},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/karol-majewski/befaf05af73c7cb3248b4e084ae5df71"},"children":[{"type":"text","value":"gist","position":{"start":{"line":282,"column":121,"offset":11691},"end":{"line":282,"column":125,"offset":11695}}}],"position":{"start":{"line":282,"column":120,"offset":11690},"end":{"line":282,"column":199,"offset":11769}}},{"type":"text","value":")","position":{"start":{"line":282,"column":199,"offset":11769},"end":{"line":282,"column":200,"offset":11770}}}],"position":{"start":{"line":282,"column":1,"offset":11571},"end":{"line":282,"column":200,"offset":11770}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\n\ninterface State<T> {\n    items: T[];\n}\n\nclass List<T> extends React.PureComponent<Props<T>, State<T>> {\n    // You can use type T inside List class.\n    state: Readonly<State<T>> = {\n        items: []\n    };\n    render() {\n        const { items, renderItem } = this.props;\n        // You can use type T inside List class.\n        const clone: T[] = items.slice(0);\n        return (\n            <div>\n                {items.map(renderItem)}\n                <button onClick={() => this.setState({ items: clone })}>Clone</button>\n                {JSON.stringify(this.state, null, 2)}\n            </div>\n        );\n    }\n}\n"}],"position":{"start":{"line":284,"column":1,"offset":11774},"end":{"line":312,"column":4,"offset":12517}}}],"position":{"start":{"line":284,"column":1,"offset":11774},"end":{"line":312,"column":4,"offset":12517}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Though you can't use Generic Type Parameters for Static Members:","position":{"start":{"line":314,"column":1,"offset":12521},"end":{"line":314,"column":65,"offset":12585}}}],"position":{"start":{"line":314,"column":1,"offset":12521},"end":{"line":314,"column":65,"offset":12585}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"class List<T> extends React.PureComponent<Props<T>, State<T>> {\n    // Static members cannot reference class type parameters.ts(2302)\n    static getDerivedStateFromProps(props: Props<T>, state: State<T>) {\n        return { items: props.items };\n    }\n}\n"}],"position":{"start":{"line":316,"column":1,"offset":12589},"end":{"line":323,"column":4,"offset":12859}}}],"position":{"start":{"line":316,"column":1,"offset":12589},"end":{"line":323,"column":4,"offset":12859}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To fix this you need to convert your static function to a type inferred function:","position":{"start":{"line":325,"column":1,"offset":12863},"end":{"line":325,"column":82,"offset":12944}}}],"position":{"start":{"line":325,"column":1,"offset":12863},"end":{"line":325,"column":82,"offset":12944}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"class List<T> extends React.PureComponent<Props<T>, State<T>> {\n    static getDerivedStateFromProps<T>(props: Props<T>, state: State<T>) {\n        return { items: props.items };\n    }\n}\n"}],"position":{"start":{"line":327,"column":1,"offset":12948},"end":{"line":333,"column":4,"offset":13150}}}],"position":{"start":{"line":327,"column":1,"offset":12948},"end":{"line":333,"column":4,"offset":13150}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Generic components with children","position":{"start":{"line":335,"column":5,"offset":13158},"end":{"line":335,"column":37,"offset":13190}}}],"position":{"start":{"line":335,"column":1,"offset":13154},"end":{"line":335,"column":37,"offset":13190}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":337,"column":1,"offset":13194},"end":{"line":337,"column":11,"offset":13204}}},{"type":"text","value":" is usually not defined as a part of the props type. Unless ","position":{"start":{"line":337,"column":11,"offset":13204},"end":{"line":337,"column":71,"offset":13264}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":337,"column":71,"offset":13264},"end":{"line":337,"column":81,"offset":13274}}},{"type":"text","value":" are explicitly defined as a part of the ","position":{"start":{"line":337,"column":81,"offset":13274},"end":{"line":337,"column":122,"offset":13315}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props"}],"position":{"start":{"line":337,"column":122,"offset":13315},"end":{"line":337,"column":129,"offset":13322}}},{"type":"text","value":" type, an attempt to use ","position":{"start":{"line":337,"column":129,"offset":13322},"end":{"line":337,"column":154,"offset":13347}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props.children"}],"position":{"start":{"line":337,"column":154,"offset":13347},"end":{"line":337,"column":170,"offset":13363}}},{"type":"text","value":" in JSX or in the function body will fail:","position":{"start":{"line":337,"column":170,"offset":13363},"end":{"line":337,"column":212,"offset":13405}}}],"position":{"start":{"line":337,"column":1,"offset":13194},"end":{"line":337,"column":212,"offset":13405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n}\n\n/* Property 'children' does not exist on type 'WrapperProps<T>'. */\nconst Wrapper = <T extends {}>(props: WrapperProps<T>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n\n/*\nType '{ children: string; item: string; renderItem: (item: string) => string; }' is not assignable to type 'IntrinsicAttributes & WrapperProps<string>'.\n  Property 'children' does not exist on type 'IntrinsicAttributes & WrapperProps<string>'.\n*/\n\nconst wrapper = (\n    <Wrapper item=\"test\" renderItem={(item) => item}>\n        {test}\n    </Wrapper>\n);\n"}],"position":{"start":{"line":339,"column":1,"offset":13409},"end":{"line":365,"column":4,"offset":14144}}}],"position":{"start":{"line":339,"column":1,"offset":13409},"end":{"line":365,"column":4,"offset":14144}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoC4AOxiSk3STgHUoUwx6AFHMAZwA8AFQB8cAN4U4cYHRAAuOMIDc0uEWoATegEl5SgBRyki5QEo4AXnHJ0MAHR2MAOQg615GWgAWwADZamkrOjqFuHhQAvhQUAPQAVHC8EFywAJ4EvgFBSNT4cFoQSPxw1BDwSAAewPzwENRwMOlcBGwcaSkCIqL4DnAJcRRoDXWs7Jz01nAicNV02qUSUaKGYHz8Su2TUF1CYpY2kupEMACuUI2G6jKCWsAAbqI3MpLrqfwOmjpQ+qZrGwcJhA5hiXleMgk7wEDmygU0YIhgji9ye6nMniinniCQowhazHwEjgcNy1CUdSgNAA5ipZAY4JSaXTvnoGcYGUzqNTDuIubS4FECrUyhU4Ch+PxgNTqCgAEb+ZgwCBNAkEXS0KnUKVoACCMBgVLlZzopQAZOMOjwNoJ+b0HOouvRmlk-PC8gUiiVRZUamMGqrWvgNYaaDr9aHjaa4Bbtp0bXa+hRBrFyCNtfBTfArHBDLyZqjRAAJJD+fwqrPIwvDUbwADuEzS02u4MEcamwKsACIs12NHkfn8QFYJMDrOJgSsXhIs4iZnF21BnuQMUA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":367,"column":2,"offset":14149},"end":{"line":367,"column":35,"offset":14182}}}],"position":{"start":{"line":367,"column":1,"offset":14148},"end":{"line":367,"column":717,"offset":14864}}}],"position":{"start":{"line":367,"column":1,"offset":14148},"end":{"line":367,"column":717,"offset":14864}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To work around that, either add ","position":{"start":{"line":369,"column":1,"offset":14868},"end":{"line":369,"column":33,"offset":14900}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":369,"column":33,"offset":14900},"end":{"line":369,"column":43,"offset":14910}}},{"type":"text","value":" to the ","position":{"start":{"line":369,"column":43,"offset":14910},"end":{"line":369,"column":51,"offset":14918}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"WrapperProps"}],"position":{"start":{"line":369,"column":51,"offset":14918},"end":{"line":369,"column":65,"offset":14932}}},{"type":"text","value":" definition (possibly narrowing down its type, as needed):","position":{"start":{"line":369,"column":65,"offset":14932},"end":{"line":369,"column":123,"offset":14990}}}],"position":{"start":{"line":369,"column":1,"offset":14868},"end":{"line":369,"column":123,"offset":14990}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n    children: string; // The component will only accept a single string child\n}\n\nconst Wrapper = <T extends {}>(props: WrapperProps<T>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":371,"column":1,"offset":14994},"end":{"line":386,"column":4,"offset":15371}}}],"position":{"start":{"line":371,"column":1,"offset":14994},"end":{"line":386,"column":4,"offset":15371}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"or wrap the type of the props in ","position":{"start":{"line":388,"column":1,"offset":15375},"end":{"line":388,"column":34,"offset":15408}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.PropsWithChildren"}],"position":{"start":{"line":388,"column":34,"offset":15408},"end":{"line":388,"column":59,"offset":15433}}},{"type":"text","value":" (this is what ","position":{"start":{"line":388,"column":59,"offset":15433},"end":{"line":388,"column":74,"offset":15448}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.FC<>"}],"position":{"start":{"line":388,"column":74,"offset":15448},"end":{"line":388,"column":86,"offset":15460}}},{"type":"text","value":" does):","position":{"start":{"line":388,"column":86,"offset":15460},"end":{"line":388,"column":93,"offset":15467}}}],"position":{"start":{"line":388,"column":1,"offset":15375},"end":{"line":388,"column":93,"offset":15467}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n}\n\nconst Wrapper = <T extends {}>(props: React.PropsWithChildren<WrapperProps<T>>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":390,"column":1,"offset":15471},"end":{"line":404,"column":4,"offset":15794}}}],"position":{"start":{"line":390,"column":1,"offset":15471},"end":{"line":404,"column":4,"offset":15794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Typing Children","position":{"start":{"line":406,"column":4,"offset":15801},"end":{"line":406,"column":19,"offset":15816}}}],"position":{"start":{"line":406,"column":1,"offset":15798},"end":{"line":406,"column":19,"offset":15816}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some API designs require some restriction on ","position":{"start":{"line":408,"column":1,"offset":15820},"end":{"line":408,"column":46,"offset":15865}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":408,"column":46,"offset":15865},"end":{"line":408,"column":56,"offset":15875}}},{"type":"text","value":" passed to a parent component. It is common to want to enforce these in types, but you should be aware of limitations to this ability.","position":{"start":{"line":408,"column":56,"offset":15875},"end":{"line":408,"column":190,"offset":16009}}}],"position":{"start":{"line":408,"column":1,"offset":15820},"end":{"line":408,"column":190,"offset":16009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CAN Do","position":{"start":{"line":410,"column":5,"offset":16017},"end":{"line":410,"column":20,"offset":16032}}}],"position":{"start":{"line":410,"column":1,"offset":16013},"end":{"line":410,"column":20,"offset":16032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can type the ","position":{"start":{"line":412,"column":1,"offset":16036},"end":{"line":412,"column":18,"offset":16053}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"structure","position":{"start":{"line":412,"column":20,"offset":16055},"end":{"line":412,"column":29,"offset":16064}}}],"position":{"start":{"line":412,"column":18,"offset":16053},"end":{"line":412,"column":31,"offset":16066}}},{"type":"text","value":" of your children: just one child, or a tuple of children.","position":{"start":{"line":412,"column":31,"offset":16066},"end":{"line":412,"column":89,"offset":16124}}}],"position":{"start":{"line":412,"column":1,"offset":16036},"end":{"line":412,"column":89,"offset":16124}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following are valid:","position":{"start":{"line":414,"column":1,"offset":16128},"end":{"line":414,"column":25,"offset":16152}}}],"position":{"start":{"line":414,"column":1,"offset":16128},"end":{"line":414,"column":25,"offset":16152}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type OneChild = React.ReactElement;\ntype TwoChildren = [React.ReactElement, React.ReactElement];\ntype ArrayOfProps = SomeProp[];\ntype NumbersChildren = number[];\ntype TwoNumbersChildren = [number, number];\n"}],"position":{"start":{"line":416,"column":1,"offset":16156},"end":{"line":422,"column":4,"offset":16377}}}],"position":{"start":{"line":416,"column":1,"offset":16156},"end":{"line":422,"column":4,"offset":16377}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>\nDon't forget that you can also use `prop-types` if TS fails you.\n</summary>","position":{"start":{"line":424,"column":1,"offset":16381},"end":{"line":427,"column":11,"offset":16479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"Parent.propTypes = {\n    children: PropTypes.shape({\n        props: PropTypes.shape({\n            // could share `propTypes` to the child\n            value: PropTypes.string.isRequired\n        })\n    }).isRequired\n};\n"}],"position":{"start":{"line":429,"column":1,"offset":16483},"end":{"line":438,"column":4,"offset":16718}}}],"position":{"start":{"line":429,"column":1,"offset":16483},"end":{"line":438,"column":4,"offset":16718}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":440,"column":1,"offset":16722},"end":{"line":440,"column":11,"offset":16732}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CANNOT Do","position":{"start":{"line":442,"column":5,"offset":16740},"end":{"line":442,"column":23,"offset":16758}}}],"position":{"start":{"line":442,"column":1,"offset":16736},"end":{"line":442,"column":23,"offset":16758}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The thing you cannot do is ","position":{"start":{"line":444,"column":1,"offset":16762},"end":{"line":444,"column":28,"offset":16789}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"specify which components","position":{"start":{"line":444,"column":30,"offset":16791},"end":{"line":444,"column":54,"offset":16815}}}],"position":{"start":{"line":444,"column":28,"offset":16789},"end":{"line":444,"column":56,"offset":16817}}},{"type":"text","value":" the children are, e.g. If you want to express the fact that \"React Router ","position":{"start":{"line":444,"column":56,"offset":16817},"end":{"line":444,"column":131,"offset":16892}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Routes>"}],"position":{"start":{"line":444,"column":131,"offset":16892},"end":{"line":444,"column":141,"offset":16902}}},{"type":"text","value":" can only have ","position":{"start":{"line":444,"column":141,"offset":16902},"end":{"line":444,"column":156,"offset":16917}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Route>"}],"position":{"start":{"line":444,"column":156,"offset":16917},"end":{"line":444,"column":165,"offset":16926}}},{"type":"text","value":" as children, nothing else is allowed\" in TypeScript.","position":{"start":{"line":444,"column":165,"offset":16926},"end":{"line":444,"column":218,"offset":16979}}}],"position":{"start":{"line":444,"column":1,"offset":16762},"end":{"line":444,"column":218,"offset":16979}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is because when you write a JSX expression (","position":{"start":{"line":446,"column":1,"offset":16983},"end":{"line":446,"column":50,"offset":17032}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const foo = <MyComponent foo='foo' />"}],"position":{"start":{"line":446,"column":50,"offset":17032},"end":{"line":446,"column":89,"offset":17071}}},{"type":"text","value":"), the resultant type is blackboxed into a generic JSX.Element type. (","position":{"start":{"line":446,"column":89,"offset":17071},"end":{"line":446,"column":159,"offset":17141}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/271"},"children":[{"type":"text","value":"thanks @ferdaber","position":{"start":{"line":446,"column":161,"offset":17143},"end":{"line":446,"column":177,"offset":17159}}}],"position":{"start":{"line":446,"column":160,"offset":17142},"end":{"line":446,"column":238,"offset":17220}}}],"position":{"start":{"line":446,"column":159,"offset":17141},"end":{"line":446,"column":239,"offset":17221}}},{"type":"text","value":")","position":{"start":{"line":446,"column":239,"offset":17221},"end":{"line":446,"column":240,"offset":17222}}}],"position":{"start":{"line":446,"column":1,"offset":16983},"end":{"line":446,"column":240,"offset":17222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Type Narrowing based on Props","position":{"start":{"line":448,"column":4,"offset":17229},"end":{"line":448,"column":33,"offset":17258}}}],"position":{"start":{"line":448,"column":1,"offset":17226},"end":{"line":448,"column":33,"offset":17258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What you want:","position":{"start":{"line":450,"column":1,"offset":17262},"end":{"line":450,"column":15,"offset":17276}}}],"position":{"start":{"line":450,"column":1,"offset":17262},"end":{"line":450,"column":15,"offset":17276}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Usage\nfunction App() {\n    return (\n        <>\n            {/* ðŸ˜Ž All good */}\n            <Button target=\"_blank\" href=\"https://www.google.com\">\n                Test\n            </Button>\n            {/* ðŸ˜­ Error, `disabled` doesnt exist on anchor element */}\n            <Button disabled href=\"x\">\n                Test\n            </Button>\n        </>\n    );\n}\n"}],"position":{"start":{"line":452,"column":1,"offset":17280},"end":{"line":468,"column":4,"offset":17673}}}],"position":{"start":{"line":452,"column":1,"offset":17280},"end":{"line":468,"column":4,"offset":17673}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How to implement: Use ","position":{"start":{"line":470,"column":1,"offset":17677},"end":{"line":470,"column":23,"offset":17699}}},{"type":"element","tagName":"a","properties":{"href":"https://basarat.gitbooks.io/typescript/docs/types/typeGuard.html#user-defined-type-guards"},"children":[{"type":"text","value":"type guards","position":{"start":{"line":470,"column":24,"offset":17700},"end":{"line":470,"column":35,"offset":17711}}}],"position":{"start":{"line":470,"column":23,"offset":17699},"end":{"line":470,"column":127,"offset":17803}}},{"type":"text","value":"!","position":{"start":{"line":470,"column":127,"offset":17803},"end":{"line":470,"column":128,"offset":17804}}}],"position":{"start":{"line":470,"column":1,"offset":17677},"end":{"line":470,"column":128,"offset":17804}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Button props\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    href?: undefined;\n};\n\n// Anchor props\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n    href?: string;\n};\n\n// Input/output options\ntype Overload = {\n    (props: ButtonProps): JSX.Element;\n    (props: AnchorProps): JSX.Element;\n};\n\n// Guard to check if href exists in props\nconst hasHref = (props: ButtonProps | AnchorProps): props is AnchorProps => 'href' in props;\n\n// Component\nconst Button: Overload = (props: ButtonProps | AnchorProps) => {\n    // anchor render\n    if (hasHref(props)) return <a {...props} />;\n    // button render\n    return <button {...props} />;\n};\n"}],"position":{"start":{"line":472,"column":1,"offset":17808},"end":{"line":499,"column":4,"offset":18530}}}],"position":{"start":{"line":472,"column":1,"offset":17808},"end":{"line":499,"column":4,"offset":18530}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoAekrgCEBXGGCAOzjBzAGcKYBPMEjqNmLAAqcucALyJiMAHQMmrABIAVALIAZAIJMowAEaMkXADwady0QFEANkhBIWMAHxwAZHADeFOHAAFkSYAPwAXHD0LAAmSJjALEgxANwUAL5p5BTUcLosaIHQ7JK8AkL5hdASENwycuiKlUVQVnoGxqYWbc3QDk4u7l6+-kEhEXBcMIYsAOZZmRQ5NACSLGCMlBCMG-C1MMCsPOT8gnAA8gBuSFD2ECgx9X7kAQAUHLVckTasNdwAlJEAFIAZQAGgp+s5XFk3h9uJFelA-lxAXBQRCoYMFlllnAAOL0FBQR7MOCFJBoADWcGAmDG8TgSAAHsAplJEiVPhQ0Ed4IEUFxVCF6u9JN8RL9JHAAD55AotFFo+EcqRIlEyNyjABEwXi2tpbBVuKoNAAwrhIElXDy+cIVCxIlcbncHqKVRKHRq5erJP9NSMXnBcigFcUiLEbqM6XBXgKhSExZ9-v6iDB6FA2OYUL4FHmVelg25YcGaCYHXAI3EoKM0xms+XRLn85JC5RixkTbkAKpcFCzJAUTDRDCHNi6MBgV7+54BOuZ2OjALmLVBgIBHyUABUcEAvBuAOD28vZ7HBZhAII8t5R0kv1+YfmwYMSBzBpNqAPpGeyhqkGvWYN9AiYBFqAAd3AhQzwgWZHAUXkQG1Vd12QuB1DMGBb2XSgHyQlDNx3XdAFo9uBbCgHAoAAGjgAADGI2RQL9kmouAYggMxXCZVkpjgVg4FDKooCZRxoXgK8bzXO8HxY+jGMef832ZRDMPXNCpmU8xsMlFhcKw3D-gWIA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":501,"column":2,"offset":18535},"end":{"line":501,"column":35,"offset":18568}}}],"position":{"start":{"line":501,"column":1,"offset":18534},"end":{"line":501,"column":944,"offset":19477}}}],"position":{"start":{"line":501,"column":1,"offset":18534},"end":{"line":501,"column":944,"offset":19477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Components, and JSX in general, are analogous to functions. When a component can render differently based on their props, it's similar to how a function can be overloaded to have multiple call signatures. In the same way, you can overload a function component's call signature to list all of its different \"versions\".","position":{"start":{"line":503,"column":1,"offset":19481},"end":{"line":503,"column":318,"offset":19798}}}],"position":{"start":{"line":503,"column":1,"offset":19481},"end":{"line":503,"column":318,"offset":19798}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A very common use case for this is to render something as either a button or an anchor, based on if it receives a ","position":{"start":{"line":505,"column":1,"offset":19802},"end":{"line":505,"column":115,"offset":19916}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"href"}],"position":{"start":{"line":505,"column":115,"offset":19916},"end":{"line":505,"column":121,"offset":19922}}},{"type":"text","value":" attribute.","position":{"start":{"line":505,"column":121,"offset":19922},"end":{"line":505,"column":132,"offset":19933}}}],"position":{"start":{"line":505,"column":1,"offset":19802},"end":{"line":505,"column":132,"offset":19933}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type ButtonProps = JSX.IntrinsicElements['button'];\ntype AnchorProps = JSX.IntrinsicElements['a'];\n\n// optionally use a custom type guard\nfunction isPropsForAnchorElement(props: ButtonProps | AnchorProps): props is AnchorProps {\n    return 'href' in props;\n}\n\nfunction Clickable(props: ButtonProps | AnchorProps) {\n    if (isPropsForAnchorElement(props)) {\n        return <a {...props} />;\n    } else {\n        return <button {...props} />;\n    }\n}\n"}],"position":{"start":{"line":507,"column":1,"offset":19937},"end":{"line":523,"column":4,"offset":20412}}}],"position":{"start":{"line":507,"column":1,"offset":19937},"end":{"line":523,"column":4,"offset":20412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"They don't even need to be completely different props, as long as they have at least one difference in properties:","position":{"start":{"line":525,"column":1,"offset":20416},"end":{"line":525,"column":115,"offset":20530}}}],"position":{"start":{"line":525,"column":1,"offset":20416},"end":{"line":525,"column":115,"offset":20530}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type LinkProps = Omit<JSX.IntrinsicElements['a'], 'href'> & { to?: string };\n\nfunction RouterLink(props: LinkProps | AnchorProps) {\n    if ('href' in props) {\n        return <a {...props} />;\n    } else {\n        return <Link {...props} />;\n    }\n}\n"}],"position":{"start":{"line":527,"column":1,"offset":20534},"end":{"line":537,"column":4,"offset":20803}}}],"position":{"start":{"line":527,"column":1,"offset":20534},"end":{"line":537,"column":4,"offset":20803}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary><b>Approach: Generic Components</b></summary>","position":{"start":{"line":539,"column":1,"offset":20807},"end":{"line":540,"column":57,"offset":20874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is an example solution, see the further discussion for other solutions. ","position":{"start":{"line":542,"column":1,"offset":20878},"end":{"line":542,"column":78,"offset":20955}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks to ","position":{"start":{"line":542,"column":79,"offset":20956},"end":{"line":542,"column":89,"offset":20966}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/12#issuecomment-394440577"},"children":[{"type":"text","value":"@jpavon","position":{"start":{"line":542,"column":90,"offset":20967},"end":{"line":542,"column":97,"offset":20974}}}],"position":{"start":{"line":542,"column":89,"offset":20966},"end":{"line":542,"column":202,"offset":21079}}}],"position":{"start":{"line":542,"column":78,"offset":20955},"end":{"line":542,"column":203,"offset":21080}}}],"position":{"start":{"line":542,"column":1,"offset":20878},"end":{"line":542,"column":203,"offset":21080}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface LinkProps {}\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement>;\ntype RouterLinkProps = Omit<NavLinkProps, 'href'>;\n\nconst Link = <T extends {}>(props: LinkProps & T extends RouterLinkProps ? RouterLinkProps : AnchorProps) => {\n    if ((props as RouterLinkProps).to) {\n        return <NavLink {...(props as RouterLinkProps)} />;\n    } else {\n        return <a {...(props as AnchorProps)} />;\n    }\n};\n\n<Link<RouterLinkProps> to=\"/\">My link</Link>; // ok\n<Link<AnchorProps> href=\"/\">My link</Link>; // ok\n<Link<RouterLinkProps> to=\"/\" href=\"/\">\n    My link\n</Link>; // error\n"}],"position":{"start":{"line":544,"column":1,"offset":21084},"end":{"line":562,"column":4,"offset":21710}}}],"position":{"start":{"line":544,"column":1,"offset":21084},"end":{"line":562,"column":4,"offset":21710}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":564,"column":1,"offset":21714},"end":{"line":564,"column":11,"offset":21724}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary><b>Approach: Composition</b></summary>","position":{"start":{"line":566,"column":1,"offset":21728},"end":{"line":567,"column":50,"offset":21788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you want to conditionally render a component, sometimes is better to use ","position":{"start":{"line":569,"column":1,"offset":21792},"end":{"line":569,"column":77,"offset":21868}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/composition-vs-inheritance.html"},"children":[{"type":"text","value":"React's composition model","position":{"start":{"line":569,"column":78,"offset":21869},"end":{"line":569,"column":103,"offset":21894}}}],"position":{"start":{"line":569,"column":77,"offset":21868},"end":{"line":569,"column":162,"offset":21953}}},{"type":"text","value":" to have simpler components and better to understand typings:","position":{"start":{"line":569,"column":162,"offset":21953},"end":{"line":569,"column":223,"offset":22014}}}],"position":{"start":{"line":569,"column":1,"offset":21792},"end":{"line":569,"column":223,"offset":22014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement>;\ntype RouterLinkProps = Omit<AnchorProps, 'href'>;\n\ninterface Button {\n    as: React.ComponentClass | 'a';\n}\n\nconst Button: React.FunctionComponent<Button> = (props) => {\n    const { as: Component, children, ...rest } = props;\n    return (\n        <Component className=\"button\" {...rest}>\n            {children}\n        </Component>\n    );\n};\n\nconst AnchorButton: React.FunctionComponent<AnchorProps> = (props) => <Button as=\"a\" {...props} />;\n\nconst LinkButton: React.FunctionComponent<RouterLinkProps> = (props) => <Button as={NavLink} {...props} />;\n\n<LinkButton to=\"/login\">Login</LinkButton>;\n<AnchorButton href=\"/login\">Login</AnchorButton>;\n<AnchorButton href=\"/login\" to=\"/test\">\n    Login\n</AnchorButton>; // Error: Property 'to' does not exist on type...\n"}],"position":{"start":{"line":571,"column":1,"offset":22018},"end":{"line":597,"column":4,"offset":22884}}}],"position":{"start":{"line":571,"column":1,"offset":22018},"end":{"line":597,"column":4,"offset":22884}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":599,"column":1,"offset":22888},"end":{"line":599,"column":11,"offset":22898}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may also want to use Discriminated Unions, please check out ","position":{"start":{"line":601,"column":1,"offset":22902},"end":{"line":601,"column":65,"offset":22966}}},{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/expressive-react-component-apis-with-discriminated-unions/"},"children":[{"type":"text","value":"Expressive React Component APIs with Discriminated Unions","position":{"start":{"line":601,"column":66,"offset":22967},"end":{"line":601,"column":123,"offset":23024}}}],"position":{"start":{"line":601,"column":65,"offset":22966},"end":{"line":601,"column":211,"offset":23112}}},{"type":"text","value":".","position":{"start":{"line":601,"column":211,"offset":23112},"end":{"line":601,"column":212,"offset":23113}}}],"position":{"start":{"line":601,"column":1,"offset":22902},"end":{"line":601,"column":212,"offset":23113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is a brief intuition for ","position":{"start":{"line":603,"column":1,"offset":23117},"end":{"line":603,"column":31,"offset":23147}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Discriminated Union Types","position":{"start":{"line":603,"column":33,"offset":23149},"end":{"line":603,"column":58,"offset":23174}}}],"position":{"start":{"line":603,"column":31,"offset":23147},"end":{"line":603,"column":60,"offset":23176}}},{"type":"text","value":":","position":{"start":{"line":603,"column":60,"offset":23176},"end":{"line":603,"column":61,"offset":23177}}}],"position":{"start":{"line":603,"column":1,"offset":23117},"end":{"line":603,"column":61,"offset":23177}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type UserTextEvent = {\n    type: 'TextEvent';\n    value: string;\n    target: HTMLInputElement;\n};\ntype UserMouseEvent = {\n    type: 'MouseEvent';\n    value: [number, number];\n    target: HTMLElement;\n};\ntype UserEvent = UserTextEvent | UserMouseEvent;\nfunction handle(event: UserEvent) {\n    if (event.type === 'TextEvent') {\n        event.value; // string\n        event.target; // HTMLInputElement\n        return;\n    }\n    event.value; // [number, number]\n    event.target; // HTMLElement\n}\n"}],"position":{"start":{"line":605,"column":1,"offset":23181},"end":{"line":626,"column":4,"offset":23704}}}],"position":{"start":{"line":605,"column":1,"offset":23181},"end":{"line":626,"column":4,"offset":23704}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Take care: TypeScript does not narrow the type of a Discriminated Union on the basis of typeof checks. The type guard has to be on the value of a key and not it's type.\n  </summary>","position":{"start":{"line":628,"column":1,"offset":23708},"end":{"line":631,"column":13,"offset":23916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type UserTextEvent = { value: string; target: HTMLInputElement };\ntype UserMouseEvent = { value: [number, number]; target: HTMLElement };\ntype UserEvent = UserTextEvent | UserMouseEvent;\nfunction handle(event: UserEvent) {\n    if (typeof event.value === 'string') {\n        event.value; // string\n        event.target; // HTMLInputElement | HTMLElement (!!!!)\n        return;\n    }\n    event.value; // [number, number]\n    event.target; // HTMLInputElement | HTMLElement (!!!!)\n}\n"}],"position":{"start":{"line":633,"column":1,"offset":23920},"end":{"line":646,"column":4,"offset":24422}}}],"position":{"start":{"line":633,"column":1,"offset":23920},"end":{"line":646,"column":4,"offset":24422}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The above example does not work as we are not checking the value of ","position":{"start":{"line":648,"column":1,"offset":24426},"end":{"line":648,"column":69,"offset":24494}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"event.value"}],"position":{"start":{"line":648,"column":69,"offset":24494},"end":{"line":648,"column":82,"offset":24507}}},{"type":"text","value":" but only it's type. Read more about it ","position":{"start":{"line":648,"column":82,"offset":24507},"end":{"line":648,"column":122,"offset":24547}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/microsoft/TypeScript/issues/30506#issuecomment-474858198"},"children":[{"type":"text","value":"microsoft/TypeScript#30506 (comment)","position":{"start":{"line":648,"column":123,"offset":24548},"end":{"line":648,"column":159,"offset":24584}}}],"position":{"start":{"line":648,"column":122,"offset":24547},"end":{"line":648,"column":237,"offset":24662}}}],"position":{"start":{"line":648,"column":1,"offset":24426},"end":{"line":648,"column":237,"offset":24662}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":650,"column":1,"offset":24666},"end":{"line":650,"column":11,"offset":24676}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Discriminated Unions in TypeScript can also work with hook dependencies in React. The type matched is automatically updated when the corresponding union member based on which a hook depends, changes. Expand more to see an example usecase.\n   <br/><br/>\n  </summary>","position":{"start":{"line":652,"column":1,"offset":24680},"end":{"line":656,"column":13,"offset":24973}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type SingleElement = {\n    isArray: true;\n    value: string[];\n};\ntype MultiElement = {\n    isArray: false;\n    value: string;\n};\ntype Props = SingleElement | MultiElement;\nfunction Sequence(p: Props) {\n    return React.useMemo(\n        () => (\n            <div>\n                value(s):\n                {p.isArray && p.value.join(',')}\n                {!p.isArray && p.value}\n            </div>\n        ),\n        [p.isArray, p.value] // TypeScript automatically matches the corresponding value type based on dependency change\n    );\n}\nfunction App() {\n    return (\n        <div>\n            <Sequence isArray={false} value={'foo'} />\n            <Sequence isArray={true} value={['foo', 'bar', 'baz']} />\n        </div>\n    );\n}\n"}],"position":{"start":{"line":658,"column":1,"offset":24977},"end":{"line":688,"column":4,"offset":25748}}}],"position":{"start":{"line":658,"column":1,"offset":24977},"end":{"line":688,"column":4,"offset":25748}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwBQdMAnmFnAArFjoC8dccAD5wA3vwETgqAIJQoyJgC44MKAFcs9CRIBuyADYblqVcAB2AcwDaAXRpxxAgL7jhY7QKmz5SuAQOomo66BkZwJlDmFloSTvS4EGYmcAAacDxwABRgypwQ3ACU6QB8ouKUMGpQZphUMAB0aoEAslggEJnBmUU8pZ0ecAA8ACbAOsXB2nqGWJmoBYqTEiJg9V5yCnAAZFtwq9Ma9QBWEOaZZAA0ZAUuAwIiAISr6z7bu-uhWLcegwD0o+NggULsErM8ZBsmBc9vUDlgbNDfr84AAVFhYVC4SJgeDINQwEjIGDAXAGfRMOAgIm4AAWGJUdLgCTkGMgZlGljgcJU6PEBXocToBDUZnwwEScGkYDA3TKAgqVRq-QkIzGTP0aFQADlkCAsDwAERSsAGiYDQZpF4KHgifz6QJOLmfG1kAgQCBkR2-M0-S0Qnw21QaR1wm1WV3uy7kABGyCgUbIsYAXmQbF6fQI-gCffy6E4gA\">","position":{"start":{"line":690,"column":1,"offset":25752},"end":{"line":690,"column":605,"offset":26356}}},{"type":"raw","value":"<i>","position":{"start":{"line":690,"column":605,"offset":26356},"end":{"line":690,"column":608,"offset":26359}}},{"type":"text","value":"See this in TS Playground","position":{"start":{"line":690,"column":608,"offset":26359},"end":{"line":690,"column":633,"offset":26384}}},{"type":"raw","value":"</i>","position":{"start":{"line":690,"column":633,"offset":26384},"end":{"line":690,"column":637,"offset":26388}}},{"type":"text","value":"\n","position":{"start":{"line":690,"column":637,"offset":26388},"end":{"line":691,"column":1,"offset":26390}}},{"type":"raw","value":"</a>","position":{"start":{"line":691,"column":1,"offset":26390},"end":{"line":691,"column":5,"offset":26394}}}],"position":{"start":{"line":690,"column":1,"offset":25752},"end":{"line":691,"column":5,"offset":26394}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the above example, based on the ","position":{"start":{"line":693,"column":1,"offset":26398},"end":{"line":693,"column":36,"offset":26433}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isArray"}],"position":{"start":{"line":693,"column":36,"offset":26433},"end":{"line":693,"column":45,"offset":26442}}},{"type":"text","value":" union member, the type of the ","position":{"start":{"line":693,"column":45,"offset":26442},"end":{"line":693,"column":76,"offset":26473}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value"}],"position":{"start":{"line":693,"column":76,"offset":26473},"end":{"line":693,"column":83,"offset":26480}}},{"type":"text","value":" hook dependency changes.","position":{"start":{"line":693,"column":83,"offset":26480},"end":{"line":693,"column":108,"offset":26505}}}],"position":{"start":{"line":693,"column":1,"offset":26398},"end":{"line":693,"column":108,"offset":26505}}},{"type":"text","value":"\n"},{"type":"raw","value":" </details>","position":{"start":{"line":695,"column":1,"offset":26509},"end":{"line":695,"column":12,"offset":26520}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To streamline this you may also combine this with the concept of ","position":{"start":{"line":697,"column":1,"offset":26524},"end":{"line":697,"column":66,"offset":26589}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"User-Defined Type Guards","position":{"start":{"line":697,"column":68,"offset":26591},"end":{"line":697,"column":92,"offset":26615}}}],"position":{"start":{"line":697,"column":66,"offset":26589},"end":{"line":697,"column":94,"offset":26617}}},{"type":"text","value":":","position":{"start":{"line":697,"column":94,"offset":26617},"end":{"line":697,"column":95,"offset":26618}}}],"position":{"start":{"line":697,"column":1,"offset":26524},"end":{"line":697,"column":95,"offset":26618}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"function isString(a: unknown): a is string {\n    return typeof a === 'string';\n}\n"}],"position":{"start":{"line":699,"column":1,"offset":26622},"end":{"line":703,"column":4,"offset":26716}}}],"position":{"start":{"line":699,"column":1,"offset":26622},"end":{"line":703,"column":4,"offset":26716}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards"},"children":[{"type":"text","value":"Read more about User-Defined Type Guards in the Handbook","position":{"start":{"line":705,"column":2,"offset":26721},"end":{"line":705,"column":58,"offset":26777}}}],"position":{"start":{"line":705,"column":1,"offset":26720},"end":{"line":705,"column":150,"offset":26869}}},{"type":"text","value":".","position":{"start":{"line":705,"column":150,"offset":26869},"end":{"line":705,"column":151,"offset":26870}}}],"position":{"start":{"line":705,"column":1,"offset":26720},"end":{"line":705,"column":151,"offset":26870}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: One or the Other but not Both","position":{"start":{"line":707,"column":4,"offset":26877},"end":{"line":707,"column":40,"offset":26913}}}],"position":{"start":{"line":707,"column":1,"offset":26874},"end":{"line":707,"column":40,"offset":26913}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":709,"column":1,"offset":26917},"end":{"line":709,"column":9,"offset":26925}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"in"}],"position":{"start":{"line":709,"column":9,"offset":26925},"end":{"line":709,"column":13,"offset":26929}}},{"type":"text","value":" keyword, function overloading, and union types to make components that take either one or another sets of props, but not both:","position":{"start":{"line":709,"column":13,"offset":26929},"end":{"line":709,"column":140,"offset":27056}}}],"position":{"start":{"line":709,"column":1,"offset":26917},"end":{"line":709,"column":140,"offset":27056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type Props1 = { foo: string };\ntype Props2 = { bar: string };\n\nfunction MyComponent(props: Props1 | Props2) {\n    if ('foo' in props) {\n        // props.bar // error\n        return <div>{props.foo}</div>;\n    } else {\n        // props.foo // error\n        return <div>{props.bar}</div>;\n    }\n}\nconst UsageComponent: React.FC = () => (\n    <div>\n        <MyComponent foo=\"foo\" />\n        <MyComponent bar=\"bar\" />\n        {/* <MyComponent foo=\"foo\" bar=\"bar\"/> // invalid */}\n    </div>\n);\n"}],"position":{"start":{"line":711,"column":1,"offset":27060},"end":{"line":731,"column":4,"offset":27580}}}],"position":{"start":{"line":711,"column":1,"offset":27060},"end":{"line":731,"column":4,"offset":27580}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgAUcwBnARjgF44BvOTCBABccFjCjAAdgHM4AXwDcVWvSYRWAJi684AIxRQRYiTPlLK5TAFdJGYBElwAstQDCuSJKSSYACjDMLCJqrBwAPoyBGgCUvBRwcMCYcL4ARAIQqYmOAeossTzxCXAA9CVwuawAdPpQpeVIUDhQRQlEMFZQjgA8ACbAAG4AfDyVLFUZct0l-cPmCXJwSAA2LPSF5MX1FYETgtuNza1w7Z09syNjNQZTM4ND8-IUchRoDmJwAKosKNJI7uAHN4YCJkOgYFUAGKubS+WKcIYpIp9e7HbouAGeYH8QScdKCLIlIZojEeIE+PQGPG1QnEzbFHglABUcHRbjJXgpGTxGSytWpBlSRO2UgGKGWwF6cCZJRe9OmFwo0QUQA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":733,"column":2,"offset":27585},"end":{"line":733,"column":35,"offset":27618}}}],"position":{"start":{"line":733,"column":1,"offset":27584},"end":{"line":733,"column":525,"offset":28108}}}],"position":{"start":{"line":733,"column":1,"offset":27584},"end":{"line":733,"column":525,"offset":28108}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Further reading: ","position":{"start":{"line":735,"column":1,"offset":28112},"end":{"line":735,"column":18,"offset":28129}}},{"type":"element","tagName":"a","properties":{"href":"http://www.javiercasas.com/articles/typescript-impossible-states-irrepresentable"},"children":[{"type":"text","value":"how to ban passing ","position":{"start":{"line":735,"column":19,"offset":28130},"end":{"line":735,"column":38,"offset":28149}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":735,"column":38,"offset":28149},"end":{"line":735,"column":42,"offset":28153}}},{"type":"text","value":" if you have a ","position":{"start":{"line":735,"column":42,"offset":28153},"end":{"line":735,"column":57,"offset":28168}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NoFields"}],"position":{"start":{"line":735,"column":57,"offset":28168},"end":{"line":735,"column":67,"offset":28178}}},{"type":"text","value":" type.","position":{"start":{"line":735,"column":67,"offset":28178},"end":{"line":735,"column":73,"offset":28184}}}],"position":{"start":{"line":735,"column":18,"offset":28129},"end":{"line":735,"column":156,"offset":28267}}}],"position":{"start":{"line":735,"column":1,"offset":28112},"end":{"line":735,"column":156,"offset":28267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Must Pass Both","position":{"start":{"line":737,"column":4,"offset":28274},"end":{"line":737,"column":25,"offset":28295}}}],"position":{"start":{"line":737,"column":1,"offset":28271},"end":{"line":737,"column":25,"offset":28295}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type OneOrAnother<T1, T2> = (T1 & { [K in keyof T2]?: undefined }) | (T2 & { [K in keyof T1]?: undefined });\n\ntype Props = OneOrAnother<{ a: string; b: string }, {}>;\n\nconst a: Props = { a: 'a' }; // error\nconst b: Props = { b: 'b' }; // error\nconst ab: Props = { a: 'a', b: 'b' }; // ok\n"}],"position":{"start":{"line":739,"column":1,"offset":28299},"end":{"line":747,"column":4,"offset":28605}}}],"position":{"start":{"line":739,"column":1,"offset":28299},"end":{"line":747,"column":4,"offset":28605}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thanks ","position":{"start":{"line":749,"column":1,"offset":28609},"end":{"line":749,"column":8,"offset":28616}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/kentcdodds/status/1085655423611367426"},"children":[{"type":"text","value":"diegohaz","position":{"start":{"line":749,"column":9,"offset":28617},"end":{"line":749,"column":17,"offset":28625}}}],"position":{"start":{"line":749,"column":8,"offset":28616},"end":{"line":749,"column":77,"offset":28685}}}],"position":{"start":{"line":749,"column":1,"offset":28609},"end":{"line":749,"column":77,"offset":28685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Pass One ONLY IF the Other Is Passed","position":{"start":{"line":751,"column":4,"offset":28692},"end":{"line":751,"column":47,"offset":28735}}}],"position":{"start":{"line":751,"column":1,"offset":28689},"end":{"line":751,"column":47,"offset":28735}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you want a Text component that gets truncated if ","position":{"start":{"line":753,"column":1,"offset":28739},"end":{"line":753,"column":54,"offset":28792}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"truncate"}],"position":{"start":{"line":753,"column":54,"offset":28792},"end":{"line":753,"column":64,"offset":28802}}},{"type":"text","value":" prop is passed but expands to show the full text when ","position":{"start":{"line":753,"column":64,"offset":28802},"end":{"line":753,"column":119,"offset":28857}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":753,"column":119,"offset":28857},"end":{"line":753,"column":129,"offset":28867}}},{"type":"text","value":" prop is passed (e.g. when the user clicks the text).","position":{"start":{"line":753,"column":129,"offset":28867},"end":{"line":753,"column":182,"offset":28920}}}],"position":{"start":{"line":753,"column":1,"offset":28739},"end":{"line":753,"column":182,"offset":28920}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You want to allow ","position":{"start":{"line":755,"column":1,"offset":28924},"end":{"line":755,"column":19,"offset":28942}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":755,"column":19,"offset":28942},"end":{"line":755,"column":29,"offset":28952}}},{"type":"text","value":" to be passed only if ","position":{"start":{"line":755,"column":29,"offset":28952},"end":{"line":755,"column":51,"offset":28974}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"truncate"}],"position":{"start":{"line":755,"column":51,"offset":28974},"end":{"line":755,"column":61,"offset":28984}}},{"type":"text","value":" is also passed, because there is no use for ","position":{"start":{"line":755,"column":61,"offset":28984},"end":{"line":755,"column":106,"offset":29029}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":755,"column":106,"offset":29029},"end":{"line":755,"column":116,"offset":29039}}},{"type":"text","value":" if the text is not truncated.","position":{"start":{"line":755,"column":116,"offset":29039},"end":{"line":755,"column":146,"offset":29069}}}],"position":{"start":{"line":755,"column":1,"offset":28924},"end":{"line":755,"column":146,"offset":29069}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage example:","position":{"start":{"line":757,"column":1,"offset":29073},"end":{"line":757,"column":15,"offset":29087}}}],"position":{"start":{"line":757,"column":1,"offset":29073},"end":{"line":757,"column":15,"offset":29087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const App: React.FC = () => (\n    <>\n        {/* these all typecheck */}\n        <Text>not truncated</Text>\n        <Text truncate>truncated</Text>\n        <Text truncate expanded>\n            truncate-able but expanded\n        </Text>\n        {/* TS error: Property 'truncate' is missing in type '{ children: string; expanded: true; }' but required in type '{ truncate: true; expanded?: boolean | undefined; }'. */}\n        <Text expanded>truncate-able but expanded</Text>\n    </>\n);\n"}],"position":{"start":{"line":759,"column":1,"offset":29091},"end":{"line":772,"column":4,"offset":29599}}}],"position":{"start":{"line":759,"column":1,"offset":29091},"end":{"line":772,"column":4,"offset":29599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can implement this by function overloads:","position":{"start":{"line":774,"column":1,"offset":29603},"end":{"line":774,"column":46,"offset":29648}}}],"position":{"start":{"line":774,"column":1,"offset":29603},"end":{"line":774,"column":46,"offset":29648}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type CommonProps = {\n    children: React.ReactNode;\n    miscProps?: any;\n};\n\ntype NoTruncateProps = CommonProps & { truncate?: false };\n\ntype TruncateProps = CommonProps & { truncate: true; expanded?: boolean };\n\n// Function overloads to accept both prop types NoTruncateProps & TruncateProps\nfunction Text(props: NoTruncateProps): JSX.Element;\nfunction Text(props: TruncateProps): JSX.Element;\nfunction Text(props: CommonProps & { truncate?: boolean; expanded?: boolean }) {\n    const { children, truncate, expanded, ...otherProps } = props;\n    const classNames = truncate ? '.truncate' : '';\n    return (\n        <div className={classNames} aria-expanded={!!expanded} {...otherProps}>\n            {children}\n        </div>\n    );\n}\n"}],"position":{"start":{"line":776,"column":1,"offset":29652},"end":{"line":798,"column":4,"offset":30419}}}],"position":{"start":{"line":776,"column":1,"offset":29652},"end":{"line":798,"column":4,"offset":30419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Omit prop from a type","position":{"start":{"line":800,"column":4,"offset":30426},"end":{"line":800,"column":32,"offset":30454}}}],"position":{"start":{"line":800,"column":1,"offset":30423},"end":{"line":800,"column":32,"offset":30454}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: ","position":{"start":{"line":802,"column":1,"offset":30458},"end":{"line":802,"column":7,"offset":30464}}},{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittk"},"children":[{"type":"text","value":"Omit was added as a first class utility in TS 3.5","position":{"start":{"line":802,"column":8,"offset":30465},"end":{"line":802,"column":57,"offset":30514}}}],"position":{"start":{"line":802,"column":7,"offset":30464},"end":{"line":802,"column":130,"offset":30587}}},{"type":"text","value":"! ðŸŽ‰","position":{"start":{"line":802,"column":130,"offset":30587},"end":{"line":802,"column":134,"offset":30591}}}],"position":{"start":{"line":802,"column":1,"offset":30458},"end":{"line":802,"column":134,"offset":30591}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes when intersecting types, we want to define our own version of a prop. For example, I want my component to have a ","position":{"start":{"line":804,"column":1,"offset":30595},"end":{"line":804,"column":124,"offset":30718}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":804,"column":124,"offset":30718},"end":{"line":804,"column":131,"offset":30725}}},{"type":"text","value":", but the type I am intersecting with also has a ","position":{"start":{"line":804,"column":131,"offset":30725},"end":{"line":804,"column":180,"offset":30774}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":804,"column":180,"offset":30774},"end":{"line":804,"column":187,"offset":30781}}},{"type":"text","value":" prop. Here's how to extract that out:","position":{"start":{"line":804,"column":187,"offset":30781},"end":{"line":804,"column":225,"offset":30819}}}],"position":{"start":{"line":804,"column":1,"offset":30595},"end":{"line":804,"column":225,"offset":30819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label: React.ReactNode; // this will conflict with the InputElement's label\n}\n\n// this comes inbuilt with TS 3.5\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n// usage\nexport const Checkbox = (props: Props & Omit<React.HTMLProps<HTMLInputElement>, 'label'>) => {\n    const { label } = props;\n    return (\n        <div className=\"Checkbox\">\n            <label className=\"Checkbox-label\">\n                <input type=\"checkbox\" {...props} />\n            </label>\n            <span>{label}</span>\n        </div>\n    );\n};\n"}],"position":{"start":{"line":806,"column":1,"offset":30823},"end":{"line":826,"column":4,"offset":31420}}}],"position":{"start":{"line":806,"column":1,"offset":30823},"end":{"line":826,"column":4,"offset":31420}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When your component defines multiple props, chances of those conflicts increase. However you can explicitly state that all your fields should be removed from the underlying component using the ","position":{"start":{"line":828,"column":1,"offset":31424},"end":{"line":828,"column":194,"offset":31617}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"keyof"}],"position":{"start":{"line":828,"column":194,"offset":31617},"end":{"line":828,"column":201,"offset":31624}}},{"type":"text","value":" operator:","position":{"start":{"line":828,"column":201,"offset":31624},"end":{"line":828,"column":211,"offset":31634}}}],"position":{"start":{"line":828,"column":1,"offset":31424},"end":{"line":828,"column":211,"offset":31634}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label: React.ReactNode; // conflicts with the InputElement's label\n    onChange: (text: string) => void; // conflicts with InputElement's onChange\n}\n\nexport const Textbox = (props: Props & Omit<React.HTMLProps<HTMLInputElement>, keyof Props>) => {\n    // implement Textbox component ...\n};\n"}],"position":{"start":{"line":830,"column":1,"offset":31638},"end":{"line":839,"column":4,"offset":31976}}}],"position":{"start":{"line":830,"column":1,"offset":31638},"end":{"line":839,"column":4,"offset":31976}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you can see from the Omit example above, you can write significant logic in your types as well. ","position":{"start":{"line":841,"column":1,"offset":31980},"end":{"line":841,"column":100,"offset":32079}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/pelotom/type-zoo"},"children":[{"type":"text","value":"type-zoo","position":{"start":{"line":841,"column":101,"offset":32080},"end":{"line":841,"column":109,"offset":32088}}}],"position":{"start":{"line":841,"column":100,"offset":32079},"end":{"line":841,"column":147,"offset":32126}}},{"type":"text","value":" is a nice toolkit of operators you may wish to check out (includes Omit), as well as ","position":{"start":{"line":841,"column":147,"offset":32126},"end":{"line":841,"column":233,"offset":32212}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/piotrwitek/utility-types"},"children":[{"type":"text","value":"utility-types","position":{"start":{"line":841,"column":234,"offset":32213},"end":{"line":841,"column":247,"offset":32226}}}],"position":{"start":{"line":841,"column":233,"offset":32212},"end":{"line":841,"column":293,"offset":32272}}},{"type":"text","value":" (especially for those migrating from Flow).","position":{"start":{"line":841,"column":293,"offset":32272},"end":{"line":841,"column":337,"offset":32316}}}],"position":{"start":{"line":841,"column":1,"offset":31980},"end":{"line":841,"column":337,"offset":32316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Extracting Prop Types of a Component","position":{"start":{"line":843,"column":4,"offset":32323},"end":{"line":843,"column":47,"offset":32366}}}],"position":{"start":{"line":843,"column":1,"offset":32320},"end":{"line":843,"column":47,"offset":32366}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you want the prop types of a component, but it isn't exported.","position":{"start":{"line":845,"column":1,"offset":32370},"end":{"line":845,"column":73,"offset":32442}}}],"position":{"start":{"line":845,"column":1,"offset":32370},"end":{"line":845,"column":73,"offset":32442}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A simple solution is to use ","position":{"start":{"line":847,"column":1,"offset":32446},"end":{"line":847,"column":29,"offset":32474}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ComponentProps"}],"position":{"start":{"line":847,"column":29,"offset":32474},"end":{"line":847,"column":51,"offset":32496}}},{"type":"text","value":":","position":{"start":{"line":847,"column":51,"offset":32496},"end":{"line":847,"column":52,"offset":32497}}}],"position":{"start":{"line":847,"column":1,"offset":32446},"end":{"line":847,"column":52,"offset":32497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// a Modal component defined elsewhere\nconst defaultProps: React.ComponentProps<typeof Modal> = {\n    title: 'Hello World',\n    visible: true,\n    onClick: jest.fn()\n};\n"}],"position":{"start":{"line":849,"column":1,"offset":32501},"end":{"line":856,"column":4,"offset":32687}}}],"position":{"start":{"line":849,"column":1,"offset":32501},"end":{"line":856,"column":4,"offset":32687}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are advanced edge cases if you want to extract the prop types of a component taking into account internal props, ","position":{"start":{"line":858,"column":1,"offset":32691},"end":{"line":858,"column":120,"offset":32810}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"propTypes"}],"position":{"start":{"line":858,"column":120,"offset":32810},"end":{"line":858,"column":131,"offset":32821}}},{"type":"text","value":", and ","position":{"start":{"line":858,"column":131,"offset":32821},"end":{"line":858,"column":137,"offset":32827}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"defaultProps"}],"position":{"start":{"line":858,"column":137,"offset":32827},"end":{"line":858,"column":151,"offset":32841}}},{"type":"text","value":" - ","position":{"start":{"line":858,"column":151,"offset":32841},"end":{"line":858,"column":154,"offset":32844}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/63"},"children":[{"type":"text","value":"check our issue here for helper utilities that resolve these","position":{"start":{"line":858,"column":155,"offset":32845},"end":{"line":858,"column":215,"offset":32905}}}],"position":{"start":{"line":858,"column":154,"offset":32844},"end":{"line":858,"column":275,"offset":32965}}},{"type":"text","value":".","position":{"start":{"line":858,"column":275,"offset":32965},"end":{"line":858,"column":276,"offset":32966}}}],"position":{"start":{"line":858,"column":1,"offset":32691},"end":{"line":858,"column":276,"offset":32966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Render Props","position":{"start":{"line":860,"column":4,"offset":32973},"end":{"line":860,"column":23,"offset":32992}}}],"position":{"start":{"line":860,"column":1,"offset":32970},"end":{"line":860,"column":23,"offset":32992}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advice: Where possible, you should try to use Hooks instead of Render Props. We include this merely for completeness.","position":{"start":{"line":862,"column":3,"offset":32998},"end":{"line":862,"column":120,"offset":33115}}}],"position":{"start":{"line":862,"column":3,"offset":32998},"end":{"line":862,"column":120,"offset":33115}}},{"type":"text","value":"\n"}],"position":{"start":{"line":862,"column":1,"offset":32996},"end":{"line":862,"column":120,"offset":33115}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you will want to write a function that can take a React element or a string or something else as a prop. The best Type to use for such a situation is ","position":{"start":{"line":864,"column":1,"offset":33119},"end":{"line":864,"column":161,"offset":33279}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ReactNode"}],"position":{"start":{"line":864,"column":161,"offset":33279},"end":{"line":864,"column":178,"offset":33296}}},{"type":"text","value":" which fits anywhere a normal, well, React Node would fit:","position":{"start":{"line":864,"column":178,"offset":33296},"end":{"line":864,"column":236,"offset":33354}}}],"position":{"start":{"line":864,"column":1,"offset":33119},"end":{"line":864,"column":236,"offset":33354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label?: React.ReactNode;\n    children: React.ReactNode;\n}\nexport const Card = (props: Props) => {\n    return (\n        <div>\n            {props.label && <div>{props.label}</div>}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":866,"column":1,"offset":33358},"end":{"line":879,"column":4,"offset":33643}}}],"position":{"start":{"line":866,"column":1,"offset":33358},"end":{"line":879,"column":4,"offset":33643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are using a function-as-a-child render prop:","position":{"start":{"line":881,"column":1,"offset":33647},"end":{"line":881,"column":52,"offset":33698}}}],"position":{"start":{"line":881,"column":1,"offset":33647},"end":{"line":881,"column":52,"offset":33698}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    children: (foo: string) => React.ReactNode;\n}\n"}],"position":{"start":{"line":883,"column":1,"offset":33702},"end":{"line":887,"column":4,"offset":33791}}}],"position":{"start":{"line":883,"column":1,"offset":33702},"end":{"line":887,"column":4,"offset":33791}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new/choose"},"children":[{"type":"text","value":"Something to add? File an issue","position":{"start":{"line":889,"column":2,"offset":33796},"end":{"line":889,"column":33,"offset":33827}}}],"position":{"start":{"line":889,"column":1,"offset":33795},"end":{"line":889,"column":123,"offset":33917}}},{"type":"text","value":".","position":{"start":{"line":889,"column":123,"offset":33917},"end":{"line":889,"column":124,"offset":33918}}}],"position":{"start":{"line":889,"column":1,"offset":33795},"end":{"line":889,"column":124,"offset":33918}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Handling Exceptions","position":{"start":{"line":891,"column":4,"offset":33925},"end":{"line":891,"column":23,"offset":33944}}}],"position":{"start":{"line":891,"column":1,"offset":33922},"end":{"line":891,"column":23,"offset":33944}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can provide good information when bad things happen.","position":{"start":{"line":893,"column":1,"offset":33948},"end":{"line":893,"column":57,"offset":34004}}}],"position":{"start":{"line":893,"column":1,"offset":33948},"end":{"line":893,"column":57,"offset":34004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"class InvalidDateFormatError extends RangeError {}\nclass DateIsInFutureError extends RangeError {}\n\n/**\n * // optional docblock\n * @throws {InvalidDateFormatError} The user entered date incorrectly\n * @throws {DateIsInFutureError} The user entered date in future\n *\n */\nfunction parse(date: string) {\n    if (!isValid(date)) throw new InvalidDateFormatError('not a valid date format');\n    if (isInFuture(date)) throw new DateIsInFutureError('date is in the future');\n    // ...\n}\n\ntry {\n    // call parse(date) somewhere\n} catch (e) {\n    if (e instanceof InvalidDateFormatError) {\n        console.error('invalid date format', e);\n    } else if (e instanceof DateIsInFutureError) {\n        console.warn('date is in future', e);\n    } else {\n        throw e;\n    }\n}\n"}],"position":{"start":{"line":895,"column":1,"offset":34008},"end":{"line":922,"column":4,"offset":34811}}}],"position":{"start":{"line":895,"column":1,"offset":34008},"end":{"line":922,"column":4,"offset":34811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BJAOwDcVrgATAERRhIAYtBACAolBxQ4SAB6CW3RghQsA5kknS4AbwC+VWgzj9BTOqyEBXGNaLboshUiUq1mxzIMUKmaywYwBAscMB0AGqcPAAU3AJIAFxwdDBQwBoAlHoUcHBEdlCh8YJwAPxwadZIcMmYnHRIANwUhpTk-oEwwaHhVrb2SHEJyanpWTnkeWghqXAlSAByEADucAC8cCxIa2ZDmS1TcDMsc2j2RCwwextbO6YJw4KZuXCvBfah51Ku1wkAdJoYAAVUD7OAAPnmCWWK0BSBBYJiB1avnIAHoAFSY3KYuDo9FwCBgbohTjzCBoABG1EpAGtcXAAAIwAAWOBWjF0rA4XD4CREUDEMC8+jgwNZNWsjRkvyQRG40NKGRmPww1AAnoyWezVly9hZ+oUtFJoGKJVKZbIrvKkIqFmFQv5jbjcei-AEgiE4GAUFBGk8kik0hl1NldK9gJg4DEAIThKJ8wOZF5HPJsjl3NY86L8wSC4VeGIAIhYEHgKDgvJ4SpqmFEAmLKKOUZjfRYNmNyeyGdWWYe5ksHYGDlNUBLDvCjsqkrgzsGTcOeQJcH+a9R7TSGsmy8JaE41B9foDC2ydFwO0lRFaxwEaFZMaQ4cj0ZiNQyqTUaCQEGjOb5ewFhIY7PmmxyzBA1BIP88rSCWGTVvaCRzg2MDFgANLIzZ5GKSDUI0YSvu+pwwF+P7RgaQ6doMXigXk0wQVB-wrH6LATshU4ZHOI5IBhWFLnAuH4TUEZgb2azNK8bT6EAA"},"children":[{"type":"text","value":"View in TypeScript Playground","position":{"start":{"line":924,"column":2,"offset":34816},"end":{"line":924,"column":31,"offset":34845}}}],"position":{"start":{"line":924,"column":1,"offset":34815},"end":{"line":924,"column":904,"offset":35718}}}],"position":{"start":{"line":924,"column":1,"offset":34815},"end":{"line":924,"column":904,"offset":35718}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Simply throwing an exception is fine, however it would be nice to make TypeScript remind the consumer of your code to handle your exception. We can do that just by returning instead of throwing:","position":{"start":{"line":926,"column":1,"offset":35722},"end":{"line":926,"column":195,"offset":35916}}}],"position":{"start":{"line":926,"column":1,"offset":35722},"end":{"line":926,"column":195,"offset":35916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"function parse(date: string): Date | InvalidDateFormatError | DateIsInFutureError {\n    if (!isValid(date)) return new InvalidDateFormatError('not a valid date format');\n    if (isInFuture(date)) return new DateIsInFutureError('date is in the future');\n    // ...\n}\n\n// now consumer *has* to handle the errors\nlet result = parse('mydate');\nif (result instanceof InvalidDateFormatError) {\n    console.error('invalid date format', result.message);\n} else if (result instanceof DateIsInFutureError) {\n    console.warn('date is in future', result.message);\n} else {\n    /// use result safely\n}\n\n// alternately you can just handle all errors\nif (result instanceof Error) {\n    console.error('error', result);\n} else {\n    /// use result safely\n}\n"}],"position":{"start":{"line":928,"column":1,"offset":35920},"end":{"line":951,"column":4,"offset":36693}}}],"position":{"start":{"line":928,"column":1,"offset":35920},"end":{"line":951,"column":4,"offset":36693}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also describe exceptions with special-purpose data types (don't say monads...) like the ","position":{"start":{"line":953,"column":1,"offset":36697},"end":{"line":953,"column":97,"offset":36793}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Try"}],"position":{"start":{"line":953,"column":97,"offset":36793},"end":{"line":953,"column":102,"offset":36798}}},{"type":"text","value":", ","position":{"start":{"line":953,"column":102,"offset":36798},"end":{"line":953,"column":104,"offset":36800}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option"}],"position":{"start":{"line":953,"column":104,"offset":36800},"end":{"line":953,"column":112,"offset":36808}}},{"type":"text","value":" (or ","position":{"start":{"line":953,"column":112,"offset":36808},"end":{"line":953,"column":117,"offset":36813}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Maybe"}],"position":{"start":{"line":953,"column":117,"offset":36813},"end":{"line":953,"column":124,"offset":36820}}},{"type":"text","value":"), and ","position":{"start":{"line":953,"column":124,"offset":36820},"end":{"line":953,"column":131,"offset":36827}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Either"}],"position":{"start":{"line":953,"column":131,"offset":36827},"end":{"line":953,"column":139,"offset":36835}}},{"type":"text","value":" data types:","position":{"start":{"line":953,"column":139,"offset":36835},"end":{"line":953,"column":151,"offset":36847}}}],"position":{"start":{"line":953,"column":1,"offset":36697},"end":{"line":953,"column":151,"offset":36847}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"interface Option<T> {\n    flatMap<U>(f: (value: T) => None): None;\n    flatMap<U>(f: (value: T) => Option<U>): FormikOption<U>;\n    getOrElse(value: T): T;\n}\nclass Some<T> implements Option<T> {\n    constructor(private value: T) {}\n    flatMap<U>(f: (value: T) => None): None;\n    flatMap<U>(f: (value: T) => Some<U>): Some<U>;\n    flatMap<U>(f: (value: T) => Option<U>): Option<U> {\n        return f(this.value);\n    }\n    getOrElse(): T {\n        return this.value;\n    }\n}\nclass None implements Option<never> {\n    flatMap<U>(): None {\n        return this;\n    }\n    getOrElse<U>(value: U): U {\n        return value;\n    }\n}\n\n// now you can use it like:\nlet result = Option(6) // Some<number>\n    .flatMap((n) => Option(n * 3)) // Some<number>\n    .flatMap((n = new None())) // None\n    .getOrElse(7);\n\n// or:\nlet result = ask() // Option<string>\n    .flatMap(parse) // Option<Date>\n    .flatMap((d) => new Some(d.toISOString())) // Option<string>\n    .getOrElse('error parsing string');\n"}],"position":{"start":{"line":955,"column":1,"offset":36851},"end":{"line":992,"column":4,"offset":37888}}}],"position":{"start":{"line":955,"column":1,"offset":36851},"end":{"line":992,"column":4,"offset":37888}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":993,"column":1,"offset":37890}}}}