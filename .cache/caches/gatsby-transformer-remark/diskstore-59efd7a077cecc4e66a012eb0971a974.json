{"expireTime":9007200904306550000,"key":"transformer-remark-markdown-html-ast-0028f73ef7c2a50a39e8fff83ed8280c--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Array.prototype.reduce()","position":{"start":{"line":3,"column":3,"offset":4},"end":{"line":3,"column":27,"offset":28}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":27,"offset":28}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1,"offset":30},"end":{"line":5,"column":5,"offset":34}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":5,"column":5,"offset":34},"end":{"line":5,"column":15,"offset":44}}},{"type":"text","value":" method executes a ","position":{"start":{"line":5,"column":15,"offset":44},"end":{"line":5,"column":34,"offset":63}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"reducer","position":{"start":{"line":5,"column":36,"offset":65},"end":{"line":5,"column":43,"offset":72}}}],"position":{"start":{"line":5,"column":34,"offset":63},"end":{"line":5,"column":45,"offset":74}}},{"type":"text","value":" function (that you provide) on each element of the array, resulting in a single output value.","position":{"start":{"line":5,"column":45,"offset":74},"end":{"line":5,"column":139,"offset":168}}}],"position":{"start":{"line":5,"column":1,"offset":30},"end":{"line":5,"column":139,"offset":168}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":7,"column":1,"offset":170},"end":{"line":7,"column":5,"offset":174}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"reducer","position":{"start":{"line":7,"column":7,"offset":176},"end":{"line":7,"column":14,"offset":183}}}],"position":{"start":{"line":7,"column":5,"offset":174},"end":{"line":7,"column":16,"offset":185}}},{"type":"text","value":" function takes four arguments:","position":{"start":{"line":7,"column":16,"offset":185},"end":{"line":7,"column":47,"offset":216}}}],"position":{"start":{"line":7,"column":1,"offset":170},"end":{"line":7,"column":47,"offset":216}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Accumulator","position":{"start":{"line":9,"column":5,"offset":222},"end":{"line":9,"column":16,"offset":233}}}],"position":{"start":{"line":9,"column":1,"offset":218},"end":{"line":9,"column":16,"offset":233}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Current Value","position":{"start":{"line":10,"column":5,"offset":238},"end":{"line":10,"column":18,"offset":251}}}],"position":{"start":{"line":10,"column":1,"offset":234},"end":{"line":10,"column":18,"offset":251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Current Index","position":{"start":{"line":11,"column":5,"offset":256},"end":{"line":11,"column":18,"offset":269}}}],"position":{"start":{"line":11,"column":1,"offset":252},"end":{"line":11,"column":18,"offset":269}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Source Array","position":{"start":{"line":12,"column":5,"offset":274},"end":{"line":12,"column":17,"offset":286}}}],"position":{"start":{"line":12,"column":1,"offset":270},"end":{"line":12,"column":17,"offset":286}}},{"type":"text","value":"\n"}],"position":{"start":{"line":9,"column":1,"offset":218},"end":{"line":12,"column":17,"offset":286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Your ","position":{"start":{"line":14,"column":1,"offset":288},"end":{"line":14,"column":6,"offset":293}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"reducer","position":{"start":{"line":14,"column":8,"offset":295},"end":{"line":14,"column":15,"offset":302}}}],"position":{"start":{"line":14,"column":6,"offset":293},"end":{"line":14,"column":17,"offset":304}}},{"type":"text","value":" function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.","position":{"start":{"line":14,"column":17,"offset":304},"end":{"line":14,"column":203,"offset":490}}}],"position":{"start":{"line":14,"column":1,"offset":288},"end":{"line":14,"column":203,"offset":490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Syntax","position":{"start":{"line":16,"column":4,"offset":495},"end":{"line":16,"column":10,"offset":501}}}],"position":{"start":{"line":16,"column":1,"offset":492},"end":{"line":16,"column":10,"offset":501}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// Arrow function\nreduce((accumulator, currentValue) => { ... } )\nreduce((accumulator, currentValue, index) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... }, initialValue)\n\n// Reducer function\nreduce(reducerFn)\nreduce(reducerFn, initialValue)\n\n// Inline reducer function\nreduce(function reducerFn(accumulator, currentValue) { ... })\nreduce(function reducerFn(accumulator, currentValue, index) { ... })\nreduce(function reducerFn(accumulator, currentValue, index, array){ ... })\nreduce(function reducerFn(accumulator, currentValue, index, array) { ... }, initialValue)\n"}],"position":{"start":{"line":18,"column":1,"offset":503},"end":{"line":32,"column":94,"offset":1207}}}],"position":{"start":{"line":18,"column":1,"offset":503},"end":{"line":32,"column":94,"offset":1207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Parameters","position":{"start":{"line":34,"column":5,"offset":1213},"end":{"line":34,"column":15,"offset":1223}}}],"position":{"start":{"line":34,"column":1,"offset":1209},"end":{"line":34,"column":15,"offset":1223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":36,"column":1,"offset":1225},"end":{"line":36,"column":11,"offset":1235}}},{"type":"text","value":"\nA function to execute on each element in the array (except for the first, if no ","position":{"start":{"line":36,"column":11,"offset":1235},"end":{"line":37,"column":81,"offset":1316}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":37,"column":81,"offset":1316},"end":{"line":37,"column":95,"offset":1330}}},{"type":"text","value":" is supplied).","position":{"start":{"line":37,"column":95,"offset":1330},"end":{"line":37,"column":109,"offset":1344}}}],"position":{"start":{"line":36,"column":1,"offset":1225},"end":{"line":37,"column":109,"offset":1344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It takes four arguments:","position":{"start":{"line":39,"column":1,"offset":1346},"end":{"line":39,"column":25,"offset":1370}}}],"position":{"start":{"line":39,"column":1,"offset":1346},"end":{"line":39,"column":25,"offset":1370}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":41,"column":1,"offset":1372},"end":{"line":41,"column":14,"offset":1385}}},{"type":"text","value":"\nThe accumulator accumulates callback's return values. It is the accumulated value previously returned in the last invocation of the callbackâ€”or ","position":{"start":{"line":41,"column":14,"offset":1385},"end":{"line":42,"column":145,"offset":1530}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":42,"column":145,"offset":1530},"end":{"line":42,"column":159,"offset":1544}}},{"type":"text","value":", if it was supplied (see below).","position":{"start":{"line":42,"column":159,"offset":1544},"end":{"line":42,"column":192,"offset":1577}}}],"position":{"start":{"line":41,"column":1,"offset":1372},"end":{"line":42,"column":192,"offset":1577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":44,"column":1,"offset":1579},"end":{"line":44,"column":15,"offset":1593}}},{"type":"text","value":"\nThe current element being processed in the array.","position":{"start":{"line":44,"column":15,"offset":1593},"end":{"line":45,"column":50,"offset":1643}}}],"position":{"start":{"line":44,"column":1,"offset":1579},"end":{"line":45,"column":50,"offset":1643}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"index"}],"position":{"start":{"line":47,"column":1,"offset":1645},"end":{"line":47,"column":8,"offset":1652}}},{"type":"text","value":" ","position":{"start":{"line":47,"column":8,"offset":1652},"end":{"line":47,"column":9,"offset":1653}}},{"type":"raw","value":"<span class=\"badge inline optional\">","position":{"start":{"line":47,"column":9,"offset":1653},"end":{"line":47,"column":45,"offset":1689}}},{"type":"text","value":"Optional","position":{"start":{"line":47,"column":45,"offset":1689},"end":{"line":47,"column":53,"offset":1697}}},{"type":"raw","value":"</span>","position":{"start":{"line":47,"column":53,"offset":1697},"end":{"line":47,"column":60,"offset":1704}}},{"type":"text","value":"\nThe index of the current element being processed in the array. Starts from index ","position":{"start":{"line":47,"column":60,"offset":1704},"end":{"line":48,"column":82,"offset":1786}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":48,"column":82,"offset":1786},"end":{"line":48,"column":85,"offset":1789}}},{"type":"text","value":" if an ","position":{"start":{"line":48,"column":85,"offset":1789},"end":{"line":48,"column":92,"offset":1796}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":48,"column":92,"offset":1796},"end":{"line":48,"column":106,"offset":1810}}},{"type":"text","value":" is provided. Otherwise, it starts from index ","position":{"start":{"line":48,"column":106,"offset":1810},"end":{"line":48,"column":152,"offset":1856}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":48,"column":152,"offset":1856},"end":{"line":48,"column":155,"offset":1859}}},{"type":"text","value":".","position":{"start":{"line":48,"column":155,"offset":1859},"end":{"line":48,"column":156,"offset":1860}}}],"position":{"start":{"line":47,"column":1,"offset":1645},"end":{"line":48,"column":156,"offset":1860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}],"position":{"start":{"line":50,"column":1,"offset":1862},"end":{"line":50,"column":8,"offset":1869}}},{"type":"text","value":" ","position":{"start":{"line":50,"column":8,"offset":1869},"end":{"line":50,"column":9,"offset":1870}}},{"type":"raw","value":"<span class=\"badge inline optional\">","position":{"start":{"line":50,"column":9,"offset":1870},"end":{"line":50,"column":45,"offset":1906}}},{"type":"text","value":"Optional","position":{"start":{"line":50,"column":45,"offset":1906},"end":{"line":50,"column":53,"offset":1914}}},{"type":"raw","value":"</span>","position":{"start":{"line":50,"column":53,"offset":1914},"end":{"line":50,"column":60,"offset":1921}}},{"type":"text","value":"\nThe array ","position":{"start":{"line":50,"column":60,"offset":1921},"end":{"line":51,"column":11,"offset":1932}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":51,"column":11,"offset":1932},"end":{"line":51,"column":21,"offset":1942}}},{"type":"text","value":" was called upon.","position":{"start":{"line":51,"column":21,"offset":1942},"end":{"line":51,"column":38,"offset":1959}}}],"position":{"start":{"line":50,"column":1,"offset":1862},"end":{"line":51,"column":38,"offset":1959}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":53,"column":1,"offset":1961},"end":{"line":53,"column":15,"offset":1975}}},{"type":"text","value":" ","position":{"start":{"line":53,"column":15,"offset":1975},"end":{"line":53,"column":16,"offset":1976}}},{"type":"raw","value":"<span class=\"badge inline optional\">","position":{"start":{"line":53,"column":16,"offset":1976},"end":{"line":53,"column":52,"offset":2012}}},{"type":"text","value":"Optional","position":{"start":{"line":53,"column":52,"offset":2012},"end":{"line":53,"column":60,"offset":2020}}},{"type":"raw","value":"</span>","position":{"start":{"line":53,"column":60,"offset":2020},"end":{"line":53,"column":67,"offset":2027}}},{"type":"text","value":"\nA value to use as the first argument to the first call of the ","position":{"start":{"line":53,"column":67,"offset":2027},"end":{"line":54,"column":63,"offset":2090}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":54,"column":63,"offset":2090},"end":{"line":54,"column":73,"offset":2100}}},{"type":"text","value":". If no ","position":{"start":{"line":54,"column":73,"offset":2100},"end":{"line":54,"column":81,"offset":2108}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":54,"column":81,"offset":2108},"end":{"line":54,"column":95,"offset":2122}}},{"type":"text","value":" is supplied, the first element in the array will be used as the initial ","position":{"start":{"line":54,"column":95,"offset":2122},"end":{"line":54,"column":168,"offset":2195}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":54,"column":168,"offset":2195},"end":{"line":54,"column":181,"offset":2208}}},{"type":"text","value":" value and skipped as ","position":{"start":{"line":54,"column":181,"offset":2208},"end":{"line":54,"column":203,"offset":2230}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":54,"column":203,"offset":2230},"end":{"line":54,"column":217,"offset":2244}}},{"type":"text","value":". Calling ","position":{"start":{"line":54,"column":217,"offset":2244},"end":{"line":54,"column":227,"offset":2254}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":54,"column":227,"offset":2254},"end":{"line":54,"column":237,"offset":2264}}},{"type":"text","value":" on an empty array without an ","position":{"start":{"line":54,"column":237,"offset":2264},"end":{"line":54,"column":267,"offset":2294}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":54,"column":267,"offset":2294},"end":{"line":54,"column":281,"offset":2308}}},{"type":"text","value":" will throw a ","position":{"start":{"line":54,"column":281,"offset":2308},"end":{"line":54,"column":295,"offset":2322}}},{"type":"element","tagName":"a","properties":{"href":"../typeerror"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TypeError"}],"position":{"start":{"line":54,"column":296,"offset":2323},"end":{"line":54,"column":307,"offset":2334}}}],"position":{"start":{"line":54,"column":295,"offset":2322},"end":{"line":54,"column":322,"offset":2349}}},{"type":"text","value":".","position":{"start":{"line":54,"column":322,"offset":2349},"end":{"line":54,"column":323,"offset":2350}}}],"position":{"start":{"line":53,"column":1,"offset":1961},"end":{"line":54,"column":323,"offset":2350}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Return value","position":{"start":{"line":56,"column":5,"offset":2356},"end":{"line":56,"column":17,"offset":2368}}}],"position":{"start":{"line":56,"column":1,"offset":2352},"end":{"line":56,"column":17,"offset":2368}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The single value that results from the reduction.","position":{"start":{"line":58,"column":1,"offset":2370},"end":{"line":58,"column":50,"offset":2419}}}],"position":{"start":{"line":58,"column":1,"offset":2370},"end":{"line":58,"column":50,"offset":2419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Description","position":{"start":{"line":60,"column":4,"offset":2424},"end":{"line":60,"column":15,"offset":2435}}}],"position":{"start":{"line":60,"column":1,"offset":2421},"end":{"line":60,"column":15,"offset":2435}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":62,"column":1,"offset":2437},"end":{"line":62,"column":5,"offset":2441}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":62,"column":5,"offset":2441},"end":{"line":62,"column":15,"offset":2451}}},{"type":"text","value":" method executes the ","position":{"start":{"line":62,"column":15,"offset":2451},"end":{"line":62,"column":36,"offset":2472}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":62,"column":36,"offset":2472},"end":{"line":62,"column":46,"offset":2482}}},{"type":"text","value":" once for each assigned value present in the array, taking four arguments:","position":{"start":{"line":62,"column":46,"offset":2482},"end":{"line":62,"column":120,"offset":2556}}}],"position":{"start":{"line":62,"column":1,"offset":2437},"end":{"line":62,"column":120,"offset":2556}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":64,"column":5,"offset":2562},"end":{"line":64,"column":18,"offset":2575}}}],"position":{"start":{"line":64,"column":1,"offset":2558},"end":{"line":64,"column":18,"offset":2575}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":65,"column":5,"offset":2580},"end":{"line":65,"column":19,"offset":2594}}}],"position":{"start":{"line":65,"column":1,"offset":2576},"end":{"line":65,"column":19,"offset":2594}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentIndex"}],"position":{"start":{"line":66,"column":5,"offset":2599},"end":{"line":66,"column":19,"offset":2613}}}],"position":{"start":{"line":66,"column":1,"offset":2595},"end":{"line":66,"column":19,"offset":2613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"array"}],"position":{"start":{"line":67,"column":5,"offset":2618},"end":{"line":67,"column":12,"offset":2625}}}],"position":{"start":{"line":67,"column":1,"offset":2614},"end":{"line":67,"column":12,"offset":2625}}},{"type":"text","value":"\n"}],"position":{"start":{"line":64,"column":1,"offset":2558},"end":{"line":67,"column":12,"offset":2625}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The first time the callback is called, ","position":{"start":{"line":69,"column":1,"offset":2627},"end":{"line":69,"column":40,"offset":2666}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":69,"column":40,"offset":2666},"end":{"line":69,"column":53,"offset":2679}}},{"type":"text","value":" and ","position":{"start":{"line":69,"column":53,"offset":2679},"end":{"line":69,"column":58,"offset":2684}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":69,"column":58,"offset":2684},"end":{"line":69,"column":72,"offset":2698}}},{"type":"text","value":" can be one of two values. If ","position":{"start":{"line":69,"column":72,"offset":2698},"end":{"line":69,"column":102,"offset":2728}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":69,"column":102,"offset":2728},"end":{"line":69,"column":116,"offset":2742}}},{"type":"text","value":" is provided in the call to ","position":{"start":{"line":69,"column":116,"offset":2742},"end":{"line":69,"column":144,"offset":2770}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":69,"column":144,"offset":2770},"end":{"line":69,"column":154,"offset":2780}}},{"type":"text","value":", then ","position":{"start":{"line":69,"column":154,"offset":2780},"end":{"line":69,"column":161,"offset":2787}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":69,"column":161,"offset":2787},"end":{"line":69,"column":174,"offset":2800}}},{"type":"text","value":" will be equal to ","position":{"start":{"line":69,"column":174,"offset":2800},"end":{"line":69,"column":192,"offset":2818}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":69,"column":192,"offset":2818},"end":{"line":69,"column":206,"offset":2832}}},{"type":"text","value":", and ","position":{"start":{"line":69,"column":206,"offset":2832},"end":{"line":69,"column":212,"offset":2838}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":69,"column":212,"offset":2838},"end":{"line":69,"column":226,"offset":2852}}},{"type":"text","value":" will be equal to the first value in the array. If no ","position":{"start":{"line":69,"column":226,"offset":2852},"end":{"line":69,"column":280,"offset":2906}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":69,"column":280,"offset":2906},"end":{"line":69,"column":294,"offset":2920}}},{"type":"text","value":" is provided, then ","position":{"start":{"line":69,"column":294,"offset":2920},"end":{"line":69,"column":313,"offset":2939}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"accumulator"}],"position":{"start":{"line":69,"column":313,"offset":2939},"end":{"line":69,"column":326,"offset":2952}}},{"type":"text","value":" will be equal to the first value in the array, and ","position":{"start":{"line":69,"column":326,"offset":2952},"end":{"line":69,"column":378,"offset":3004}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"currentValue"}],"position":{"start":{"line":69,"column":378,"offset":3004},"end":{"line":69,"column":392,"offset":3018}}},{"type":"text","value":" will be equal to the second.","position":{"start":{"line":69,"column":392,"offset":3018},"end":{"line":69,"column":421,"offset":3047}}}],"position":{"start":{"line":69,"column":1,"offset":2627},"end":{"line":69,"column":421,"offset":3047}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":71,"column":3,"offset":3051},"end":{"line":71,"column":8,"offset":3056}}}],"position":{"start":{"line":71,"column":1,"offset":3049},"end":{"line":71,"column":10,"offset":3058}}},{"type":"text","value":" If ","position":{"start":{"line":71,"column":10,"offset":3058},"end":{"line":71,"column":14,"offset":3062}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":71,"column":14,"offset":3062},"end":{"line":71,"column":28,"offset":3076}}},{"type":"text","value":" is not provided, ","position":{"start":{"line":71,"column":28,"offset":3076},"end":{"line":71,"column":46,"offset":3094}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":71,"column":46,"offset":3094},"end":{"line":71,"column":56,"offset":3104}}},{"type":"text","value":" will execute the callback function starting at index ","position":{"start":{"line":71,"column":56,"offset":3104},"end":{"line":71,"column":110,"offset":3158}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":71,"column":110,"offset":3158},"end":{"line":71,"column":113,"offset":3161}}},{"type":"text","value":", skipping the first index. If ","position":{"start":{"line":71,"column":113,"offset":3161},"end":{"line":71,"column":144,"offset":3192}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":71,"column":144,"offset":3192},"end":{"line":71,"column":158,"offset":3206}}},{"type":"text","value":" is provided, it will start at index ","position":{"start":{"line":71,"column":158,"offset":3206},"end":{"line":71,"column":195,"offset":3243}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":71,"column":195,"offset":3243},"end":{"line":71,"column":198,"offset":3246}}},{"type":"text","value":".","position":{"start":{"line":71,"column":198,"offset":3246},"end":{"line":71,"column":199,"offset":3247}}}],"position":{"start":{"line":71,"column":1,"offset":3049},"end":{"line":71,"column":199,"offset":3247}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the array is empty and no ","position":{"start":{"line":73,"column":1,"offset":3249},"end":{"line":73,"column":30,"offset":3278}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":73,"column":30,"offset":3278},"end":{"line":73,"column":44,"offset":3292}}},{"type":"text","value":" is provided, ","position":{"start":{"line":73,"column":44,"offset":3292},"end":{"line":73,"column":58,"offset":3306}}},{"type":"element","tagName":"a","properties":{"href":"../typeerror"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"TypeError"}],"position":{"start":{"line":73,"column":59,"offset":3307},"end":{"line":73,"column":70,"offset":3318}}}],"position":{"start":{"line":73,"column":58,"offset":3306},"end":{"line":73,"column":85,"offset":3333}}},{"type":"text","value":" will be thrown.","position":{"start":{"line":73,"column":85,"offset":3333},"end":{"line":73,"column":101,"offset":3349}}}],"position":{"start":{"line":73,"column":1,"offset":3249},"end":{"line":73,"column":101,"offset":3349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the array only has one element (regardless of position) and no ","position":{"start":{"line":75,"column":1,"offset":3351},"end":{"line":75,"column":67,"offset":3417}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":75,"column":67,"offset":3417},"end":{"line":75,"column":81,"offset":3431}}},{"type":"text","value":" is provided, or if ","position":{"start":{"line":75,"column":81,"offset":3431},"end":{"line":75,"column":101,"offset":3451}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":75,"column":101,"offset":3451},"end":{"line":75,"column":115,"offset":3465}}},{"type":"text","value":" is provided but the array is empty, the solo value will be returned ","position":{"start":{"line":75,"column":115,"offset":3465},"end":{"line":75,"column":184,"offset":3534}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"without","position":{"start":{"line":75,"column":185,"offset":3535},"end":{"line":75,"column":192,"offset":3542}}}],"position":{"start":{"line":75,"column":184,"offset":3534},"end":{"line":75,"column":193,"offset":3543}}},{"type":"text","value":" calling ","position":{"start":{"line":75,"column":193,"offset":3543},"end":{"line":75,"column":202,"offset":3552}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callback"}],"position":{"start":{"line":75,"column":203,"offset":3553},"end":{"line":75,"column":213,"offset":3563}}},{"type":"text","value":".","position":{"start":{"line":75,"column":213,"offset":3563},"end":{"line":75,"column":214,"offset":3564}}}],"position":{"start":{"line":75,"column":202,"offset":3552},"end":{"line":75,"column":215,"offset":3565}}}],"position":{"start":{"line":75,"column":1,"offset":3351},"end":{"line":75,"column":215,"offset":3565}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It is almost always safer to provide an ","position":{"start":{"line":77,"column":1,"offset":3567},"end":{"line":77,"column":41,"offset":3607}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":77,"column":41,"offset":3607},"end":{"line":77,"column":55,"offset":3621}}},{"type":"text","value":", because there can be up to ","position":{"start":{"line":77,"column":55,"offset":3621},"end":{"line":77,"column":84,"offset":3650}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"four","position":{"start":{"line":77,"column":85,"offset":3651},"end":{"line":77,"column":89,"offset":3655}}}],"position":{"start":{"line":77,"column":84,"offset":3650},"end":{"line":77,"column":90,"offset":3656}}},{"type":"text","value":" possible output types without ","position":{"start":{"line":77,"column":90,"offset":3656},"end":{"line":77,"column":121,"offset":3687}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":77,"column":121,"offset":3687},"end":{"line":77,"column":135,"offset":3701}}},{"type":"text","value":", as shown in the following example:","position":{"start":{"line":77,"column":135,"offset":3701},"end":{"line":77,"column":171,"offset":3737}}}],"position":{"start":{"line":77,"column":1,"offset":3567},"end":{"line":77,"column":171,"offset":3737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let maxCallback = ( acc, cur ) => Math.max( acc.x, cur.x );\nlet maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce without initialValue\n[ { x: 2 }, { x: 22 }, { x: 42 } ].reduce( maxCallback ); // NaN\n[ { x: 2 }, { x: 22 }            ].reduce( maxCallback ); // 22\n[ { x: 2 }                       ].reduce( maxCallback ); // { x: 2 }\n[                                ].reduce( maxCallback ); // TypeError\n\n// map & reduce with initialValue; better solution, also works for empty or larger arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );\n"}],"position":{"start":{"line":79,"column":1,"offset":3739},"end":{"line":90,"column":64,"offset":4391}}}],"position":{"start":{"line":79,"column":1,"offset":3739},"end":{"line":90,"column":64,"offset":4391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"How reduce() works","position":{"start":{"line":92,"column":5,"offset":4397},"end":{"line":92,"column":23,"offset":4415}}}],"position":{"start":{"line":92,"column":1,"offset":4393},"end":{"line":92,"column":23,"offset":4415}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Suppose the following use of ","position":{"start":{"line":94,"column":1,"offset":4417},"end":{"line":94,"column":30,"offset":4446}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":94,"column":30,"offset":4446},"end":{"line":94,"column":40,"offset":4456}}},{"type":"text","value":" occurred:","position":{"start":{"line":94,"column":40,"offset":4456},"end":{"line":94,"column":50,"offset":4466}}}],"position":{"start":{"line":94,"column":1,"offset":4417},"end":{"line":94,"column":50,"offset":4466}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {\n  return accumulator + currentValue\n})\n"}],"position":{"start":{"line":96,"column":1,"offset":4468},"end":{"line":98,"column":7,"offset":4600}}}],"position":{"start":{"line":96,"column":1,"offset":4468},"end":{"line":98,"column":7,"offset":4600}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The callback would be invoked four times, with the arguments and return values in each call being as follows:","position":{"start":{"line":100,"column":1,"offset":4602},"end":{"line":100,"column":110,"offset":4711}}}],"position":{"start":{"line":100,"column":1,"offset":4602},"end":{"line":100,"column":110,"offset":4711}}},{"type":"text","value":"\n"},{"type":"raw","value":"<table><thead><tr class=\"header\"><th><code>callback</code> iteration</th><th><code>accumulator</code></th><th><code>currentValue</code></th><th><code>currentIndex</code></th><th><code>array</code></th><th>return value</th></tr></thead><tbody><tr class=\"odd\"><td>first call</td><td><code>0</code></td><td><code>1</code></td><td><code>1</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>1</code></td></tr><tr class=\"even\"><td>second call</td><td><code>1</code></td><td><code>2</code></td><td><code>2</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>3</code></td></tr><tr class=\"odd\"><td>third call</td><td><code>3</code></td><td><code>3</code></td><td><code>3</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>6</code></td></tr><tr class=\"even\"><td>fourth call</td><td><code>6</code></td><td><code>4</code></td><td><code>4</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>10</code></td></tr></tbody></table>","position":{"start":{"line":102,"column":1,"offset":4713},"end":{"line":102,"column":940,"offset":5652}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":104,"column":1,"offset":5654},"end":{"line":104,"column":23,"offset":5676}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":104,"column":23,"offset":5676},"end":{"line":104,"column":33,"offset":5686}}},{"type":"text","value":" would be that of the last callback invocation (","position":{"start":{"line":104,"column":33,"offset":5686},"end":{"line":104,"column":81,"offset":5734}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"10"}],"position":{"start":{"line":104,"column":81,"offset":5734},"end":{"line":104,"column":85,"offset":5738}}},{"type":"text","value":").","position":{"start":{"line":104,"column":85,"offset":5738},"end":{"line":104,"column":87,"offset":5740}}}],"position":{"start":{"line":104,"column":1,"offset":5654},"end":{"line":104,"column":87,"offset":5740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also provide an ","position":{"start":{"line":106,"column":1,"offset":5742},"end":{"line":106,"column":25,"offset":5766}}},{"type":"element","tagName":"a","properties":{"href":"../../functions/arrow_functions"},"children":[{"type":"text","value":"Arrow Function","position":{"start":{"line":106,"column":26,"offset":5767},"end":{"line":106,"column":40,"offset":5781}}}],"position":{"start":{"line":106,"column":25,"offset":5766},"end":{"line":106,"column":74,"offset":5815}}},{"type":"text","value":" instead of a full function. The code below will produce the same output as the code in the block above:","position":{"start":{"line":106,"column":74,"offset":5815},"end":{"line":106,"column":178,"offset":5919}}}],"position":{"start":{"line":106,"column":1,"offset":5742},"end":{"line":106,"column":178,"offset":5919}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 1, 2, 3, 4].reduce( (accumulator, currentValue, currentIndex, array) => accumulator + currentValue )\n"}],"position":{"start":{"line":108,"column":1,"offset":5921},"end":{"line":108,"column":109,"offset":6029}}}],"position":{"start":{"line":108,"column":1,"offset":5921},"end":{"line":108,"column":109,"offset":6029}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you were to provide an ","position":{"start":{"line":110,"column":1,"offset":6031},"end":{"line":110,"column":27,"offset":6057}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":110,"column":27,"offset":6057},"end":{"line":110,"column":41,"offset":6071}}},{"type":"text","value":" as the second argument to ","position":{"start":{"line":110,"column":41,"offset":6071},"end":{"line":110,"column":68,"offset":6098}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":110,"column":68,"offset":6098},"end":{"line":110,"column":78,"offset":6108}}},{"type":"text","value":", the result would look like this:","position":{"start":{"line":110,"column":78,"offset":6108},"end":{"line":110,"column":112,"offset":6142}}}],"position":{"start":{"line":110,"column":1,"offset":6031},"end":{"line":110,"column":112,"offset":6142}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => {\n    return accumulator + currentValue\n}, 10)\n"}],"position":{"start":{"line":112,"column":1,"offset":6144},"end":{"line":114,"column":11,"offset":6277}}}],"position":{"start":{"line":112,"column":1,"offset":6144},"end":{"line":114,"column":11,"offset":6277}}},{"type":"text","value":"\n"},{"type":"raw","value":"<table><thead><tr class=\"header\"><th><code>callback</code> iteration</th><th><code>accumulator</code></th><th><code>currentValue</code></th><th><code>currentIndex</code></th><th><code>array</code></th><th>return value</th></tr></thead><tbody><tr class=\"odd\"><td>first call</td><td><code>10</code></td><td><code>0</code></td><td><code>0</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>10</code></td></tr><tr class=\"even\"><td>second call</td><td><code>10</code></td><td><code>1</code></td><td><code>1</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>11</code></td></tr><tr class=\"odd\"><td>third call</td><td><code>11</code></td><td><code>2</code></td><td><code>2</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>13</code></td></tr><tr class=\"even\"><td>fourth call</td><td><code>13</code></td><td><code>3</code></td><td><code>3</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>16</code></td></tr><tr class=\"odd\"><td>fifth call</td><td><code>16</code></td><td><code>4</code></td><td><code>4</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>20</code></td></tr></tbody></table>","position":{"start":{"line":116,"column":1,"offset":6279},"end":{"line":116,"column":1118,"offset":7396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":118,"column":1,"offset":7398},"end":{"line":118,"column":23,"offset":7420}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reduce()"}],"position":{"start":{"line":118,"column":23,"offset":7420},"end":{"line":118,"column":33,"offset":7430}}},{"type":"text","value":" in this case would be ","position":{"start":{"line":118,"column":33,"offset":7430},"end":{"line":118,"column":56,"offset":7453}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"20"}],"position":{"start":{"line":118,"column":56,"offset":7453},"end":{"line":118,"column":60,"offset":7457}}},{"type":"text","value":".","position":{"start":{"line":118,"column":60,"offset":7457},"end":{"line":118,"column":61,"offset":7458}}}],"position":{"start":{"line":118,"column":1,"offset":7398},"end":{"line":118,"column":61,"offset":7458}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Polyfill","position":{"start":{"line":120,"column":4,"offset":7463},"end":{"line":120,"column":12,"offset":7471}}}],"position":{"start":{"line":120,"column":1,"offset":7460},"end":{"line":120,"column":12,"offset":7471}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: https://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' +\n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // Steps 3, 4, 5, 6, 7\n      var k = 0;\n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++;\n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          Â« accumulator, kValue, k, O Â»).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.\n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}\n"}],"position":{"start":{"line":122,"column":1,"offset":7473},"end":{"line":184,"column":6,"offset":9463}}}],"position":{"start":{"line":122,"column":1,"offset":7473},"end":{"line":184,"column":6,"offset":9463}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":186,"column":3,"offset":9467},"end":{"line":186,"column":8,"offset":9472}}}],"position":{"start":{"line":186,"column":1,"offset":9465},"end":{"line":186,"column":10,"offset":9474}}},{"type":"text","value":" If you need to support truly obsolete JavaScript engines that do not support ","position":{"start":{"line":186,"column":10,"offset":9474},"end":{"line":186,"column":88,"offset":9552}}},{"type":"element","tagName":"a","properties":{"href":"../object/defineproperty"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object.defineProperty()"}],"position":{"start":{"line":186,"column":89,"offset":9553},"end":{"line":186,"column":114,"offset":9578}}}],"position":{"start":{"line":186,"column":88,"offset":9552},"end":{"line":186,"column":141,"offset":9605}}},{"type":"text","value":", it is best not to polyfill ","position":{"start":{"line":186,"column":141,"offset":9605},"end":{"line":186,"column":170,"offset":9634}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.prototype"}],"position":{"start":{"line":186,"column":170,"offset":9634},"end":{"line":186,"column":187,"offset":9651}}},{"type":"text","value":" methods at all, as you cannot make them ","position":{"start":{"line":186,"column":187,"offset":9651},"end":{"line":186,"column":228,"offset":9692}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"non-enumerable","position":{"start":{"line":186,"column":230,"offset":9694},"end":{"line":186,"column":244,"offset":9708}}}],"position":{"start":{"line":186,"column":228,"offset":9692},"end":{"line":186,"column":246,"offset":9710}}},{"type":"text","value":".","position":{"start":{"line":186,"column":246,"offset":9710},"end":{"line":186,"column":247,"offset":9711}}}],"position":{"start":{"line":186,"column":1,"offset":9465},"end":{"line":186,"column":247,"offset":9711}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Examples","position":{"start":{"line":188,"column":4,"offset":9716},"end":{"line":188,"column":12,"offset":9724}}}],"position":{"start":{"line":188,"column":1,"offset":9713},"end":{"line":188,"column":12,"offset":9724}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sum all the values of an array","position":{"start":{"line":190,"column":5,"offset":9730},"end":{"line":190,"column":35,"offset":9760}}}],"position":{"start":{"line":190,"column":1,"offset":9726},"end":{"line":190,"column":35,"offset":9760}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let sum = [0, 1, 2, 3].reduce(function (accumulator, currentValue) {\n  return accumulator + currentValue\n}, 0)\n// sum is 6\n"}],"position":{"start":{"line":192,"column":1,"offset":9762},"end":{"line":195,"column":16,"offset":9900}}}],"position":{"start":{"line":192,"column":1,"offset":9762},"end":{"line":195,"column":16,"offset":9900}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":197,"column":1,"offset":9902},"end":{"line":197,"column":46,"offset":9947}}}],"position":{"start":{"line":197,"column":1,"offset":9902},"end":{"line":197,"column":46,"offset":9947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let total = [ 0, 1, 2, 3 ].reduce(\n  ( accumulator, currentValue ) => accumulator + currentValue,\n  0\n)\n"}],"position":{"start":{"line":199,"column":1,"offset":9949},"end":{"line":202,"column":6,"offset":10068}}}],"position":{"start":{"line":199,"column":1,"offset":9949},"end":{"line":202,"column":6,"offset":10068}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Sum of values in an object array","position":{"start":{"line":204,"column":5,"offset":10074},"end":{"line":204,"column":37,"offset":10106}}}],"position":{"start":{"line":204,"column":1,"offset":10070},"end":{"line":204,"column":37,"offset":10106}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To sum up the values contained in an array of objects, you ","position":{"start":{"line":206,"column":1,"offset":10108},"end":{"line":206,"column":60,"offset":10167}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"must","position":{"start":{"line":206,"column":62,"offset":10169},"end":{"line":206,"column":66,"offset":10173}}}],"position":{"start":{"line":206,"column":60,"offset":10167},"end":{"line":206,"column":68,"offset":10175}}},{"type":"text","value":" supply an ","position":{"start":{"line":206,"column":68,"offset":10175},"end":{"line":206,"column":79,"offset":10186}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"initialValue"}],"position":{"start":{"line":206,"column":79,"offset":10186},"end":{"line":206,"column":93,"offset":10200}}},{"type":"text","value":", so that each item passes through your function.","position":{"start":{"line":206,"column":93,"offset":10200},"end":{"line":206,"column":142,"offset":10249}}}],"position":{"start":{"line":206,"column":1,"offset":10108},"end":{"line":206,"column":142,"offset":10249}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(function (accumulator, currentValue) {\n    return accumulator + currentValue.x\n}, initialValue)\n\nconsole.log(sum) // logs 6\n"}],"position":{"start":{"line":208,"column":1,"offset":10251},"end":{"line":213,"column":31,"offset":10457}}}],"position":{"start":{"line":208,"column":1,"offset":10251},"end":{"line":213,"column":31,"offset":10457}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":215,"column":1,"offset":10459},"end":{"line":215,"column":46,"offset":10504}}}],"position":{"start":{"line":215,"column":1,"offset":10459},"end":{"line":215,"column":46,"offset":10504}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(\n    (accumulator, currentValue) => accumulator + currentValue.x\n    , initialValue\n)\n\nconsole.log(sum) // logs 6\n"}],"position":{"start":{"line":217,"column":1,"offset":10506},"end":{"line":223,"column":31,"offset":10706}}}],"position":{"start":{"line":217,"column":1,"offset":10506},"end":{"line":223,"column":31,"offset":10706}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Flatten an array of arrays","position":{"start":{"line":225,"column":5,"offset":10712},"end":{"line":225,"column":31,"offset":10738}}}],"position":{"start":{"line":225,"column":1,"offset":10708},"end":{"line":225,"column":31,"offset":10738}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(accumulator, currentValue) {\n    return accumulator.concat(currentValue)\n  },\n  []\n)\n// flattened is [0, 1, 2, 3, 4, 5]\n"}],"position":{"start":{"line":227,"column":1,"offset":10740},"end":{"line":233,"column":39,"offset":10947}}}],"position":{"start":{"line":227,"column":1,"offset":10740},"end":{"line":233,"column":39,"offset":10947}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":235,"column":1,"offset":10949},"end":{"line":235,"column":46,"offset":10994}}}],"position":{"start":{"line":235,"column":1,"offset":10949},"end":{"line":235,"column":46,"offset":10994}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  ( accumulator, currentValue ) => accumulator.concat(currentValue),\n  []\n)\n"}],"position":{"start":{"line":237,"column":1,"offset":10996},"end":{"line":240,"column":6,"offset":11136}}}],"position":{"start":{"line":237,"column":1,"offset":10996},"end":{"line":240,"column":6,"offset":11136}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Counting instances of values in an object","position":{"start":{"line":242,"column":5,"offset":11142},"end":{"line":242,"column":46,"offset":11183}}}],"position":{"start":{"line":242,"column":1,"offset":11138},"end":{"line":242,"column":46,"offset":11183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\n\nlet countedNames = names.reduce(function (allNames, name) {\n  if (name in allNames) {\n    allNames[name]++\n  }\n  else {\n    allNames[name] = 1\n  }\n  return allNames\n}, {})\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }\n"}],"position":{"start":{"line":244,"column":1,"offset":11185},"end":{"line":256,"column":55,"offset":11531}}}],"position":{"start":{"line":244,"column":1,"offset":11185},"end":{"line":256,"column":55,"offset":11531}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Grouping objects by a property","position":{"start":{"line":258,"column":5,"offset":11537},"end":{"line":258,"column":35,"offset":11567}}}],"position":{"start":{"line":258,"column":1,"offset":11533},"end":{"line":258,"column":35,"offset":11567}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupBy(objectArray, property) {\n  return objectArray.reduce(function (acc, obj) {\n    let key = obj[property]\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(obj)\n    return acc\n  }, {})\n}\n\nlet groupedPeople = groupBy(people, 'age')\n// groupedPeople is:\n// {\n//   20: [\n//     { name: 'Max', age: 20 },\n//     { name: 'Jane', age: 20 }\n//   ],\n//   21: [{ name: 'Alice', age: 21 }]\n// }\n"}],"position":{"start":{"line":260,"column":1,"offset":11569},"end":{"line":285,"column":9,"offset":12183}}}],"position":{"start":{"line":260,"column":1,"offset":11569},"end":{"line":285,"column":9,"offset":12183}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Bonding arrays contained in an array of objects using the spread operator and initialValue","position":{"start":{"line":287,"column":5,"offset":12189},"end":{"line":287,"column":95,"offset":12279}}}],"position":{"start":{"line":287,"column":1,"offset":12185},"end":{"line":287,"column":95,"offset":12279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// friends - an array of objects\n// where object field \"books\" is a list of favorite books\nlet friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}]\n\n// allbooks - list which will contain all friends' books +\n// additional list contained in initialValue\nlet allbooks = friends.reduce(function(accumulator, currentValue) {\n  return [...accumulator, ...currentValue.books]\n}, ['Alphabet'])\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace',\n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]\n"}],"position":{"start":{"line":289,"column":1,"offset":12281},"end":{"line":315,"column":9,"offset":13103}}}],"position":{"start":{"line":289,"column":1,"offset":12281},"end":{"line":315,"column":9,"offset":13103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Remove duplicate items in an array","position":{"start":{"line":317,"column":5,"offset":13109},"end":{"line":317,"column":39,"offset":13143}}}],"position":{"start":{"line":317,"column":1,"offset":13105},"end":{"line":317,"column":39,"offset":13143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":319,"column":3,"offset":13147},"end":{"line":319,"column":8,"offset":13152}}}],"position":{"start":{"line":319,"column":1,"offset":13145},"end":{"line":319,"column":10,"offset":13154}}},{"type":"text","value":" If you are using an environment compatible with ","position":{"start":{"line":319,"column":10,"offset":13154},"end":{"line":319,"column":59,"offset":13203}}},{"type":"element","tagName":"a","properties":{"href":"../set"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Set"}],"position":{"start":{"line":319,"column":60,"offset":13204},"end":{"line":319,"column":65,"offset":13209}}}],"position":{"start":{"line":319,"column":59,"offset":13203},"end":{"line":319,"column":74,"offset":13218}}},{"type":"text","value":" and ","position":{"start":{"line":319,"column":74,"offset":13218},"end":{"line":319,"column":79,"offset":13223}}},{"type":"element","tagName":"a","properties":{"href":"from"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.from()"}],"position":{"start":{"line":319,"column":80,"offset":13224},"end":{"line":319,"column":94,"offset":13238}}}],"position":{"start":{"line":319,"column":79,"offset":13223},"end":{"line":319,"column":101,"offset":13245}}},{"type":"text","value":", you could use ","position":{"start":{"line":319,"column":101,"offset":13245},"end":{"line":319,"column":117,"offset":13261}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let orderedArray = Array.from(new Set(myArray))"}],"position":{"start":{"line":319,"column":117,"offset":13261},"end":{"line":319,"column":166,"offset":13310}}},{"type":"text","value":" to get an array where duplicate items have been removed.","position":{"start":{"line":319,"column":166,"offset":13310},"end":{"line":319,"column":223,"offset":13367}}}],"position":{"start":{"line":319,"column":1,"offset":13145},"end":{"line":319,"column":223,"offset":13367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myOrderedArray = myArray.reduce(function (accumulator, currentValue) {\n  if (accumulator.indexOf(currentValue) === -1) {\n    accumulator.push(currentValue)\n  }\n  return accumulator\n}, [])\n\nconsole.log(myOrderedArray)\n"}],"position":{"start":{"line":321,"column":1,"offset":13369},"end":{"line":329,"column":32,"offset":13696}}}],"position":{"start":{"line":321,"column":1,"offset":13369},"end":{"line":329,"column":32,"offset":13696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Replace .filter().map() with .reduce()","position":{"start":{"line":331,"column":5,"offset":13702},"end":{"line":331,"column":43,"offset":13740}}}],"position":{"start":{"line":331,"column":1,"offset":13698},"end":{"line":331,"column":43,"offset":13740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Using ","position":{"start":{"line":333,"column":1,"offset":13742},"end":{"line":333,"column":7,"offset":13748}}},{"type":"element","tagName":"a","properties":{"href":"filter"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.filter()"}],"position":{"start":{"line":333,"column":8,"offset":13749},"end":{"line":333,"column":24,"offset":13765}}}],"position":{"start":{"line":333,"column":7,"offset":13748},"end":{"line":333,"column":33,"offset":13774}}},{"type":"text","value":" then ","position":{"start":{"line":333,"column":33,"offset":13774},"end":{"line":333,"column":39,"offset":13780}}},{"type":"element","tagName":"a","properties":{"href":"map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.map()"}],"position":{"start":{"line":333,"column":40,"offset":13781},"end":{"line":333,"column":53,"offset":13794}}}],"position":{"start":{"line":333,"column":39,"offset":13780},"end":{"line":333,"column":59,"offset":13800}}},{"type":"text","value":" traverses the array twice, but you can achieve the same effect while traversing only once with ","position":{"start":{"line":333,"column":59,"offset":13800},"end":{"line":333,"column":155,"offset":13896}}},{"type":"element","tagName":"a","properties":{"href":"reduce"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.reduce()"}],"position":{"start":{"line":333,"column":156,"offset":13897},"end":{"line":333,"column":172,"offset":13913}}}],"position":{"start":{"line":333,"column":155,"offset":13896},"end":{"line":333,"column":181,"offset":13922}}},{"type":"text","value":", thereby being more efficient. (If you like for loops, you can filter and map while traversing once with ","position":{"start":{"line":333,"column":181,"offset":13922},"end":{"line":333,"column":287,"offset":14028}}},{"type":"element","tagName":"a","properties":{"href":"foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array.forEach()"}],"position":{"start":{"line":333,"column":288,"offset":14029},"end":{"line":333,"column":305,"offset":14046}}}],"position":{"start":{"line":333,"column":287,"offset":14028},"end":{"line":333,"column":315,"offset":14056}}},{"type":"text","value":").","position":{"start":{"line":333,"column":315,"offset":14056},"end":{"line":333,"column":317,"offset":14058}}}],"position":{"start":{"line":333,"column":1,"offset":13742},"end":{"line":333,"column":317,"offset":14058}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const numbers = [-5, 6, 2, 0,];\n\nconst doubledPositiveNumbers = numbers.reduce((accumulator, currentValue) => {\n  if (currentValue > 0) {\n    const doubled = currentValue * 2;\n    accumulator.push(doubled);\n  }\n  return accumulator;\n}, []);\n\nconsole.log(doubledPositiveNumbers); // [12, 4]\n"}],"position":{"start":{"line":335,"column":1,"offset":14060},"end":{"line":345,"column":52,"offset":14385}}}],"position":{"start":{"line":335,"column":1,"offset":14060},"end":{"line":345,"column":52,"offset":14385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Running Promises in Sequence","position":{"start":{"line":347,"column":5,"offset":14391},"end":{"line":347,"column":33,"offset":14419}}}],"position":{"start":{"line":347,"column":1,"offset":14387},"end":{"line":347,"column":33,"offset":14419}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"/**\n * Runs promises from array of functions that can return promises\n * in chained manner\n *\n * @param {array} arr - promise arr\n * @return {Object} promise object\n */\nfunction runPromiseInSequence(arr, input) {\n  return arr.reduce(\n    (promiseChain, currentFunction) => promiseChain.then(currentFunction),\n    Promise.resolve(input)\n  )\n}\n\n// promise function 1\nfunction p1(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 5)\n  })\n}\n\n// promise function 2\nfunction p2(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 2)\n  })\n}\n\n// function 3  - will be wrapped in a resolved promise by .then()\nfunction f3(a) {\n return a * 3\n}\n\n// promise function 4\nfunction p4(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 4)\n  })\n}\n\nconst promiseArr = [p1, p2, f3, p4]\nrunPromiseInSequence(promiseArr, 10)\n  .then(console.log)   // 1200\n"}],"position":{"start":{"line":349,"column":1,"offset":14421},"end":{"line":391,"column":35,"offset":15449}}}],"position":{"start":{"line":349,"column":1,"offset":14421},"end":{"line":391,"column":35,"offset":15449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Function composition enabling piping","position":{"start":{"line":393,"column":5,"offset":15455},"end":{"line":393,"column":41,"offset":15491}}}],"position":{"start":{"line":393,"column":1,"offset":15451},"end":{"line":393,"column":41,"offset":15491}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"// Building-blocks to use for composition\nconst double = x => x + x\nconst triple = x => 3 * x\nconst quadruple = x => 4 * x\n\n// Function composition enabling pipe functionality\nconst pipe = (...functions) => input => functions.reduce(\n    (acc, fn) => fn(acc),\n    input\n)\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple)\nconst multiply9 = pipe(triple, triple)\nconst multiply16 = pipe(quadruple, quadruple)\nconst multiply24 = pipe(double, triple, quadruple)\n\n// Usage\nmultiply6(6)   // 36\nmultiply9(9)   // 81\nmultiply16(16) // 256\nmultiply24(10) // 240\n"}],"position":{"start":{"line":395,"column":1,"offset":15493},"end":{"line":416,"column":26,"offset":16172}}}],"position":{"start":{"line":395,"column":1,"offset":15493},"end":{"line":416,"column":26,"offset":16172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Write map using reduce","position":{"start":{"line":418,"column":5,"offset":16178},"end":{"line":418,"column":27,"offset":16200}}}],"position":{"start":{"line":418,"column":1,"offset":16174},"end":{"line":418,"column":27,"offset":16200}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"if (!Array.prototype.mapUsingReduce) {\n  Array.prototype.mapUsingReduce = function(callback, initialValue) {\n    return this.reduce(function(mappedArray, currentValue, index, array) {\n      mappedArray[index] = callback.call(initialValue, currentValue, index, array)\n      return mappedArray\n    }, [])\n  }\n}\n\n[1, 2, , 3].mapUsingReduce(\n  (currentValue, index, array) => currentValue + index + array.length\n) // [5, 7, , 10]\n"}],"position":{"start":{"line":420,"column":1,"offset":16202},"end":{"line":431,"column":22,"offset":16671}}}],"position":{"start":{"line":420,"column":1,"offset":16202},"end":{"line":431,"column":22,"offset":16671}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":432,"column":1,"offset":16672}}}}