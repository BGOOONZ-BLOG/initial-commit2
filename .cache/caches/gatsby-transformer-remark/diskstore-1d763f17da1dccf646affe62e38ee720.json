{"expireTime":9007200903816783000,"key":"transformer-remark-markdown-ast-c084bb68ee286a3febb3cb25ca081003--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Array.prototype.reduce()","position":{"start":{"line":2,"column":3,"offset":4},"end":{"line":2,"column":27,"offset":28},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":2},"end":{"line":2,"column":27,"offset":28},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":4,"column":1,"offset":32},"end":{"line":4,"column":5,"offset":36},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":4,"column":5,"offset":36},"end":{"line":4,"column":15,"offset":46},"indent":[]}},{"type":"text","value":" method executes a ","position":{"start":{"line":4,"column":15,"offset":46},"end":{"line":4,"column":34,"offset":65},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"reducer","position":{"start":{"line":4,"column":36,"offset":67},"end":{"line":4,"column":43,"offset":74},"indent":[]}}],"position":{"start":{"line":4,"column":34,"offset":65},"end":{"line":4,"column":45,"offset":76},"indent":[]}},{"type":"text","value":" function (that you provide) on each element of the array, resulting in a single output value.","position":{"start":{"line":4,"column":45,"offset":76},"end":{"line":4,"column":139,"offset":170},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":32},"end":{"line":4,"column":139,"offset":170},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":6,"column":1,"offset":174},"end":{"line":6,"column":5,"offset":178},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"reducer","position":{"start":{"line":6,"column":7,"offset":180},"end":{"line":6,"column":14,"offset":187},"indent":[]}}],"position":{"start":{"line":6,"column":5,"offset":178},"end":{"line":6,"column":16,"offset":189},"indent":[]}},{"type":"text","value":" function takes four arguments:","position":{"start":{"line":6,"column":16,"offset":189},"end":{"line":6,"column":47,"offset":220},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":174},"end":{"line":6,"column":47,"offset":220},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Accumulator","position":{"start":{"line":8,"column":5,"offset":228},"end":{"line":8,"column":16,"offset":239},"indent":[]}}],"position":{"start":{"line":8,"column":5,"offset":228},"end":{"line":8,"column":16,"offset":239},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":224},"end":{"line":8,"column":16,"offset":239},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Current Value","position":{"start":{"line":9,"column":5,"offset":245},"end":{"line":9,"column":18,"offset":258},"indent":[]}}],"position":{"start":{"line":9,"column":5,"offset":245},"end":{"line":9,"column":18,"offset":258},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":241},"end":{"line":9,"column":18,"offset":258},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Current Index","position":{"start":{"line":10,"column":5,"offset":264},"end":{"line":10,"column":18,"offset":277},"indent":[]}}],"position":{"start":{"line":10,"column":5,"offset":264},"end":{"line":10,"column":18,"offset":277},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":260},"end":{"line":10,"column":18,"offset":277},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Source Array","position":{"start":{"line":11,"column":5,"offset":283},"end":{"line":11,"column":17,"offset":295},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":283},"end":{"line":11,"column":17,"offset":295},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":279},"end":{"line":11,"column":17,"offset":295},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":224},"end":{"line":11,"column":17,"offset":295},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Your ","position":{"start":{"line":13,"column":1,"offset":299},"end":{"line":13,"column":6,"offset":304},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"reducer","position":{"start":{"line":13,"column":8,"offset":306},"end":{"line":13,"column":15,"offset":313},"indent":[]}}],"position":{"start":{"line":13,"column":6,"offset":304},"end":{"line":13,"column":17,"offset":315},"indent":[]}},{"type":"text","value":" function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.","position":{"start":{"line":13,"column":17,"offset":315},"end":{"line":13,"column":203,"offset":501},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":299},"end":{"line":13,"column":203,"offset":501},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":15,"column":4,"offset":508},"end":{"line":15,"column":10,"offset":514},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":505},"end":{"line":15,"column":10,"offset":514},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Arrow function\nreduce((accumulator, currentValue) => { ... } )\nreduce((accumulator, currentValue, index) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... }, initialValue)\n\n// Reducer function\nreduce(reducerFn)\nreduce(reducerFn, initialValue)\n\n// Inline reducer function\nreduce(function reducerFn(accumulator, currentValue) { ... })\nreduce(function reducerFn(accumulator, currentValue, index) { ... })\nreduce(function reducerFn(accumulator, currentValue, index, array){ ... })\nreduce(function reducerFn(accumulator, currentValue, index, array) { ... }, initialValue)","position":{"start":{"line":17,"column":1,"offset":518},"end":{"line":31,"column":94,"offset":1236},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Parameters","position":{"start":{"line":33,"column":5,"offset":1244},"end":{"line":33,"column":15,"offset":1254},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1240},"end":{"line":33,"column":15,"offset":1254},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"callback","position":{"start":{"line":35,"column":1,"offset":1258},"end":{"line":35,"column":11,"offset":1268},"indent":[]}},{"type":"text","value":"\nA function to execute on each element in the array (except for the first, if no ","position":{"start":{"line":35,"column":11,"offset":1268},"end":{"line":36,"column":81,"offset":1350},"indent":[1]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":36,"column":81,"offset":1350},"end":{"line":36,"column":95,"offset":1364},"indent":[]}},{"type":"text","value":" is supplied).","position":{"start":{"line":36,"column":95,"offset":1364},"end":{"line":36,"column":109,"offset":1378},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":1258},"end":{"line":36,"column":109,"offset":1378},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"It takes four arguments:","position":{"start":{"line":38,"column":1,"offset":1382},"end":{"line":38,"column":25,"offset":1406},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1382},"end":{"line":38,"column":25,"offset":1406},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"accumulator","position":{"start":{"line":40,"column":1,"offset":1410},"end":{"line":40,"column":14,"offset":1423},"indent":[]}},{"type":"text","value":"\nThe accumulator accumulates callback's return values. It is the accumulated value previously returned in the last invocation of the callbackâ€”or ","position":{"start":{"line":40,"column":14,"offset":1423},"end":{"line":41,"column":145,"offset":1569},"indent":[1]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":41,"column":145,"offset":1569},"end":{"line":41,"column":159,"offset":1583},"indent":[]}},{"type":"text","value":", if it was supplied (see below).","position":{"start":{"line":41,"column":159,"offset":1583},"end":{"line":41,"column":192,"offset":1616},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1410},"end":{"line":41,"column":192,"offset":1616},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"currentValue","position":{"start":{"line":43,"column":1,"offset":1620},"end":{"line":43,"column":15,"offset":1634},"indent":[]}},{"type":"text","value":"\nThe current element being processed in the array.","position":{"start":{"line":43,"column":15,"offset":1634},"end":{"line":44,"column":50,"offset":1685},"indent":[1]}}],"position":{"start":{"line":43,"column":1,"offset":1620},"end":{"line":44,"column":50,"offset":1685},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"index","position":{"start":{"line":46,"column":1,"offset":1689},"end":{"line":46,"column":8,"offset":1696},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":46,"column":8,"offset":1696},"end":{"line":46,"column":9,"offset":1697},"indent":[]}},{"type":"html","value":"<span class=\"badge inline optional\">","position":{"start":{"line":46,"column":9,"offset":1697},"end":{"line":46,"column":45,"offset":1733},"indent":[]}},{"type":"text","value":"Optional","position":{"start":{"line":46,"column":45,"offset":1733},"end":{"line":46,"column":53,"offset":1741},"indent":[]}},{"type":"html","value":"</span>","position":{"start":{"line":46,"column":53,"offset":1741},"end":{"line":46,"column":60,"offset":1748},"indent":[]}},{"type":"text","value":"\nThe index of the current element being processed in the array. Starts from index ","position":{"start":{"line":46,"column":60,"offset":1748},"end":{"line":47,"column":82,"offset":1831},"indent":[1]}},{"type":"inlineCode","value":"0","position":{"start":{"line":47,"column":82,"offset":1831},"end":{"line":47,"column":85,"offset":1834},"indent":[]}},{"type":"text","value":" if an ","position":{"start":{"line":47,"column":85,"offset":1834},"end":{"line":47,"column":92,"offset":1841},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":47,"column":92,"offset":1841},"end":{"line":47,"column":106,"offset":1855},"indent":[]}},{"type":"text","value":" is provided. Otherwise, it starts from index ","position":{"start":{"line":47,"column":106,"offset":1855},"end":{"line":47,"column":152,"offset":1901},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":47,"column":152,"offset":1901},"end":{"line":47,"column":155,"offset":1904},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":47,"column":155,"offset":1904},"end":{"line":47,"column":156,"offset":1905},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":1689},"end":{"line":47,"column":156,"offset":1905},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"array","position":{"start":{"line":49,"column":1,"offset":1909},"end":{"line":49,"column":8,"offset":1916},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":49,"column":8,"offset":1916},"end":{"line":49,"column":9,"offset":1917},"indent":[]}},{"type":"html","value":"<span class=\"badge inline optional\">","position":{"start":{"line":49,"column":9,"offset":1917},"end":{"line":49,"column":45,"offset":1953},"indent":[]}},{"type":"text","value":"Optional","position":{"start":{"line":49,"column":45,"offset":1953},"end":{"line":49,"column":53,"offset":1961},"indent":[]}},{"type":"html","value":"</span>","position":{"start":{"line":49,"column":53,"offset":1961},"end":{"line":49,"column":60,"offset":1968},"indent":[]}},{"type":"text","value":"\nThe array ","position":{"start":{"line":49,"column":60,"offset":1968},"end":{"line":50,"column":11,"offset":1980},"indent":[1]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":50,"column":11,"offset":1980},"end":{"line":50,"column":21,"offset":1990},"indent":[]}},{"type":"text","value":" was called upon.","position":{"start":{"line":50,"column":21,"offset":1990},"end":{"line":50,"column":38,"offset":2007},"indent":[]}}],"position":{"start":{"line":49,"column":1,"offset":1909},"end":{"line":50,"column":38,"offset":2007},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"initialValue","position":{"start":{"line":52,"column":1,"offset":2011},"end":{"line":52,"column":15,"offset":2025},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":52,"column":15,"offset":2025},"end":{"line":52,"column":16,"offset":2026},"indent":[]}},{"type":"html","value":"<span class=\"badge inline optional\">","position":{"start":{"line":52,"column":16,"offset":2026},"end":{"line":52,"column":52,"offset":2062},"indent":[]}},{"type":"text","value":"Optional","position":{"start":{"line":52,"column":52,"offset":2062},"end":{"line":52,"column":60,"offset":2070},"indent":[]}},{"type":"html","value":"</span>","position":{"start":{"line":52,"column":60,"offset":2070},"end":{"line":52,"column":67,"offset":2077},"indent":[]}},{"type":"text","value":"\nA value to use as the first argument to the first call of the ","position":{"start":{"line":52,"column":67,"offset":2077},"end":{"line":53,"column":63,"offset":2141},"indent":[1]}},{"type":"inlineCode","value":"callback","position":{"start":{"line":53,"column":63,"offset":2141},"end":{"line":53,"column":73,"offset":2151},"indent":[]}},{"type":"text","value":". If no ","position":{"start":{"line":53,"column":73,"offset":2151},"end":{"line":53,"column":81,"offset":2159},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":53,"column":81,"offset":2159},"end":{"line":53,"column":95,"offset":2173},"indent":[]}},{"type":"text","value":" is supplied, the first element in the array will be used as the initial ","position":{"start":{"line":53,"column":95,"offset":2173},"end":{"line":53,"column":168,"offset":2246},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":53,"column":168,"offset":2246},"end":{"line":53,"column":181,"offset":2259},"indent":[]}},{"type":"text","value":" value and skipped as ","position":{"start":{"line":53,"column":181,"offset":2259},"end":{"line":53,"column":203,"offset":2281},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":53,"column":203,"offset":2281},"end":{"line":53,"column":217,"offset":2295},"indent":[]}},{"type":"text","value":". Calling ","position":{"start":{"line":53,"column":217,"offset":2295},"end":{"line":53,"column":227,"offset":2305},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":53,"column":227,"offset":2305},"end":{"line":53,"column":237,"offset":2315},"indent":[]}},{"type":"text","value":" on an empty array without an ","position":{"start":{"line":53,"column":237,"offset":2315},"end":{"line":53,"column":267,"offset":2345},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":53,"column":267,"offset":2345},"end":{"line":53,"column":281,"offset":2359},"indent":[]}},{"type":"text","value":" will throw a ","position":{"start":{"line":53,"column":281,"offset":2359},"end":{"line":53,"column":295,"offset":2373},"indent":[]}},{"type":"link","title":null,"url":"../typeerror","children":[{"type":"inlineCode","value":"TypeError","position":{"start":{"line":53,"column":296,"offset":2374},"end":{"line":53,"column":307,"offset":2385},"indent":[]}}],"position":{"start":{"line":53,"column":295,"offset":2373},"end":{"line":53,"column":322,"offset":2400},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":53,"column":322,"offset":2400},"end":{"line":53,"column":323,"offset":2401},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2011},"end":{"line":53,"column":323,"offset":2401},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Return value","position":{"start":{"line":55,"column":5,"offset":2409},"end":{"line":55,"column":17,"offset":2421},"indent":[]}}],"position":{"start":{"line":55,"column":1,"offset":2405},"end":{"line":55,"column":17,"offset":2421},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The single value that results from the reduction.","position":{"start":{"line":57,"column":1,"offset":2425},"end":{"line":57,"column":50,"offset":2474},"indent":[]}}],"position":{"start":{"line":57,"column":1,"offset":2425},"end":{"line":57,"column":50,"offset":2474},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":59,"column":4,"offset":2481},"end":{"line":59,"column":15,"offset":2492},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2478},"end":{"line":59,"column":15,"offset":2492},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":61,"column":1,"offset":2496},"end":{"line":61,"column":5,"offset":2500},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":61,"column":5,"offset":2500},"end":{"line":61,"column":15,"offset":2510},"indent":[]}},{"type":"text","value":" method executes the ","position":{"start":{"line":61,"column":15,"offset":2510},"end":{"line":61,"column":36,"offset":2531},"indent":[]}},{"type":"inlineCode","value":"callback","position":{"start":{"line":61,"column":36,"offset":2531},"end":{"line":61,"column":46,"offset":2541},"indent":[]}},{"type":"text","value":" once for each assigned value present in the array, taking four arguments:","position":{"start":{"line":61,"column":46,"offset":2541},"end":{"line":61,"column":120,"offset":2615},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2496},"end":{"line":61,"column":120,"offset":2615},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"accumulator","position":{"start":{"line":63,"column":5,"offset":2623},"end":{"line":63,"column":18,"offset":2636},"indent":[]}}],"position":{"start":{"line":63,"column":5,"offset":2623},"end":{"line":63,"column":18,"offset":2636},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2619},"end":{"line":63,"column":18,"offset":2636},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"currentValue","position":{"start":{"line":64,"column":5,"offset":2642},"end":{"line":64,"column":19,"offset":2656},"indent":[]}}],"position":{"start":{"line":64,"column":5,"offset":2642},"end":{"line":64,"column":19,"offset":2656},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2638},"end":{"line":64,"column":19,"offset":2656},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"currentIndex","position":{"start":{"line":65,"column":5,"offset":2662},"end":{"line":65,"column":19,"offset":2676},"indent":[]}}],"position":{"start":{"line":65,"column":5,"offset":2662},"end":{"line":65,"column":19,"offset":2676},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2658},"end":{"line":65,"column":19,"offset":2676},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"array","position":{"start":{"line":66,"column":5,"offset":2682},"end":{"line":66,"column":12,"offset":2689},"indent":[]}}],"position":{"start":{"line":66,"column":5,"offset":2682},"end":{"line":66,"column":12,"offset":2689},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2678},"end":{"line":66,"column":12,"offset":2689},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":2619},"end":{"line":66,"column":12,"offset":2689},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first time the callback is called, ","position":{"start":{"line":68,"column":1,"offset":2693},"end":{"line":68,"column":40,"offset":2732},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":68,"column":40,"offset":2732},"end":{"line":68,"column":53,"offset":2745},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":68,"column":53,"offset":2745},"end":{"line":68,"column":58,"offset":2750},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":68,"column":58,"offset":2750},"end":{"line":68,"column":72,"offset":2764},"indent":[]}},{"type":"text","value":" can be one of two values. If ","position":{"start":{"line":68,"column":72,"offset":2764},"end":{"line":68,"column":102,"offset":2794},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":68,"column":102,"offset":2794},"end":{"line":68,"column":116,"offset":2808},"indent":[]}},{"type":"text","value":" is provided in the call to ","position":{"start":{"line":68,"column":116,"offset":2808},"end":{"line":68,"column":144,"offset":2836},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":68,"column":144,"offset":2836},"end":{"line":68,"column":154,"offset":2846},"indent":[]}},{"type":"text","value":", then ","position":{"start":{"line":68,"column":154,"offset":2846},"end":{"line":68,"column":161,"offset":2853},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":68,"column":161,"offset":2853},"end":{"line":68,"column":174,"offset":2866},"indent":[]}},{"type":"text","value":" will be equal to ","position":{"start":{"line":68,"column":174,"offset":2866},"end":{"line":68,"column":192,"offset":2884},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":68,"column":192,"offset":2884},"end":{"line":68,"column":206,"offset":2898},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":68,"column":206,"offset":2898},"end":{"line":68,"column":212,"offset":2904},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":68,"column":212,"offset":2904},"end":{"line":68,"column":226,"offset":2918},"indent":[]}},{"type":"text","value":" will be equal to the first value in the array. If no ","position":{"start":{"line":68,"column":226,"offset":2918},"end":{"line":68,"column":280,"offset":2972},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":68,"column":280,"offset":2972},"end":{"line":68,"column":294,"offset":2986},"indent":[]}},{"type":"text","value":" is provided, then ","position":{"start":{"line":68,"column":294,"offset":2986},"end":{"line":68,"column":313,"offset":3005},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":68,"column":313,"offset":3005},"end":{"line":68,"column":326,"offset":3018},"indent":[]}},{"type":"text","value":" will be equal to the first value in the array, and ","position":{"start":{"line":68,"column":326,"offset":3018},"end":{"line":68,"column":378,"offset":3070},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":68,"column":378,"offset":3070},"end":{"line":68,"column":392,"offset":3084},"indent":[]}},{"type":"text","value":" will be equal to the second.","position":{"start":{"line":68,"column":392,"offset":3084},"end":{"line":68,"column":421,"offset":3113},"indent":[]}}],"position":{"start":{"line":68,"column":1,"offset":2693},"end":{"line":68,"column":421,"offset":3113},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":70,"column":3,"offset":3119},"end":{"line":70,"column":8,"offset":3124},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3117},"end":{"line":70,"column":10,"offset":3126},"indent":[]}},{"type":"text","value":" If ","position":{"start":{"line":70,"column":10,"offset":3126},"end":{"line":70,"column":14,"offset":3130},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":70,"column":14,"offset":3130},"end":{"line":70,"column":28,"offset":3144},"indent":[]}},{"type":"text","value":" is not provided, ","position":{"start":{"line":70,"column":28,"offset":3144},"end":{"line":70,"column":46,"offset":3162},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":70,"column":46,"offset":3162},"end":{"line":70,"column":56,"offset":3172},"indent":[]}},{"type":"text","value":" will execute the callback function starting at index ","position":{"start":{"line":70,"column":56,"offset":3172},"end":{"line":70,"column":110,"offset":3226},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":70,"column":110,"offset":3226},"end":{"line":70,"column":113,"offset":3229},"indent":[]}},{"type":"text","value":", skipping the first index. If ","position":{"start":{"line":70,"column":113,"offset":3229},"end":{"line":70,"column":144,"offset":3260},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":70,"column":144,"offset":3260},"end":{"line":70,"column":158,"offset":3274},"indent":[]}},{"type":"text","value":" is provided, it will start at index ","position":{"start":{"line":70,"column":158,"offset":3274},"end":{"line":70,"column":195,"offset":3311},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":70,"column":195,"offset":3311},"end":{"line":70,"column":198,"offset":3314},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":70,"column":198,"offset":3314},"end":{"line":70,"column":199,"offset":3315},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":3117},"end":{"line":70,"column":199,"offset":3315},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the array is empty and no ","position":{"start":{"line":72,"column":1,"offset":3319},"end":{"line":72,"column":30,"offset":3348},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":72,"column":30,"offset":3348},"end":{"line":72,"column":44,"offset":3362},"indent":[]}},{"type":"text","value":" is provided, ","position":{"start":{"line":72,"column":44,"offset":3362},"end":{"line":72,"column":58,"offset":3376},"indent":[]}},{"type":"link","title":null,"url":"../typeerror","children":[{"type":"inlineCode","value":"TypeError","position":{"start":{"line":72,"column":59,"offset":3377},"end":{"line":72,"column":70,"offset":3388},"indent":[]}}],"position":{"start":{"line":72,"column":58,"offset":3376},"end":{"line":72,"column":85,"offset":3403},"indent":[]}},{"type":"text","value":" will be thrown.","position":{"start":{"line":72,"column":85,"offset":3403},"end":{"line":72,"column":101,"offset":3419},"indent":[]}}],"position":{"start":{"line":72,"column":1,"offset":3319},"end":{"line":72,"column":101,"offset":3419},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the array only has one element (regardless of position) and no ","position":{"start":{"line":74,"column":1,"offset":3423},"end":{"line":74,"column":67,"offset":3489},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":74,"column":67,"offset":3489},"end":{"line":74,"column":81,"offset":3503},"indent":[]}},{"type":"text","value":" is provided, or if ","position":{"start":{"line":74,"column":81,"offset":3503},"end":{"line":74,"column":101,"offset":3523},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":74,"column":101,"offset":3523},"end":{"line":74,"column":115,"offset":3537},"indent":[]}},{"type":"text","value":" is provided but the array is empty, the solo value will be returned ","position":{"start":{"line":74,"column":115,"offset":3537},"end":{"line":74,"column":184,"offset":3606},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"without","position":{"start":{"line":74,"column":185,"offset":3607},"end":{"line":74,"column":192,"offset":3614},"indent":[]}}],"position":{"start":{"line":74,"column":184,"offset":3606},"end":{"line":74,"column":193,"offset":3615},"indent":[]}},{"type":"text","value":" calling ","position":{"start":{"line":74,"column":193,"offset":3615},"end":{"line":74,"column":202,"offset":3624},"indent":[]}},{"type":"emphasis","children":[{"type":"inlineCode","value":"callback","position":{"start":{"line":74,"column":203,"offset":3625},"end":{"line":74,"column":213,"offset":3635},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":74,"column":213,"offset":3635},"end":{"line":74,"column":214,"offset":3636},"indent":[]}}],"position":{"start":{"line":74,"column":202,"offset":3624},"end":{"line":74,"column":215,"offset":3637},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":3423},"end":{"line":74,"column":215,"offset":3637},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is almost always safer to provide an ","position":{"start":{"line":76,"column":1,"offset":3641},"end":{"line":76,"column":41,"offset":3681},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":76,"column":41,"offset":3681},"end":{"line":76,"column":55,"offset":3695},"indent":[]}},{"type":"text","value":", because there can be up to ","position":{"start":{"line":76,"column":55,"offset":3695},"end":{"line":76,"column":84,"offset":3724},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"four","position":{"start":{"line":76,"column":85,"offset":3725},"end":{"line":76,"column":89,"offset":3729},"indent":[]}}],"position":{"start":{"line":76,"column":84,"offset":3724},"end":{"line":76,"column":90,"offset":3730},"indent":[]}},{"type":"text","value":" possible output types without ","position":{"start":{"line":76,"column":90,"offset":3730},"end":{"line":76,"column":121,"offset":3761},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":76,"column":121,"offset":3761},"end":{"line":76,"column":135,"offset":3775},"indent":[]}},{"type":"text","value":", as shown in the following example:","position":{"start":{"line":76,"column":135,"offset":3775},"end":{"line":76,"column":171,"offset":3811},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":3641},"end":{"line":76,"column":171,"offset":3811},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let maxCallback = ( acc, cur ) => Math.max( acc.x, cur.x );\nlet maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce without initialValue\n[ { x: 2 }, { x: 22 }, { x: 42 } ].reduce( maxCallback ); // NaN\n[ { x: 2 }, { x: 22 }            ].reduce( maxCallback ); // 22\n[ { x: 2 }                       ].reduce( maxCallback ); // { x: 2 }\n[                                ].reduce( maxCallback ); // TypeError\n\n// map & reduce with initialValue; better solution, also works for empty or larger arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );","position":{"start":{"line":78,"column":1,"offset":3815},"end":{"line":89,"column":64,"offset":4478},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"How reduce() works","position":{"start":{"line":91,"column":5,"offset":4486},"end":{"line":91,"column":23,"offset":4504},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":4482},"end":{"line":91,"column":23,"offset":4504},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Suppose the following use of ","position":{"start":{"line":93,"column":1,"offset":4508},"end":{"line":93,"column":30,"offset":4537},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":93,"column":30,"offset":4537},"end":{"line":93,"column":40,"offset":4547},"indent":[]}},{"type":"text","value":" occurred:","position":{"start":{"line":93,"column":40,"offset":4547},"end":{"line":93,"column":50,"offset":4557},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":4508},"end":{"line":93,"column":50,"offset":4557},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {\n  return accumulator + currentValue\n})","position":{"start":{"line":95,"column":1,"offset":4561},"end":{"line":97,"column":7,"offset":4695},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The callback would be invoked four times, with the arguments and return values in each call being as follows:","position":{"start":{"line":99,"column":1,"offset":4699},"end":{"line":99,"column":110,"offset":4808},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":4699},"end":{"line":99,"column":110,"offset":4808},"indent":[]}},{"type":"html","value":"<table><thead><tr class=\"header\"><th><code>callback</code> iteration</th><th><code>accumulator</code></th><th><code>currentValue</code></th><th><code>currentIndex</code></th><th><code>array</code></th><th>return value</th></tr></thead><tbody><tr class=\"odd\"><td>first call</td><td><code>0</code></td><td><code>1</code></td><td><code>1</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>1</code></td></tr><tr class=\"even\"><td>second call</td><td><code>1</code></td><td><code>2</code></td><td><code>2</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>3</code></td></tr><tr class=\"odd\"><td>third call</td><td><code>3</code></td><td><code>3</code></td><td><code>3</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>6</code></td></tr><tr class=\"even\"><td>fourth call</td><td><code>6</code></td><td><code>4</code></td><td><code>4</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>10</code></td></tr></tbody></table>","position":{"start":{"line":101,"column":1,"offset":4812},"end":{"line":101,"column":940,"offset":5751},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":103,"column":1,"offset":5755},"end":{"line":103,"column":23,"offset":5777},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":103,"column":23,"offset":5777},"end":{"line":103,"column":33,"offset":5787},"indent":[]}},{"type":"text","value":" would be that of the last callback invocation (","position":{"start":{"line":103,"column":33,"offset":5787},"end":{"line":103,"column":81,"offset":5835},"indent":[]}},{"type":"inlineCode","value":"10","position":{"start":{"line":103,"column":81,"offset":5835},"end":{"line":103,"column":85,"offset":5839},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":103,"column":85,"offset":5839},"end":{"line":103,"column":87,"offset":5841},"indent":[]}}],"position":{"start":{"line":103,"column":1,"offset":5755},"end":{"line":103,"column":87,"offset":5841},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also provide an ","position":{"start":{"line":105,"column":1,"offset":5845},"end":{"line":105,"column":25,"offset":5869},"indent":[]}},{"type":"link","title":null,"url":"../../functions/arrow_functions","children":[{"type":"text","value":"Arrow Function","position":{"start":{"line":105,"column":26,"offset":5870},"end":{"line":105,"column":40,"offset":5884},"indent":[]}}],"position":{"start":{"line":105,"column":25,"offset":5869},"end":{"line":105,"column":74,"offset":5918},"indent":[]}},{"type":"text","value":" instead of a full function. The code below will produce the same output as the code in the block above:","position":{"start":{"line":105,"column":74,"offset":5918},"end":{"line":105,"column":178,"offset":6022},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":5845},"end":{"line":105,"column":178,"offset":6022},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"[0, 1, 2, 3, 4].reduce( (accumulator, currentValue, currentIndex, array) => accumulator + currentValue )","position":{"start":{"line":107,"column":1,"offset":6026},"end":{"line":107,"column":109,"offset":6134},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you were to provide an ","position":{"start":{"line":109,"column":1,"offset":6138},"end":{"line":109,"column":27,"offset":6164},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":109,"column":27,"offset":6164},"end":{"line":109,"column":41,"offset":6178},"indent":[]}},{"type":"text","value":" as the second argument to ","position":{"start":{"line":109,"column":41,"offset":6178},"end":{"line":109,"column":68,"offset":6205},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":109,"column":68,"offset":6205},"end":{"line":109,"column":78,"offset":6215},"indent":[]}},{"type":"text","value":", the result would look like this:","position":{"start":{"line":109,"column":78,"offset":6215},"end":{"line":109,"column":112,"offset":6249},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":6138},"end":{"line":109,"column":112,"offset":6249},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => {\n    return accumulator + currentValue\n}, 10)","position":{"start":{"line":111,"column":1,"offset":6253},"end":{"line":113,"column":11,"offset":6388},"indent":[1,1]}},{"type":"html","value":"<table><thead><tr class=\"header\"><th><code>callback</code> iteration</th><th><code>accumulator</code></th><th><code>currentValue</code></th><th><code>currentIndex</code></th><th><code>array</code></th><th>return value</th></tr></thead><tbody><tr class=\"odd\"><td>first call</td><td><code>10</code></td><td><code>0</code></td><td><code>0</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>10</code></td></tr><tr class=\"even\"><td>second call</td><td><code>10</code></td><td><code>1</code></td><td><code>1</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>11</code></td></tr><tr class=\"odd\"><td>third call</td><td><code>11</code></td><td><code>2</code></td><td><code>2</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>13</code></td></tr><tr class=\"even\"><td>fourth call</td><td><code>13</code></td><td><code>3</code></td><td><code>3</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>16</code></td></tr><tr class=\"odd\"><td>fifth call</td><td><code>16</code></td><td><code>4</code></td><td><code>4</code></td><td><code>[0, 1, 2, 3, 4]</code></td><td><code>20</code></td></tr></tbody></table>","position":{"start":{"line":115,"column":1,"offset":6392},"end":{"line":115,"column":1118,"offset":7509},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":117,"column":1,"offset":7513},"end":{"line":117,"column":23,"offset":7535},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":117,"column":23,"offset":7535},"end":{"line":117,"column":33,"offset":7545},"indent":[]}},{"type":"text","value":" in this case would be ","position":{"start":{"line":117,"column":33,"offset":7545},"end":{"line":117,"column":56,"offset":7568},"indent":[]}},{"type":"inlineCode","value":"20","position":{"start":{"line":117,"column":56,"offset":7568},"end":{"line":117,"column":60,"offset":7572},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":117,"column":60,"offset":7572},"end":{"line":117,"column":61,"offset":7573},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":7513},"end":{"line":117,"column":61,"offset":7573},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Polyfill","position":{"start":{"line":119,"column":4,"offset":7580},"end":{"line":119,"column":12,"offset":7588},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":7577},"end":{"line":119,"column":12,"offset":7588},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: https://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' +\n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // Steps 3, 4, 5, 6, 7\n      var k = 0;\n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++;\n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          Â« accumulator, kValue, k, O Â»).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.\n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}","position":{"start":{"line":121,"column":1,"offset":7592},"end":{"line":183,"column":6,"offset":9644},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":185,"column":3,"offset":9650},"end":{"line":185,"column":8,"offset":9655},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":9648},"end":{"line":185,"column":10,"offset":9657},"indent":[]}},{"type":"text","value":" If you need to support truly obsolete JavaScript engines that do not support ","position":{"start":{"line":185,"column":10,"offset":9657},"end":{"line":185,"column":88,"offset":9735},"indent":[]}},{"type":"link","title":null,"url":"../object/defineproperty","children":[{"type":"inlineCode","value":"Object.defineProperty()","position":{"start":{"line":185,"column":89,"offset":9736},"end":{"line":185,"column":114,"offset":9761},"indent":[]}}],"position":{"start":{"line":185,"column":88,"offset":9735},"end":{"line":185,"column":141,"offset":9788},"indent":[]}},{"type":"text","value":", it is best not to polyfill ","position":{"start":{"line":185,"column":141,"offset":9788},"end":{"line":185,"column":170,"offset":9817},"indent":[]}},{"type":"inlineCode","value":"Array.prototype","position":{"start":{"line":185,"column":170,"offset":9817},"end":{"line":185,"column":187,"offset":9834},"indent":[]}},{"type":"text","value":" methods at all, as you cannot make them ","position":{"start":{"line":185,"column":187,"offset":9834},"end":{"line":185,"column":228,"offset":9875},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"non-enumerable","position":{"start":{"line":185,"column":230,"offset":9877},"end":{"line":185,"column":244,"offset":9891},"indent":[]}}],"position":{"start":{"line":185,"column":228,"offset":9875},"end":{"line":185,"column":246,"offset":9893},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":185,"column":246,"offset":9893},"end":{"line":185,"column":247,"offset":9894},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":9648},"end":{"line":185,"column":247,"offset":9894},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":187,"column":4,"offset":9901},"end":{"line":187,"column":12,"offset":9909},"indent":[]}}],"position":{"start":{"line":187,"column":1,"offset":9898},"end":{"line":187,"column":12,"offset":9909},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sum all the values of an array","position":{"start":{"line":189,"column":5,"offset":9917},"end":{"line":189,"column":35,"offset":9947},"indent":[]}}],"position":{"start":{"line":189,"column":1,"offset":9913},"end":{"line":189,"column":35,"offset":9947},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let sum = [0, 1, 2, 3].reduce(function (accumulator, currentValue) {\n  return accumulator + currentValue\n}, 0)\n// sum is 6","position":{"start":{"line":191,"column":1,"offset":9951},"end":{"line":194,"column":16,"offset":10092},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":196,"column":1,"offset":10096},"end":{"line":196,"column":46,"offset":10141},"indent":[]}}],"position":{"start":{"line":196,"column":1,"offset":10096},"end":{"line":196,"column":46,"offset":10141},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let total = [ 0, 1, 2, 3 ].reduce(\n  ( accumulator, currentValue ) => accumulator + currentValue,\n  0\n)","position":{"start":{"line":198,"column":1,"offset":10145},"end":{"line":201,"column":6,"offset":10267},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sum of values in an object array","position":{"start":{"line":203,"column":5,"offset":10275},"end":{"line":203,"column":37,"offset":10307},"indent":[]}}],"position":{"start":{"line":203,"column":1,"offset":10271},"end":{"line":203,"column":37,"offset":10307},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To sum up the values contained in an array of objects, you ","position":{"start":{"line":205,"column":1,"offset":10311},"end":{"line":205,"column":60,"offset":10370},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"must","position":{"start":{"line":205,"column":62,"offset":10372},"end":{"line":205,"column":66,"offset":10376},"indent":[]}}],"position":{"start":{"line":205,"column":60,"offset":10370},"end":{"line":205,"column":68,"offset":10378},"indent":[]}},{"type":"text","value":" supply an ","position":{"start":{"line":205,"column":68,"offset":10378},"end":{"line":205,"column":79,"offset":10389},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":205,"column":79,"offset":10389},"end":{"line":205,"column":93,"offset":10403},"indent":[]}},{"type":"text","value":", so that each item passes through your function.","position":{"start":{"line":205,"column":93,"offset":10403},"end":{"line":205,"column":142,"offset":10452},"indent":[]}}],"position":{"start":{"line":205,"column":1,"offset":10311},"end":{"line":205,"column":142,"offset":10452},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(function (accumulator, currentValue) {\n    return accumulator + currentValue.x\n}, initialValue)\n\nconsole.log(sum) // logs 6","position":{"start":{"line":207,"column":1,"offset":10456},"end":{"line":212,"column":31,"offset":10667},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":214,"column":1,"offset":10671},"end":{"line":214,"column":46,"offset":10716},"indent":[]}}],"position":{"start":{"line":214,"column":1,"offset":10671},"end":{"line":214,"column":46,"offset":10716},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(\n    (accumulator, currentValue) => accumulator + currentValue.x\n    , initialValue\n)\n\nconsole.log(sum) // logs 6","position":{"start":{"line":216,"column":1,"offset":10720},"end":{"line":222,"column":31,"offset":10926},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Flatten an array of arrays","position":{"start":{"line":224,"column":5,"offset":10934},"end":{"line":224,"column":31,"offset":10960},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":10930},"end":{"line":224,"column":31,"offset":10960},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(accumulator, currentValue) {\n    return accumulator.concat(currentValue)\n  },\n  []\n)\n// flattened is [0, 1, 2, 3, 4, 5]","position":{"start":{"line":226,"column":1,"offset":10964},"end":{"line":232,"column":39,"offset":11177},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":234,"column":1,"offset":11181},"end":{"line":234,"column":46,"offset":11226},"indent":[]}}],"position":{"start":{"line":234,"column":1,"offset":11181},"end":{"line":234,"column":46,"offset":11226},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  ( accumulator, currentValue ) => accumulator.concat(currentValue),\n  []\n)","position":{"start":{"line":236,"column":1,"offset":11230},"end":{"line":239,"column":6,"offset":11373},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Counting instances of values in an object","position":{"start":{"line":241,"column":5,"offset":11381},"end":{"line":241,"column":46,"offset":11422},"indent":[]}}],"position":{"start":{"line":241,"column":1,"offset":11377},"end":{"line":241,"column":46,"offset":11422},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\n\nlet countedNames = names.reduce(function (allNames, name) {\n  if (name in allNames) {\n    allNames[name]++\n  }\n  else {\n    allNames[name] = 1\n  }\n  return allNames\n}, {})\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }","position":{"start":{"line":243,"column":1,"offset":11426},"end":{"line":255,"column":55,"offset":11784},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Grouping objects by a property","position":{"start":{"line":257,"column":5,"offset":11792},"end":{"line":257,"column":35,"offset":11822},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":11788},"end":{"line":257,"column":35,"offset":11822},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupBy(objectArray, property) {\n  return objectArray.reduce(function (acc, obj) {\n    let key = obj[property]\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(obj)\n    return acc\n  }, {})\n}\n\nlet groupedPeople = groupBy(people, 'age')\n// groupedPeople is:\n// {\n//   20: [\n//     { name: 'Max', age: 20 },\n//     { name: 'Jane', age: 20 }\n//   ],\n//   21: [{ name: 'Alice', age: 21 }]\n// }","position":{"start":{"line":259,"column":1,"offset":11826},"end":{"line":284,"column":9,"offset":12465},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Bonding arrays contained in an array of objects using the spread operator and initialValue","position":{"start":{"line":286,"column":5,"offset":12473},"end":{"line":286,"column":95,"offset":12563},"indent":[]}}],"position":{"start":{"line":286,"column":1,"offset":12469},"end":{"line":286,"column":95,"offset":12563},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// friends - an array of objects\n// where object field \"books\" is a list of favorite books\nlet friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}]\n\n// allbooks - list which will contain all friends' books +\n// additional list contained in initialValue\nlet allbooks = friends.reduce(function(accumulator, currentValue) {\n  return [...accumulator, ...currentValue.books]\n}, ['Alphabet'])\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace',\n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]","position":{"start":{"line":288,"column":1,"offset":12567},"end":{"line":314,"column":9,"offset":13415},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Remove duplicate items in an array","position":{"start":{"line":316,"column":5,"offset":13423},"end":{"line":316,"column":39,"offset":13457},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":13419},"end":{"line":316,"column":39,"offset":13457},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":318,"column":3,"offset":13463},"end":{"line":318,"column":8,"offset":13468},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":13461},"end":{"line":318,"column":10,"offset":13470},"indent":[]}},{"type":"text","value":" If you are using an environment compatible with ","position":{"start":{"line":318,"column":10,"offset":13470},"end":{"line":318,"column":59,"offset":13519},"indent":[]}},{"type":"link","title":null,"url":"../set","children":[{"type":"inlineCode","value":"Set","position":{"start":{"line":318,"column":60,"offset":13520},"end":{"line":318,"column":65,"offset":13525},"indent":[]}}],"position":{"start":{"line":318,"column":59,"offset":13519},"end":{"line":318,"column":74,"offset":13534},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":318,"column":74,"offset":13534},"end":{"line":318,"column":79,"offset":13539},"indent":[]}},{"type":"link","title":null,"url":"from","children":[{"type":"inlineCode","value":"Array.from()","position":{"start":{"line":318,"column":80,"offset":13540},"end":{"line":318,"column":94,"offset":13554},"indent":[]}}],"position":{"start":{"line":318,"column":79,"offset":13539},"end":{"line":318,"column":101,"offset":13561},"indent":[]}},{"type":"text","value":", you could use ","position":{"start":{"line":318,"column":101,"offset":13561},"end":{"line":318,"column":117,"offset":13577},"indent":[]}},{"type":"inlineCode","value":"let orderedArray = Array.from(new Set(myArray))","position":{"start":{"line":318,"column":117,"offset":13577},"end":{"line":318,"column":166,"offset":13626},"indent":[]}},{"type":"text","value":" to get an array where duplicate items have been removed.","position":{"start":{"line":318,"column":166,"offset":13626},"end":{"line":318,"column":223,"offset":13683},"indent":[]}}],"position":{"start":{"line":318,"column":1,"offset":13461},"end":{"line":318,"column":223,"offset":13683},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myOrderedArray = myArray.reduce(function (accumulator, currentValue) {\n  if (accumulator.indexOf(currentValue) === -1) {\n    accumulator.push(currentValue)\n  }\n  return accumulator\n}, [])\n\nconsole.log(myOrderedArray)","position":{"start":{"line":320,"column":1,"offset":13687},"end":{"line":328,"column":32,"offset":14022},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Replace .filter().map() with .reduce()","position":{"start":{"line":330,"column":5,"offset":14030},"end":{"line":330,"column":43,"offset":14068},"indent":[]}}],"position":{"start":{"line":330,"column":1,"offset":14026},"end":{"line":330,"column":43,"offset":14068},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using ","position":{"start":{"line":332,"column":1,"offset":14072},"end":{"line":332,"column":7,"offset":14078},"indent":[]}},{"type":"link","title":null,"url":"filter","children":[{"type":"inlineCode","value":"Array.filter()","position":{"start":{"line":332,"column":8,"offset":14079},"end":{"line":332,"column":24,"offset":14095},"indent":[]}}],"position":{"start":{"line":332,"column":7,"offset":14078},"end":{"line":332,"column":33,"offset":14104},"indent":[]}},{"type":"text","value":" then ","position":{"start":{"line":332,"column":33,"offset":14104},"end":{"line":332,"column":39,"offset":14110},"indent":[]}},{"type":"link","title":null,"url":"map","children":[{"type":"inlineCode","value":"Array.map()","position":{"start":{"line":332,"column":40,"offset":14111},"end":{"line":332,"column":53,"offset":14124},"indent":[]}}],"position":{"start":{"line":332,"column":39,"offset":14110},"end":{"line":332,"column":59,"offset":14130},"indent":[]}},{"type":"text","value":" traverses the array twice, but you can achieve the same effect while traversing only once with ","position":{"start":{"line":332,"column":59,"offset":14130},"end":{"line":332,"column":155,"offset":14226},"indent":[]}},{"type":"link","title":null,"url":"reduce","children":[{"type":"inlineCode","value":"Array.reduce()","position":{"start":{"line":332,"column":156,"offset":14227},"end":{"line":332,"column":172,"offset":14243},"indent":[]}}],"position":{"start":{"line":332,"column":155,"offset":14226},"end":{"line":332,"column":181,"offset":14252},"indent":[]}},{"type":"text","value":", thereby being more efficient. (If you like for loops, you can filter and map while traversing once with ","position":{"start":{"line":332,"column":181,"offset":14252},"end":{"line":332,"column":287,"offset":14358},"indent":[]}},{"type":"link","title":null,"url":"foreach","children":[{"type":"inlineCode","value":"Array.forEach()","position":{"start":{"line":332,"column":288,"offset":14359},"end":{"line":332,"column":305,"offset":14376},"indent":[]}}],"position":{"start":{"line":332,"column":287,"offset":14358},"end":{"line":332,"column":315,"offset":14386},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":332,"column":315,"offset":14386},"end":{"line":332,"column":317,"offset":14388},"indent":[]}}],"position":{"start":{"line":332,"column":1,"offset":14072},"end":{"line":332,"column":317,"offset":14388},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const numbers = [-5, 6, 2, 0,];\n\nconst doubledPositiveNumbers = numbers.reduce((accumulator, currentValue) => {\n  if (currentValue > 0) {\n    const doubled = currentValue * 2;\n    accumulator.push(doubled);\n  }\n  return accumulator;\n}, []);\n\nconsole.log(doubledPositiveNumbers); // [12, 4]","position":{"start":{"line":334,"column":1,"offset":14392},"end":{"line":344,"column":52,"offset":14727},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Running Promises in Sequence","position":{"start":{"line":346,"column":5,"offset":14735},"end":{"line":346,"column":33,"offset":14763},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":14731},"end":{"line":346,"column":33,"offset":14763},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"/**\n * Runs promises from array of functions that can return promises\n * in chained manner\n *\n * @param {array} arr - promise arr\n * @return {Object} promise object\n */\nfunction runPromiseInSequence(arr, input) {\n  return arr.reduce(\n    (promiseChain, currentFunction) => promiseChain.then(currentFunction),\n    Promise.resolve(input)\n  )\n}\n\n// promise function 1\nfunction p1(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 5)\n  })\n}\n\n// promise function 2\nfunction p2(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 2)\n  })\n}\n\n// function 3  - will be wrapped in a resolved promise by .then()\nfunction f3(a) {\n return a * 3\n}\n\n// promise function 4\nfunction p4(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 4)\n  })\n}\n\nconst promiseArr = [p1, p2, f3, p4]\nrunPromiseInSequence(promiseArr, 10)\n  .then(console.log)   // 1200","position":{"start":{"line":348,"column":1,"offset":14767},"end":{"line":390,"column":35,"offset":15837},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Function composition enabling piping","position":{"start":{"line":392,"column":5,"offset":15845},"end":{"line":392,"column":41,"offset":15881},"indent":[]}}],"position":{"start":{"line":392,"column":1,"offset":15841},"end":{"line":392,"column":41,"offset":15881},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Building-blocks to use for composition\nconst double = x => x + x\nconst triple = x => 3 * x\nconst quadruple = x => 4 * x\n\n// Function composition enabling pipe functionality\nconst pipe = (...functions) => input => functions.reduce(\n    (acc, fn) => fn(acc),\n    input\n)\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple)\nconst multiply9 = pipe(triple, triple)\nconst multiply16 = pipe(quadruple, quadruple)\nconst multiply24 = pipe(double, triple, quadruple)\n\n// Usage\nmultiply6(6)   // 36\nmultiply9(9)   // 81\nmultiply16(16) // 256\nmultiply24(10) // 240","position":{"start":{"line":394,"column":1,"offset":15885},"end":{"line":415,"column":26,"offset":16585},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Write map using reduce","position":{"start":{"line":417,"column":5,"offset":16593},"end":{"line":417,"column":27,"offset":16615},"indent":[]}}],"position":{"start":{"line":417,"column":1,"offset":16589},"end":{"line":417,"column":27,"offset":16615},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"if (!Array.prototype.mapUsingReduce) {\n  Array.prototype.mapUsingReduce = function(callback, initialValue) {\n    return this.reduce(function(mappedArray, currentValue, index, array) {\n      mappedArray[index] = callback.call(initialValue, currentValue, index, array)\n      return mappedArray\n    }, [])\n  }\n}\n\n[1, 2, , 3].mapUsingReduce(\n  (currentValue, index, array) => currentValue + index + array.length\n) // [5, 7, , 10]","position":{"start":{"line":419,"column":1,"offset":16619},"end":{"line":430,"column":22,"offset":17099},"indent":[1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":431,"column":1,"offset":17101}}}}