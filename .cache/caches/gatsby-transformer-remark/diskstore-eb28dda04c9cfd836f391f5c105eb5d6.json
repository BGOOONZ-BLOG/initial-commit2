{"expireTime":9007200904306550000,"key":"transformer-remark-markdown-html-ast-8e7e6c19eae3926746973f7532080e83--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Map","position":{"start":{"line":3,"column":3,"offset":4},"end":{"line":3,"column":6,"offset":7}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":6,"offset":7}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1,"offset":9},"end":{"line":5,"column":5,"offset":13}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":5,"column":5,"offset":13},"end":{"line":5,"column":10,"offset":18}}},{"type":"text","value":" object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and ","position":{"start":{"line":5,"column":10,"offset":18},"end":{"line":5,"column":124,"offset":132}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Primitive"},"children":[{"type":"text","value":"primitive values","position":{"start":{"line":5,"column":125,"offset":133},"end":{"line":5,"column":141,"offset":149}}}],"position":{"start":{"line":5,"column":124,"offset":132},"end":{"line":5,"column":203,"offset":211}}},{"type":"text","value":") may be used as either a key or a value.","position":{"start":{"line":5,"column":203,"offset":211},"end":{"line":5,"column":244,"offset":252}}}],"position":{"start":{"line":5,"column":1,"offset":9},"end":{"line":5,"column":244,"offset":252}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Description","position":{"start":{"line":7,"column":4,"offset":257},"end":{"line":7,"column":15,"offset":268}}}],"position":{"start":{"line":7,"column":1,"offset":254},"end":{"line":7,"column":15,"offset":268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A ","position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":3,"offset":272}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":9,"column":3,"offset":272},"end":{"line":9,"column":8,"offset":277}}},{"type":"text","value":" object iterates its elements in insertion order â€” a ","position":{"start":{"line":9,"column":8,"offset":277},"end":{"line":9,"column":61,"offset":330}}},{"type":"element","tagName":"a","properties":{"href":"../statements/for...of"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for...of"}],"position":{"start":{"line":9,"column":62,"offset":331},"end":{"line":9,"column":72,"offset":341}}}],"position":{"start":{"line":9,"column":61,"offset":330},"end":{"line":9,"column":97,"offset":366}}},{"type":"text","value":" loop returns an array of ","position":{"start":{"line":9,"column":97,"offset":366},"end":{"line":9,"column":123,"offset":392}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":9,"column":123,"offset":392},"end":{"line":9,"column":137,"offset":406}}},{"type":"text","value":" for each iteration.","position":{"start":{"line":9,"column":137,"offset":406},"end":{"line":9,"column":157,"offset":426}}}],"position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":157,"offset":426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Key equality","position":{"start":{"line":11,"column":5,"offset":432},"end":{"line":11,"column":17,"offset":444}}}],"position":{"start":{"line":11,"column":1,"offset":428},"end":{"line":11,"column":17,"offset":444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Key equality is based on the ","position":{"start":{"line":13,"column":3,"offset":448},"end":{"line":13,"column":32,"offset":477}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sameValueZero"}],"position":{"start":{"line":13,"column":33,"offset":478},"end":{"line":13,"column":48,"offset":493}}}],"position":{"start":{"line":13,"column":32,"offset":477},"end":{"line":13,"column":165,"offset":610}}},{"type":"text","value":" algorithm.","position":{"start":{"line":13,"column":165,"offset":610},"end":{"line":13,"column":176,"offset":621}}}],"position":{"start":{"line":13,"column":1,"offset":446},"end":{"line":13,"column":176,"offset":621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"nan"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":14,"column":4,"offset":625},"end":{"line":14,"column":9,"offset":630}}}],"position":{"start":{"line":14,"column":3,"offset":624},"end":{"line":14,"column":15,"offset":636}}},{"type":"text","value":" is considered the same as ","position":{"start":{"line":14,"column":15,"offset":636},"end":{"line":14,"column":42,"offset":663}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":14,"column":42,"offset":663},"end":{"line":14,"column":47,"offset":668}}},{"type":"text","value":" (even though ","position":{"start":{"line":14,"column":47,"offset":668},"end":{"line":14,"column":61,"offset":682}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN !== NaN"}],"position":{"start":{"line":14,"column":61,"offset":682},"end":{"line":14,"column":74,"offset":695}}},{"type":"text","value":") and all other values are considered equal according to the semantics of the ","position":{"start":{"line":14,"column":74,"offset":695},"end":{"line":14,"column":152,"offset":773}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"==="}],"position":{"start":{"line":14,"column":152,"offset":773},"end":{"line":14,"column":157,"offset":778}}},{"type":"text","value":" operator.","position":{"start":{"line":14,"column":157,"offset":778},"end":{"line":14,"column":167,"offset":788}}}],"position":{"start":{"line":14,"column":1,"offset":622},"end":{"line":14,"column":167,"offset":788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In the current ECMAScript specification, ","position":{"start":{"line":15,"column":3,"offset":791},"end":{"line":15,"column":44,"offset":832}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-0"}],"position":{"start":{"line":15,"column":44,"offset":832},"end":{"line":15,"column":48,"offset":836}}},{"type":"text","value":" and ","position":{"start":{"line":15,"column":48,"offset":836},"end":{"line":15,"column":53,"offset":841}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"+0"}],"position":{"start":{"line":15,"column":53,"offset":841},"end":{"line":15,"column":57,"offset":845}}},{"type":"text","value":" are considered equal, although this was not so in earlier drafts. See ","position":{"start":{"line":15,"column":57,"offset":845},"end":{"line":15,"column":128,"offset":916}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"\"Value equality for -0 and 0\"","position":{"start":{"line":15,"column":129,"offset":917},"end":{"line":15,"column":158,"offset":946}}}],"position":{"start":{"line":15,"column":128,"offset":916},"end":{"line":15,"column":159,"offset":947}}},{"type":"text","value":" in the ","position":{"start":{"line":15,"column":159,"offset":947},"end":{"line":15,"column":167,"offset":955}}},{"type":"element","tagName":"a","properties":{"href":"#browser_compatibility"},"children":[{"type":"text","value":"Browser compatibility","position":{"start":{"line":15,"column":168,"offset":956},"end":{"line":15,"column":189,"offset":977}}}],"position":{"start":{"line":15,"column":167,"offset":955},"end":{"line":15,"column":214,"offset":1002}}},{"type":"text","value":" table for details.","position":{"start":{"line":15,"column":214,"offset":1002},"end":{"line":15,"column":233,"offset":1021}}}],"position":{"start":{"line":15,"column":1,"offset":789},"end":{"line":15,"column":233,"offset":1021}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":446},"end":{"line":15,"column":233,"offset":1021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Objects vs. Maps","position":{"start":{"line":17,"column":5,"offset":1027},"end":{"line":17,"column":21,"offset":1043}}}],"position":{"start":{"line":17,"column":1,"offset":1023},"end":{"line":17,"column":21,"offset":1043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"object"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object"}],"position":{"start":{"line":19,"column":2,"offset":1046},"end":{"line":19,"column":10,"offset":1054}}}],"position":{"start":{"line":19,"column":1,"offset":1045},"end":{"line":19,"column":19,"offset":1063}}},{"type":"text","value":" is similar to ","position":{"start":{"line":19,"column":19,"offset":1063},"end":{"line":19,"column":34,"offset":1078}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":19,"column":34,"offset":1078},"end":{"line":19,"column":39,"offset":1083}}},{"type":"text","value":"â€”both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. For this reason (and because there were no built-in alternatives), ","position":{"start":{"line":19,"column":39,"offset":1083},"end":{"line":19,"column":225,"offset":1269}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object"}],"position":{"start":{"line":19,"column":225,"offset":1269},"end":{"line":19,"column":233,"offset":1277}}},{"type":"text","value":" has been used as ","position":{"start":{"line":19,"column":233,"offset":1277},"end":{"line":19,"column":251,"offset":1295}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":19,"column":251,"offset":1295},"end":{"line":19,"column":256,"offset":1300}}},{"type":"text","value":" historically.","position":{"start":{"line":19,"column":256,"offset":1300},"end":{"line":19,"column":270,"offset":1314}}}],"position":{"start":{"line":19,"column":1,"offset":1045},"end":{"line":19,"column":270,"offset":1314}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, there are important differences that make ","position":{"start":{"line":21,"column":1,"offset":1316},"end":{"line":21,"column":52,"offset":1367}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":21,"column":52,"offset":1367},"end":{"line":21,"column":57,"offset":1372}}},{"type":"text","value":" preferable in certain cases:","position":{"start":{"line":21,"column":57,"offset":1372},"end":{"line":21,"column":86,"offset":1401}}}],"position":{"start":{"line":21,"column":1,"offset":1316},"end":{"line":21,"column":86,"offset":1401}}},{"type":"text","value":"\n"},{"type":"raw","value":"<table><colgroup><col style=\"width: 33%\" /><col style=\"width: 33%\" /><col style=\"width: 33%\" /></colgroup><thead><tr class=\"header\"><th></th><th>Map</th><th>Object</th></tr></thead><tbody><tr class=\"odd\"><td>Accidental Keys</td><td>A <code>Map</code> does not contain any keys by default. It only contains what is explicitly put into it.</td><td><p>An <code>Object</code> has a prototype, so it contains default keys that could collide with your own keys if you're not careful.</p><div class=\"notecard note\"><p><strong>Note:</strong> As of ES5, this can be bypassed by using <a href=\"object/create\"><code>Object.create(null)</code></a>, but this is seldom done.</p></div></td></tr><tr class=\"even\"><td>Key Types</td><td>A <code>Map</code>'s keys can be any value (including functions, objects, or any primitive).</td><td>The keys of an <code>Object</code> must be either a <a href=\"string\"><code>String</code></a> or a <a href=\"symbol\"><code>Symbol</code></a>.</td></tr><tr class=\"odd\"><td>Key Order</td><td><p>The keys in <code>Map</code> are ordered in a simple, straightforward way: A <code>Map</code> object iterates entries, keys, and values in the order of entry insertion.</p></td><td><p>Although the keys of an ordinary <code>Object</code> are ordered now, this was not always the case, and the order is complex. As a result, it's best not to rely on property order.</p><p>The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. See the <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\">OrdinaryOwnPropertyKeys</a> and <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\">EnumerateObjectProperties</a> abstract specification operations. But note that no single mechanism iterates <strong>all</strong> of an object's properties; the various mechanisms each include different subsets of properties. (<a href=\"../statements/for...in\"><code>for-in</code></a> includes only enumerable string-keyed properties; <a href=\"object/keys\"><code>Object.keys</code></a> includes only own, enumerable, string-keyed properties; <a href=\"object/getownpropertynames\"><code>Object.getOwnPropertyNames</code></a> includes own, string-keyed properties even if non-enumerable; <a href=\"object/getownpropertysymbols\"><code>Object.getOwnPropertySymbols</code></a> does the same for just <code>Symbol</code>-keyed properties, etc.)</p></td></tr><tr class=\"even\"><td><p>Size</p></td><td>The number of items in a <code>Map</code> is easily retrieved from its <a href=\"map/size\"><code>size</code></a> property.</td><td>The number of items in an <code>Object</code> must be determined manually.</td></tr><tr class=\"odd\"><td>Iteration</td><td>A <code>Map</code> is an <a href=\"../iteration_protocols\">iterable</a>, so it can be directly iterated.</td><td><p><code>Object</code> does not implement an <a href=\"../iteration_protocols#the_iterable_protocol\">iteration protocol</a>, and so objects are not directly iterable using the JavaScript <a href=\"../statements/for...of\">for...of</a> statement (by default).</p><div class=\"notecard note\"><p><strong>Note:</strong></p><ul><li>An object can implement the iteration protocol, or you can get an iterable for an object using <a href=\"object/keys\"><code>Object.keys</code></a> or <a href=\"object/entries\"><code>Object.entries</code></a>.</li><li>The <a href=\"../statements/for...in\">for...in</a> statement allows you to iterate over the <em>enumerable</em> properties of an object.</li></ul></div></td></tr><tr class=\"even\"><td>Performance</td><td><p>Performs better in scenarios involving frequent additions and removals of key-value pairs.</p></td><td><p>Not optimized for frequent additions and removals of key-value pairs.</p></td></tr></tbody></table>","position":{"start":{"line":23,"column":1,"offset":1403},"end":{"line":23,"column":3789,"offset":5191}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Setting object properties","position":{"start":{"line":25,"column":5,"offset":5197},"end":{"line":25,"column":30,"offset":5222}}}],"position":{"start":{"line":25,"column":1,"offset":5193},"end":{"line":25,"column":30,"offset":5222}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Setting Object properties works for Map objects as well, and can cause considerable confusion.","position":{"start":{"line":27,"column":1,"offset":5224},"end":{"line":27,"column":95,"offset":5318}}}],"position":{"start":{"line":27,"column":1,"offset":5224},"end":{"line":27,"column":95,"offset":5318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Therefore, this appears to work in a way:","position":{"start":{"line":29,"column":1,"offset":5320},"end":{"line":29,"column":42,"offset":5361}}}],"position":{"start":{"line":29,"column":1,"offset":5320},"end":{"line":29,"column":42,"offset":5361}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let wrongMap = new Map()\nwrongMap['bla'] = 'blaa'\nwrongMap['bla2'] = 'blaaa2'\n\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n"}],"position":{"start":{"line":31,"column":1,"offset":5363},"end":{"line":35,"column":66,"offset":5519}}}],"position":{"start":{"line":31,"column":1,"offset":5363},"end":{"line":35,"column":66,"offset":5519}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:","position":{"start":{"line":37,"column":1,"offset":5521},"end":{"line":37,"column":217,"offset":5737}}}],"position":{"start":{"line":37,"column":1,"offset":5521},"end":{"line":37,"column":217,"offset":5737}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wrongMap.has('bla')    // false\nwrongMap.delete('bla') // false\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n"}],"position":{"start":{"line":39,"column":1,"offset":5739},"end":{"line":41,"column":66,"offset":5876}}}],"position":{"start":{"line":39,"column":1,"offset":5739},"end":{"line":41,"column":66,"offset":5876}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The correct usage for storing data in the Map is through the ","position":{"start":{"line":43,"column":1,"offset":5878},"end":{"line":43,"column":62,"offset":5939}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"set(key, value)"}],"position":{"start":{"line":43,"column":62,"offset":5939},"end":{"line":43,"column":79,"offset":5956}}},{"type":"text","value":" method.","position":{"start":{"line":43,"column":79,"offset":5956},"end":{"line":43,"column":87,"offset":5964}}}],"position":{"start":{"line":43,"column":1,"offset":5878},"end":{"line":43,"column":87,"offset":5964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let contacts = new Map()\ncontacts.set('Jessie', {phone: \"213-555-1234\", address: \"123 N 1st Ave\"})\ncontacts.has('Jessie') // true\ncontacts.get('Hilary') // undefined\ncontacts.set('Hilary', {phone: \"617-555-4321\", address: \"321 S 2nd St\"})\ncontacts.get('Jessie') // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete('Raymond') // false\ncontacts.delete('Jessie') // true\nconsole.log(contacts.size) // 1\n"}],"position":{"start":{"line":45,"column":1,"offset":5966},"end":{"line":53,"column":36,"offset":6418}}}],"position":{"start":{"line":45,"column":1,"offset":5966},"end":{"line":53,"column":36,"offset":6418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Constructor","position":{"start":{"line":55,"column":4,"offset":6423},"end":{"line":55,"column":15,"offset":6434}}}],"position":{"start":{"line":55,"column":1,"offset":6420},"end":{"line":55,"column":15,"offset":6434}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map()"}],"position":{"start":{"line":57,"column":2,"offset":6437},"end":{"line":57,"column":9,"offset":6444}}}],"position":{"start":{"line":57,"column":1,"offset":6436},"end":{"line":57,"column":19,"offset":6454}}},{"type":"text","value":"\nCreates a new ","position":{"start":{"line":57,"column":19,"offset":6454},"end":{"line":58,"column":15,"offset":6469}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":58,"column":15,"offset":6469},"end":{"line":58,"column":20,"offset":6474}}},{"type":"text","value":" object.","position":{"start":{"line":58,"column":20,"offset":6474},"end":{"line":58,"column":28,"offset":6482}}}],"position":{"start":{"line":57,"column":1,"offset":6436},"end":{"line":58,"column":28,"offset":6482}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Static properties","position":{"start":{"line":60,"column":4,"offset":6487},"end":{"line":60,"column":21,"offset":6504}}}],"position":{"start":{"line":60,"column":1,"offset":6484},"end":{"line":60,"column":21,"offset":6504}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/@@species"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"get Map[@@species]"}],"position":{"start":{"line":62,"column":2,"offset":6507},"end":{"line":62,"column":22,"offset":6527}}}],"position":{"start":{"line":62,"column":1,"offset":6506},"end":{"line":62,"column":38,"offset":6543}}},{"type":"text","value":"\nThe constructor function that is used to create derived objects.","position":{"start":{"line":62,"column":38,"offset":6543},"end":{"line":63,"column":65,"offset":6608}}}],"position":{"start":{"line":62,"column":1,"offset":6506},"end":{"line":63,"column":65,"offset":6608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Instance properties","position":{"start":{"line":65,"column":4,"offset":6613},"end":{"line":65,"column":23,"offset":6632}}}],"position":{"start":{"line":65,"column":1,"offset":6610},"end":{"line":65,"column":23,"offset":6632}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/size"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.size"}],"position":{"start":{"line":67,"column":2,"offset":6635},"end":{"line":67,"column":22,"offset":6655}}}],"position":{"start":{"line":67,"column":1,"offset":6634},"end":{"line":67,"column":33,"offset":6666}}},{"type":"text","value":"\nReturns the number of key/value pairs in the ","position":{"start":{"line":67,"column":33,"offset":6666},"end":{"line":68,"column":46,"offset":6712}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":68,"column":46,"offset":6712},"end":{"line":68,"column":51,"offset":6717}}},{"type":"text","value":" object.","position":{"start":{"line":68,"column":51,"offset":6717},"end":{"line":68,"column":59,"offset":6725}}}],"position":{"start":{"line":67,"column":1,"offset":6634},"end":{"line":68,"column":59,"offset":6725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Instance methods","position":{"start":{"line":70,"column":4,"offset":6730},"end":{"line":70,"column":20,"offset":6746}}}],"position":{"start":{"line":70,"column":1,"offset":6727},"end":{"line":70,"column":20,"offset":6746}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/clear"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.clear()"}],"position":{"start":{"line":72,"column":2,"offset":6749},"end":{"line":72,"column":25,"offset":6772}}}],"position":{"start":{"line":72,"column":1,"offset":6748},"end":{"line":72,"column":37,"offset":6784}}},{"type":"text","value":"\nRemoves all key-value pairs from the ","position":{"start":{"line":72,"column":37,"offset":6784},"end":{"line":73,"column":38,"offset":6822}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":73,"column":38,"offset":6822},"end":{"line":73,"column":43,"offset":6827}}},{"type":"text","value":" object.","position":{"start":{"line":73,"column":43,"offset":6827},"end":{"line":73,"column":51,"offset":6835}}}],"position":{"start":{"line":72,"column":1,"offset":6748},"end":{"line":73,"column":51,"offset":6835}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/delete"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.delete(key)"}],"position":{"start":{"line":75,"column":2,"offset":6838},"end":{"line":75,"column":29,"offset":6865}}}],"position":{"start":{"line":75,"column":1,"offset":6837},"end":{"line":75,"column":42,"offset":6878}}},{"type":"text","value":"\nReturns ","position":{"start":{"line":75,"column":42,"offset":6878},"end":{"line":76,"column":9,"offset":6887}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"true"}],"position":{"start":{"line":76,"column":9,"offset":6887},"end":{"line":76,"column":15,"offset":6893}}},{"type":"text","value":" if an element in the ","position":{"start":{"line":76,"column":15,"offset":6893},"end":{"line":76,"column":37,"offset":6915}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":76,"column":37,"offset":6915},"end":{"line":76,"column":42,"offset":6920}}},{"type":"text","value":" object existed and has been removed, or ","position":{"start":{"line":76,"column":42,"offset":6920},"end":{"line":76,"column":83,"offset":6961}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"false"}],"position":{"start":{"line":76,"column":83,"offset":6961},"end":{"line":76,"column":90,"offset":6968}}},{"type":"text","value":" if the element does not exist. ","position":{"start":{"line":76,"column":90,"offset":6968},"end":{"line":76,"column":122,"offset":7000}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.has(key)"}],"position":{"start":{"line":76,"column":122,"offset":7000},"end":{"line":76,"column":146,"offset":7024}}},{"type":"text","value":" will return ","position":{"start":{"line":76,"column":146,"offset":7024},"end":{"line":76,"column":159,"offset":7037}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"false"}],"position":{"start":{"line":76,"column":159,"offset":7037},"end":{"line":76,"column":166,"offset":7044}}},{"type":"text","value":" afterwards.","position":{"start":{"line":76,"column":166,"offset":7044},"end":{"line":76,"column":178,"offset":7056}}}],"position":{"start":{"line":75,"column":1,"offset":6837},"end":{"line":76,"column":178,"offset":7056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/get"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.get(key)"}],"position":{"start":{"line":78,"column":2,"offset":7059},"end":{"line":78,"column":26,"offset":7083}}}],"position":{"start":{"line":78,"column":1,"offset":7058},"end":{"line":78,"column":36,"offset":7093}}},{"type":"text","value":"\nReturns the value associated to the ","position":{"start":{"line":78,"column":36,"offset":7093},"end":{"line":79,"column":37,"offset":7130}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":79,"column":37,"offset":7130},"end":{"line":79,"column":42,"offset":7135}}},{"type":"text","value":", or ","position":{"start":{"line":79,"column":42,"offset":7135},"end":{"line":79,"column":47,"offset":7140}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"undefined"}],"position":{"start":{"line":79,"column":47,"offset":7140},"end":{"line":79,"column":58,"offset":7151}}},{"type":"text","value":" if there is none.","position":{"start":{"line":79,"column":58,"offset":7151},"end":{"line":79,"column":76,"offset":7169}}}],"position":{"start":{"line":78,"column":1,"offset":7058},"end":{"line":79,"column":76,"offset":7169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/has"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.has(key)"}],"position":{"start":{"line":81,"column":2,"offset":7172},"end":{"line":81,"column":26,"offset":7196}}}],"position":{"start":{"line":81,"column":1,"offset":7171},"end":{"line":81,"column":36,"offset":7206}}},{"type":"text","value":"\nReturns a boolean asserting whether a value has been associated to the ","position":{"start":{"line":81,"column":36,"offset":7206},"end":{"line":82,"column":72,"offset":7278}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":82,"column":72,"offset":7278},"end":{"line":82,"column":77,"offset":7283}}},{"type":"text","value":" in the ","position":{"start":{"line":82,"column":77,"offset":7283},"end":{"line":82,"column":85,"offset":7291}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":82,"column":85,"offset":7291},"end":{"line":82,"column":90,"offset":7296}}},{"type":"text","value":" object or not.","position":{"start":{"line":82,"column":90,"offset":7296},"end":{"line":82,"column":105,"offset":7311}}}],"position":{"start":{"line":81,"column":1,"offset":7171},"end":{"line":82,"column":105,"offset":7311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/set"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.set(key, value)"}],"position":{"start":{"line":84,"column":2,"offset":7314},"end":{"line":84,"column":33,"offset":7345}}}],"position":{"start":{"line":84,"column":1,"offset":7313},"end":{"line":84,"column":43,"offset":7355}}},{"type":"text","value":"\nSets the ","position":{"start":{"line":84,"column":43,"offset":7355},"end":{"line":85,"column":10,"offset":7365}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value"}],"position":{"start":{"line":85,"column":10,"offset":7365},"end":{"line":85,"column":17,"offset":7372}}},{"type":"text","value":" for the ","position":{"start":{"line":85,"column":17,"offset":7372},"end":{"line":85,"column":26,"offset":7381}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":85,"column":26,"offset":7381},"end":{"line":85,"column":31,"offset":7386}}},{"type":"text","value":" in the ","position":{"start":{"line":85,"column":31,"offset":7386},"end":{"line":85,"column":39,"offset":7394}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":85,"column":39,"offset":7394},"end":{"line":85,"column":44,"offset":7399}}},{"type":"text","value":" object. Returns the ","position":{"start":{"line":85,"column":44,"offset":7399},"end":{"line":85,"column":65,"offset":7420}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":85,"column":65,"offset":7420},"end":{"line":85,"column":70,"offset":7425}}},{"type":"text","value":" object.","position":{"start":{"line":85,"column":70,"offset":7425},"end":{"line":85,"column":78,"offset":7433}}}],"position":{"start":{"line":84,"column":1,"offset":7313},"end":{"line":85,"column":78,"offset":7433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iteration methods","position":{"start":{"line":87,"column":5,"offset":7439},"end":{"line":87,"column":22,"offset":7456}}}],"position":{"start":{"line":87,"column":1,"offset":7435},"end":{"line":87,"column":22,"offset":7456}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/@@iterator"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype[@@iterator]()"}],"position":{"start":{"line":89,"column":2,"offset":7459},"end":{"line":89,"column":31,"offset":7488}}}],"position":{"start":{"line":89,"column":1,"offset":7458},"end":{"line":89,"column":48,"offset":7505}}},{"type":"text","value":"\nReturns a new Iterator object that contains ","position":{"start":{"line":89,"column":48,"offset":7505},"end":{"line":90,"column":45,"offset":7550}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":90,"column":45,"offset":7550},"end":{"line":90,"column":59,"offset":7564}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":90,"column":59,"offset":7564},"end":{"line":90,"column":84,"offset":7589}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":90,"column":84,"offset":7589},"end":{"line":90,"column":89,"offset":7594}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":90,"column":89,"offset":7594},"end":{"line":90,"column":116,"offset":7621}}}],"position":{"start":{"line":89,"column":1,"offset":7458},"end":{"line":90,"column":116,"offset":7621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/keys"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.keys()"}],"position":{"start":{"line":92,"column":2,"offset":7624},"end":{"line":92,"column":24,"offset":7646}}}],"position":{"start":{"line":92,"column":1,"offset":7623},"end":{"line":92,"column":35,"offset":7657}}},{"type":"text","value":"\nReturns a new Iterator object that contains the ","position":{"start":{"line":92,"column":35,"offset":7657},"end":{"line":93,"column":49,"offset":7706}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"keys","position":{"start":{"line":93,"column":51,"offset":7708},"end":{"line":93,"column":55,"offset":7712}}}],"position":{"start":{"line":93,"column":49,"offset":7706},"end":{"line":93,"column":57,"offset":7714}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":93,"column":57,"offset":7714},"end":{"line":93,"column":82,"offset":7739}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":93,"column":82,"offset":7739},"end":{"line":93,"column":87,"offset":7744}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":93,"column":87,"offset":7744},"end":{"line":93,"column":114,"offset":7771}}}],"position":{"start":{"line":92,"column":1,"offset":7623},"end":{"line":93,"column":114,"offset":7771}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/values"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.values()"}],"position":{"start":{"line":95,"column":2,"offset":7774},"end":{"line":95,"column":26,"offset":7798}}}],"position":{"start":{"line":95,"column":1,"offset":7773},"end":{"line":95,"column":39,"offset":7811}}},{"type":"text","value":"\nReturns a new Iterator object that contains the ","position":{"start":{"line":95,"column":39,"offset":7811},"end":{"line":96,"column":49,"offset":7860}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"values","position":{"start":{"line":96,"column":51,"offset":7862},"end":{"line":96,"column":57,"offset":7868}}}],"position":{"start":{"line":96,"column":49,"offset":7860},"end":{"line":96,"column":59,"offset":7870}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":96,"column":59,"offset":7870},"end":{"line":96,"column":84,"offset":7895}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":96,"column":84,"offset":7895},"end":{"line":96,"column":89,"offset":7900}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":96,"column":89,"offset":7900},"end":{"line":96,"column":116,"offset":7927}}}],"position":{"start":{"line":95,"column":1,"offset":7773},"end":{"line":96,"column":116,"offset":7927}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/entries"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.entries()"}],"position":{"start":{"line":98,"column":2,"offset":7930},"end":{"line":98,"column":27,"offset":7955}}}],"position":{"start":{"line":98,"column":1,"offset":7929},"end":{"line":98,"column":41,"offset":7969}}},{"type":"text","value":"\nReturns a new Iterator object that contains ","position":{"start":{"line":98,"column":41,"offset":7969},"end":{"line":99,"column":45,"offset":8014}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":99,"column":45,"offset":8014},"end":{"line":99,"column":59,"offset":8028}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":99,"column":59,"offset":8028},"end":{"line":99,"column":84,"offset":8053}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":99,"column":84,"offset":8053},"end":{"line":99,"column":89,"offset":8058}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":99,"column":89,"offset":8058},"end":{"line":99,"column":116,"offset":8085}}}],"position":{"start":{"line":98,"column":1,"offset":7929},"end":{"line":99,"column":116,"offset":8085}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.forEach(callbackFn[, thisArg])"}],"position":{"start":{"line":101,"column":2,"offset":8088},"end":{"line":101,"column":48,"offset":8134}}}],"position":{"start":{"line":101,"column":1,"offset":8087},"end":{"line":101,"column":62,"offset":8148}}},{"type":"text","value":"\nCalls ","position":{"start":{"line":101,"column":62,"offset":8148},"end":{"line":102,"column":7,"offset":8155}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callbackFn"}],"position":{"start":{"line":102,"column":7,"offset":8155},"end":{"line":102,"column":19,"offset":8167}}},{"type":"text","value":" once for each key-value pair present in the ","position":{"start":{"line":102,"column":19,"offset":8167},"end":{"line":102,"column":64,"offset":8212}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":102,"column":64,"offset":8212},"end":{"line":102,"column":69,"offset":8217}}},{"type":"text","value":" object, in insertion order. If a ","position":{"start":{"line":102,"column":69,"offset":8217},"end":{"line":102,"column":103,"offset":8251}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"thisArg"}],"position":{"start":{"line":102,"column":103,"offset":8251},"end":{"line":102,"column":112,"offset":8260}}},{"type":"text","value":" parameter is provided to ","position":{"start":{"line":102,"column":112,"offset":8260},"end":{"line":102,"column":138,"offset":8286}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forEach"}],"position":{"start":{"line":102,"column":138,"offset":8286},"end":{"line":102,"column":147,"offset":8295}}},{"type":"text","value":", it will be used as the ","position":{"start":{"line":102,"column":147,"offset":8295},"end":{"line":102,"column":172,"offset":8320}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":102,"column":172,"offset":8320},"end":{"line":102,"column":178,"offset":8326}}},{"type":"text","value":" value for each callback.","position":{"start":{"line":102,"column":178,"offset":8326},"end":{"line":102,"column":203,"offset":8351}}}],"position":{"start":{"line":101,"column":1,"offset":8087},"end":{"line":102,"column":203,"offset":8351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Examples","position":{"start":{"line":104,"column":4,"offset":8356},"end":{"line":104,"column":12,"offset":8364}}}],"position":{"start":{"line":104,"column":1,"offset":8353},"end":{"line":104,"column":12,"offset":8364}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Using the Map object","position":{"start":{"line":106,"column":5,"offset":8370},"end":{"line":106,"column":25,"offset":8390}}}],"position":{"start":{"line":106,"column":1,"offset":8366},"end":{"line":106,"column":25,"offset":8390}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\n\nlet keyString = 'a string'\nlet keyObj    = {}\nlet keyFunc   = function() {}\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\")\nmyMap.set(keyObj, 'value associated with keyObj')\nmyMap.set(keyFunc, 'value associated with keyFunc')\n\nmyMap.size              // 3\n\n// getting the values\nmyMap.get(keyString)    // \"value associated with 'a string'\"\nmyMap.get(keyObj)       // \"value associated with keyObj\"\nmyMap.get(keyFunc)      // \"value associated with keyFunc\"\n\nmyMap.get('a string')    // \"value associated with 'a string'\"\n                         // because keyString === 'a string'\nmyMap.get({})            // undefined, because keyObj !== {}\nmyMap.get(function() {}) // undefined, because keyFunc !== function () {}\n"}],"position":{"start":{"line":108,"column":1,"offset":8392},"end":{"line":129,"column":78,"offset":9232}}}],"position":{"start":{"line":108,"column":1,"offset":8392},"end":{"line":129,"column":78,"offset":9232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Using NaN as Map keys","position":{"start":{"line":131,"column":5,"offset":9238},"end":{"line":131,"column":26,"offset":9259}}}],"position":{"start":{"line":131,"column":1,"offset":9234},"end":{"line":131,"column":26,"offset":9259}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"nan"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":133,"column":2,"offset":9262},"end":{"line":133,"column":7,"offset":9267}}}],"position":{"start":{"line":133,"column":1,"offset":9261},"end":{"line":133,"column":13,"offset":9273}}},{"type":"text","value":" can also be used as a key. Even though every ","position":{"start":{"line":133,"column":13,"offset":9273},"end":{"line":133,"column":59,"offset":9319}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":133,"column":59,"offset":9319},"end":{"line":133,"column":64,"offset":9324}}},{"type":"text","value":" is not equal to itself (","position":{"start":{"line":133,"column":64,"offset":9324},"end":{"line":133,"column":89,"offset":9349}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN !== NaN"}],"position":{"start":{"line":133,"column":89,"offset":9349},"end":{"line":133,"column":102,"offset":9362}}},{"type":"text","value":" is true), the following example works because ","position":{"start":{"line":133,"column":102,"offset":9362},"end":{"line":133,"column":149,"offset":9409}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":133,"column":149,"offset":9409},"end":{"line":133,"column":154,"offset":9414}}},{"type":"text","value":"s are indistinguishable from each other:","position":{"start":{"line":133,"column":154,"offset":9414},"end":{"line":133,"column":194,"offset":9454}}}],"position":{"start":{"line":133,"column":1,"offset":9261},"end":{"line":133,"column":194,"offset":9454}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\nmyMap.set(NaN, 'not a number')\n\nmyMap.get(NaN)\n// \"not a number\"\n\nlet otherNaN = Number('foo')\nmyMap.get(otherNaN)\n// \"not a number\"\n"}],"position":{"start":{"line":135,"column":1,"offset":9456},"end":{"line":143,"column":22,"offset":9638}}}],"position":{"start":{"line":135,"column":1,"offset":9456},"end":{"line":143,"column":22,"offset":9638}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterating Map with for..of","position":{"start":{"line":145,"column":5,"offset":9644},"end":{"line":145,"column":31,"offset":9670}}}],"position":{"start":{"line":145,"column":1,"offset":9640},"end":{"line":145,"column":31,"offset":9670}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be iterated using a ","position":{"start":{"line":147,"column":1,"offset":9672},"end":{"line":147,"column":30,"offset":9701}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for..of"}],"position":{"start":{"line":147,"column":30,"offset":9701},"end":{"line":147,"column":39,"offset":9710}}},{"type":"text","value":" loop:","position":{"start":{"line":147,"column":39,"offset":9710},"end":{"line":147,"column":45,"offset":9716}}}],"position":{"start":{"line":147,"column":1,"offset":9672},"end":{"line":147,"column":45,"offset":9716}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\nmyMap.set(0, 'zero')\nmyMap.set(1, 'one')\n\nfor (let [key, value] of myMap) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n\nfor (let key of myMap.keys()) {\n  console.log(key)\n}\n// 0\n// 1\n\nfor (let value of myMap.values()) {\n  console.log(value)\n}\n// zero\n// one\n\nfor (let [key, value] of myMap.entries()) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n"}],"position":{"start":{"line":149,"column":1,"offset":9718},"end":{"line":175,"column":15,"offset":10211}}}],"position":{"start":{"line":149,"column":1,"offset":9718},"end":{"line":175,"column":15,"offset":10211}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterating Map with forEach()","position":{"start":{"line":177,"column":5,"offset":10217},"end":{"line":177,"column":33,"offset":10245}}}],"position":{"start":{"line":177,"column":1,"offset":10213},"end":{"line":177,"column":33,"offset":10245}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be iterated using the ","position":{"start":{"line":179,"column":1,"offset":10247},"end":{"line":179,"column":32,"offset":10278}}},{"type":"element","tagName":"a","properties":{"href":"map/foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forEach()"}],"position":{"start":{"line":179,"column":33,"offset":10279},"end":{"line":179,"column":44,"offset":10290}}}],"position":{"start":{"line":179,"column":32,"offset":10278},"end":{"line":179,"column":58,"offset":10304}}},{"type":"text","value":" method:","position":{"start":{"line":179,"column":58,"offset":10304},"end":{"line":179,"column":66,"offset":10312}}}],"position":{"start":{"line":179,"column":1,"offset":10247},"end":{"line":179,"column":66,"offset":10312}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"myMap.forEach(function(value, key) {\n  console.log(key + ' = ' + value)\n})\n// 0 = zero\n// 1 = one\n"}],"position":{"start":{"line":181,"column":1,"offset":10314},"end":{"line":185,"column":15,"offset":10431}}}],"position":{"start":{"line":181,"column":1,"offset":10314},"end":{"line":185,"column":15,"offset":10431}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Relation with Array objects","position":{"start":{"line":187,"column":5,"offset":10437},"end":{"line":187,"column":32,"offset":10464}}}],"position":{"start":{"line":187,"column":1,"offset":10433},"end":{"line":187,"column":32,"offset":10464}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let kvArray = [['key1', 'value1'], ['key2', 'value2']]\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nlet myMap = new Map(kvArray)\n\nmyMap.get('key1') // returns \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)) // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap])\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())) // [\"key1\", \"key2\"]\n"}],"position":{"start":{"line":189,"column":1,"offset":10466},"end":{"line":203,"column":62,"offset":11072}}}],"position":{"start":{"line":189,"column":1,"offset":10466},"end":{"line":203,"column":62,"offset":11072}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Cloning and merging Maps","position":{"start":{"line":205,"column":5,"offset":11078},"end":{"line":205,"column":29,"offset":11102}}}],"position":{"start":{"line":205,"column":1,"offset":11074},"end":{"line":205,"column":29,"offset":11102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just like ","position":{"start":{"line":207,"column":1,"offset":11104},"end":{"line":207,"column":11,"offset":11114}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array"}],"position":{"start":{"line":207,"column":11,"offset":11114},"end":{"line":207,"column":18,"offset":11121}}},{"type":"text","value":"s, ","position":{"start":{"line":207,"column":18,"offset":11121},"end":{"line":207,"column":21,"offset":11124}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":207,"column":21,"offset":11124},"end":{"line":207,"column":26,"offset":11129}}},{"type":"text","value":"s can be cloned:","position":{"start":{"line":207,"column":26,"offset":11129},"end":{"line":207,"column":42,"offset":11145}}}],"position":{"start":{"line":207,"column":1,"offset":11104},"end":{"line":207,"column":42,"offset":11145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let original = new Map([\n  [1, 'one']\n])\n\nlet clone = new Map(original)\n\nconsole.log(clone.get(1))       // one\nconsole.log(original === clone) // false (useful for shallow comparison)\n"}],"position":{"start":{"line":209,"column":1,"offset":11147},"end":{"line":216,"column":77,"offset":11355}}}],"position":{"start":{"line":209,"column":1,"offset":11147},"end":{"line":216,"column":77,"offset":11355}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":218,"column":3,"offset":11359},"end":{"line":218,"column":8,"offset":11364}}}],"position":{"start":{"line":218,"column":1,"offset":11357},"end":{"line":218,"column":10,"offset":11366}}},{"type":"text","value":" Keep in mind that ","position":{"start":{"line":218,"column":10,"offset":11366},"end":{"line":218,"column":29,"offset":11385}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"the data itself","position":{"start":{"line":218,"column":30,"offset":11386},"end":{"line":218,"column":45,"offset":11401}}}],"position":{"start":{"line":218,"column":29,"offset":11385},"end":{"line":218,"column":46,"offset":11402}}},{"type":"text","value":" is not cloned.","position":{"start":{"line":218,"column":46,"offset":11402},"end":{"line":218,"column":61,"offset":11417}}}],"position":{"start":{"line":218,"column":1,"offset":11357},"end":{"line":218,"column":61,"offset":11417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be merged, maintaining key uniqueness:","position":{"start":{"line":220,"column":1,"offset":11419},"end":{"line":220,"column":48,"offset":11466}}}],"position":{"start":{"line":220,"column":1,"offset":11419},"end":{"line":220,"column":48,"offset":11466}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge two maps. The last repeated key wins.\n// Spread operator essentially converts a Map to an Array\nlet merged = new Map([...first, ...second])\n\nconsole.log(merged.get(1)) // uno\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n"}],"position":{"start":{"line":222,"column":1,"offset":11468},"end":{"line":239,"column":40,"offset":11905}}}],"position":{"start":{"line":222,"column":1,"offset":11468},"end":{"line":239,"column":40,"offset":11905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be merged with Arrays, too:","position":{"start":{"line":241,"column":1,"offset":11907},"end":{"line":241,"column":37,"offset":11943}}}],"position":{"start":{"line":241,"column":1,"offset":11907},"end":{"line":241,"column":37,"offset":11943}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge maps with an array. The last repeated key wins.\nlet merged = new Map([...first, ...second, [1, 'eins']])\n\nconsole.log(merged.get(1)) // eins\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n"}],"position":{"start":{"line":243,"column":1,"offset":11945},"end":{"line":259,"column":40,"offset":12344}}}],"position":{"start":{"line":243,"column":1,"offset":11945},"end":{"line":259,"column":40,"offset":12344}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":260,"column":1,"offset":12345}}}}