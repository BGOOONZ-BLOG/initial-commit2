{"expireTime":9007200904306553000,"key":"transformer-remark-markdown-html-79531dfe48e807d52896462bfa7da26b--","val":"<hr>\n<h2>Install</h2>\n<h3>GitHub Desktop</h3>\n<p><a href=\"https://desktop.github.com/\">desktop.github.com</a></p>\n<h3>Git for All Platforms</h3>\n<p><a href=\"https://git-scm.com/\">git-scm.com</a></p>\n<p>Configure user information for all local repositories</p>\n<p><code>$ git config --global user.name \"[name]\"</code></p>\n<p>Sets the name you want attached to your commit transactions</p>\n<p><code>$ git config --global user.email \"[email address]\"</code></p>\n<p>Sets the email you want attached to your commit transactions</p>\n<p><code>$ git config --global color.ui auto</code></p>\n<p>Enables helpful colorization of command line output</p>\n<h2>Branches</h2>\n<p>Branches are an important part of working with Git. Any commits you make will be made on the branch you’re currently \"checked out” to. Use <code>git status</code> to see which branch that is.</p>\n<p><code>$ git branch [branch-name]</code></p>\n<p>Creates a new branch</p>\n<p><code>$ git switch -c [branch-name]</code></p>\n<p>Switches to the specified branch and updates the working directory</p>\n<p><code>$ git merge [branch]</code></p>\n<p>Combines the specified branch’s history into the current branch. This is usually done in pull requests, but is an important Git operation.</p>\n<p><code>$ git branch -d [branch-name]</code></p>\n<p>Deletes the specified branch</p>\n<h2>Create repositories</h2>\n<p>A new repository can either be created locally, or an existing repository can be cloned. When a repository was initialized locally, you have to push it to GitHub afterwards.</p>\n<p><code>$ git init</code></p>\n<p>The git init command turns an existing directory into a new Git repository inside the folder you are running this command. After using the <code>git init</code> command, link the local repository to an empty GitHub repository using the following command:</p>\n<p><code>$ git remote add origin [url]</code></p>\n<p>Specifies the remote repository for your local repository. The url points to a repository on GitHub.</p>\n<p><code>$ git clone [url]</code></p>\n<p>Clone (download) a repository that already exists on GitHub, including all of the files, branches, and commits</p>\n<h2>The .gitignore file</h2>\n<p>Sometimes it may be a good idea to exclude files from being tracked with Git. This is typically done in a special file named <code>.gitignore</code>. You can find helpful templates for <code>.gitignore</code> files at <a href=\"https://github.com/github/gitignore\">github.com/github/gitignore</a>.</p>\n<h2>Synchronize changes</h2>\n<p>Synchronize your local repository with the remote repository on GitHub.com</p>\n<p><code>$ git fetch</code></p>\n<p>Downloads all history from the remote tracking branches</p>\n<p><code>$ git merge</code></p>\n<p>Combines remote tracking branches into current local branch</p>\n<p><code>$ git push</code></p>\n<p>Uploads all local branch commits to GitHub</p>\n<p><code>$ git pull</code></p>\n<p>Updates your current local working branch with all new commits from the corresponding remote branch on GitHub. <code>git pull</code> is a combination of <code>git fetch</code> and <code>git merge</code></p>\n<h2>Make changes</h2>\n<p>Browse and inspect the evolution of project files</p>\n<p><code>$ git log</code></p>\n<p>Lists version history for the current branch</p>\n<p><code>$ git log --follow [file]</code></p>\n<p>Lists version history for a file, beyond renames (works only for a single file)</p>\n<p><code>$ git diff [first-branch]...[second-branch]</code></p>\n<p>Shows content differences between two branches</p>\n<p><code>$ git show [commit]</code></p>\n<p>Outputs metadata and content changes of the specified commit</p>\n<p><code>$ git add [file]</code></p>\n<p>Snapshots the file in preparation for versioning</p>\n<p><code>$ git commit -m \"[descriptive message]\"</code></p>\n<p>Records file snapshots permanently in version history</p>\n<h2>Redo commits</h2>\n<p>Erase mistakes and craft replacement history</p>\n<p><code>$ git reset [commit]</code></p>\n<p>Undoes all commits after <code>[commit]</code>, preserving changes locally</p>\n<p><code>$ git reset --hard [commit]</code></p>\n<p>Discards all history and changes back to the specified commit</p>\n<blockquote>\n<p>CAUTION! Changing history can have nasty side effects. If you need to change commits that exist on GitHub (the remote), proceed with caution. If you need help, reach out at <a href=\"https://github.community/\">github.community</a> or contact support.</p>\n</blockquote>\n<h2>Glossary</h2>\n<ul>\n<li><strong>git</strong>: an open source, distributed version-control system</li>\n<li><strong>GitHub</strong>: a platform for hosting and collaborating on Git repositories</li>\n<li><strong>commit</strong>: a Git object, a snapshot of your entire repository compressed into a SHA</li>\n<li><strong>branch</strong>: a lightweight movable pointer to a commit</li>\n<li><strong>clone</strong>: a local version of a repository, including all commits and branches</li>\n<li><strong>remote</strong>: a common repository on GitHub that all team members use to exchange their changes</li>\n<li><strong>fork</strong>: a copy of a repository on GitHub owned by a different user</li>\n<li><strong>pull request</strong>: a place to compare and discuss the differences introduced on a branch with reviews, comments, integrated tests, and more</li>\n<li><strong>HEAD</strong>: representing your current working directory, the HEAD pointer can be moved to different branches, tags, or commits when using <code>git switch</code></li>\n</ul>"}