{"expireTime":9007200904306550000,"key":"transformer-remark-markdown-html-ast-d4783f49abf0ffa0b5c999185be8256a--","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring","position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":22,"offset":23}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":22,"offset":23}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a HTML Element","position":{"start":{"line":5,"column":5,"offset":29},"end":{"line":5,"column":38,"offset":62}}}],"position":{"start":{"line":5,"column":1,"offset":25},"end":{"line":5,"column":38,"offset":62}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: you want to make a ","position":{"start":{"line":7,"column":1,"offset":64},"end":{"line":7,"column":29,"offset":92}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Button>"}],"position":{"start":{"line":7,"column":29,"offset":92},"end":{"line":7,"column":39,"offset":102}}},{"type":"text","value":" that takes all the normal props of ","position":{"start":{"line":7,"column":39,"offset":102},"end":{"line":7,"column":75,"offset":138}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<button>"}],"position":{"start":{"line":7,"column":75,"offset":138},"end":{"line":7,"column":85,"offset":148}}},{"type":"text","value":" and does extra stuff.","position":{"start":{"line":7,"column":85,"offset":148},"end":{"line":7,"column":107,"offset":170}}}],"position":{"start":{"line":7,"column":1,"offset":64},"end":{"line":7,"column":107,"offset":170}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extend ","position":{"start":{"line":9,"column":1,"offset":172},"end":{"line":9,"column":18,"offset":189}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ComponentPropsWithoutRef<'button'>"}],"position":{"start":{"line":9,"column":18,"offset":189},"end":{"line":9,"column":60,"offset":231}}}],"position":{"start":{"line":9,"column":1,"offset":172},"end":{"line":9,"column":60,"offset":231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// usage\nfunction App() {\n    // Type '\"foo\"' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.(2322)\n    // return <Button type=\"foo\"> sldkj </Button>\n\n    // no error\n    return <Button type=\"button\"> text </Button>;\n}\n\n// implementation\nexport interface ButtonProps extends React.ComponentPropsWithoutRef<'button'> {\n    specialProp?: string;\n}\nexport function Button(props: ButtonProps) {\n    const { specialProp, ...rest } = props;\n    // do something with specialProp\n    return <button {...rest} />;\n}\n"}],"position":{"start":{"line":11,"column":1,"offset":233},"end":{"line":30,"column":4,"offset":773}}}],"position":{"start":{"line":11,"column":1,"offset":233},"end":{"line":30,"column":4,"offset":773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUI4wPQtwCuqyA5lowQ4A7fMAhC4AQTBgAFAEo4Ab0Zw4bOABUAnmCzkARAQgQDZOMHRCI8NKmA8hyAEYAbfTAhwYu-WQPOHDCeQgZwAD5wBqgcziDAMGGRBpSoWIkRnEIAJlgEwEJY2WQAdLIATADM5eXyqurslDAcUBIAPABCQSHevgC8RiYGAHxwqK7ZANYAVnBtLF3B4sP19RrWcFhQxFD1TS3tiz0+egOBS6GjMFgAHvDzR8uMAL7MDBqgYO4gWEIwyDAxEJGLdILALH8tgQ8PpHkIAArEMDoW7XHLobB4GAlADCJEghT+iIgyLaZHOITIoxUDDUqD0uGAyFcxLAAH4AFxjGBQAo8egMV4MUHQQjCUTiOBw2RgJGoLlw1moRQ0tS4cSoeBKMYMpkspEAGjgJRNqXgzzgfTgspJqAFag02S8qBI6QAFny4AB3BJunVYRnM1l7dIHOYUyVKE0lM0WljDAXPIA"},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"See this in the TS Playground","position":{"start":{"line":32,"column":3,"offset":777},"end":{"line":32,"column":32,"offset":806}}}],"position":{"start":{"line":32,"column":2,"offset":776},"end":{"line":32,"column":33,"offset":807}}}],"position":{"start":{"line":32,"column":1,"offset":775},"end":{"line":32,"column":609,"offset":1383}}}],"position":{"start":{"line":32,"column":1,"offset":775},"end":{"line":32,"column":609,"offset":1383}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Forwarding Refs","position":{"start":{"line":34,"column":3,"offset":1387},"end":{"line":34,"column":18,"offset":1402}}}],"position":{"start":{"line":34,"column":1,"offset":1385},"end":{"line":34,"column":20,"offset":1404}}},{"type":"text","value":": As ","position":{"start":{"line":34,"column":20,"offset":1404},"end":{"line":34,"column":25,"offset":1409}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/forwarding-refs.html"},"children":[{"type":"text","value":"the React docs themselves note","position":{"start":{"line":34,"column":26,"offset":1410},"end":{"line":34,"column":56,"offset":1440}}}],"position":{"start":{"line":34,"column":25,"offset":1409},"end":{"line":34,"column":104,"offset":1488}}},{"type":"text","value":", most usecases will not need to obtain a ref to the inner element. But for people making reusable component libraries, you will need to ","position":{"start":{"line":34,"column":104,"offset":1488},"end":{"line":34,"column":241,"offset":1625}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forwardRef"}],"position":{"start":{"line":34,"column":241,"offset":1625},"end":{"line":34,"column":253,"offset":1637}}},{"type":"text","value":" the underlying element, and then you can use ","position":{"start":{"line":34,"column":253,"offset":1637},"end":{"line":34,"column":299,"offset":1683}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentPropsWithRef"}],"position":{"start":{"line":34,"column":299,"offset":1683},"end":{"line":34,"column":322,"offset":1706}}},{"type":"text","value":" to grab props for your wrapper component. Check ","position":{"start":{"line":34,"column":322,"offset":1706},"end":{"line":34,"column":371,"offset":1755}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"our docs on forwarding Refs","position":{"start":{"line":34,"column":372,"offset":1756},"end":{"line":34,"column":399,"offset":1783}}}],"position":{"start":{"line":34,"column":371,"offset":1755},"end":{"line":34,"column":500,"offset":1884}}},{"type":"text","value":" for more.","position":{"start":{"line":34,"column":500,"offset":1884},"end":{"line":34,"column":510,"offset":1894}}}],"position":{"start":{"line":34,"column":1,"offset":1385},"end":{"line":34,"column":510,"offset":1894}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In future, the need to ","position":{"start":{"line":36,"column":1,"offset":1896},"end":{"line":36,"column":24,"offset":1919}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forwardRef"}],"position":{"start":{"line":36,"column":24,"offset":1919},"end":{"line":36,"column":36,"offset":1931}}},{"type":"text","value":" may go away in React 17+, but for now we still have to deal with this. ðŸ™ƒ","position":{"start":{"line":36,"column":36,"offset":1931},"end":{"line":36,"column":110,"offset":2005}}}],"position":{"start":{"line":36,"column":1,"offset":1896},"end":{"line":36,"column":110,"offset":2005}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>","position":{"start":{"line":38,"column":1,"offset":2007},"end":{"line":39,"column":10,"offset":2026}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Why not ","position":{"start":{"line":41,"column":1,"offset":2028},"end":{"line":41,"column":9,"offset":2036}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":41,"column":9,"offset":2036},"end":{"line":41,"column":25,"offset":2052}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":25,"offset":2052},"end":{"line":41,"column":29,"offset":2056}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"IntrinsicElements"}],"position":{"start":{"line":41,"column":29,"offset":2056},"end":{"line":41,"column":48,"offset":2075}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":48,"offset":2075},"end":{"line":41,"column":52,"offset":2079}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[Element]HTMLAttributes"}],"position":{"start":{"line":41,"column":52,"offset":2079},"end":{"line":41,"column":77,"offset":2104}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":77,"offset":2104},"end":{"line":41,"column":81,"offset":2108}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLProps"}],"position":{"start":{"line":41,"column":81,"offset":2108},"end":{"line":41,"column":92,"offset":2119}}},{"type":"text","value":" or ","position":{"start":{"line":41,"column":92,"offset":2119},"end":{"line":41,"column":96,"offset":2123}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLAttributes"}],"position":{"start":{"line":41,"column":96,"offset":2123},"end":{"line":41,"column":112,"offset":2139}}},{"type":"text","value":"?","position":{"start":{"line":41,"column":112,"offset":2139},"end":{"line":41,"column":113,"offset":2140}}}],"position":{"start":{"line":41,"column":1,"offset":2028},"end":{"line":41,"column":113,"offset":2140}}},{"type":"text","value":"\n"},{"type":"raw","value":"</summary>","position":{"start":{"line":43,"column":1,"offset":2142},"end":{"line":43,"column":11,"offset":2152}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":45,"column":4,"offset":2157},"end":{"line":45,"column":20,"offset":2173}}}],"position":{"start":{"line":45,"column":1,"offset":2154},"end":{"line":45,"column":20,"offset":2173}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You CAN use ","position":{"start":{"line":47,"column":1,"offset":2175},"end":{"line":47,"column":13,"offset":2187}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":47,"column":13,"offset":2187},"end":{"line":47,"column":29,"offset":2203}}},{"type":"text","value":" in place of ","position":{"start":{"line":47,"column":29,"offset":2203},"end":{"line":47,"column":42,"offset":2216}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentPropsWithRef"}],"position":{"start":{"line":47,"column":42,"offset":2216},"end":{"line":47,"column":65,"offset":2239}}},{"type":"text","value":", but you may prefer to be explicit about whether or not the component's refs are forwarded, which is what we have chosen to demonstrate. The tradeoff is slightly more intimidating terminology.","position":{"start":{"line":47,"column":65,"offset":2239},"end":{"line":47,"column":258,"offset":2432}}}],"position":{"start":{"line":47,"column":1,"offset":2175},"end":{"line":47,"column":258,"offset":2432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"More info: ","position":{"start":{"line":49,"column":1,"offset":2434},"end":{"line":49,"column":12,"offset":2445}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/"},"children":[{"type":"text","value":"https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/","position":{"start":{"line":49,"column":12,"offset":2445},"end":{"line":49,"column":110,"offset":2543}}}],"position":{"start":{"line":49,"column":12,"offset":2445},"end":{"line":49,"column":110,"offset":2543}}}],"position":{"start":{"line":49,"column":1,"offset":2434},"end":{"line":49,"column":110,"offset":2543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Maybe ","position":{"start":{"line":51,"column":5,"offset":2549},"end":{"line":51,"column":11,"offset":2555}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"JSX.IntrinsicElements"}],"position":{"start":{"line":51,"column":11,"offset":2555},"end":{"line":51,"column":34,"offset":2578}}},{"type":"text","value":" or ","position":{"start":{"line":51,"column":34,"offset":2578},"end":{"line":51,"column":38,"offset":2582}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.[Element]HTMLAttributes"}],"position":{"start":{"line":51,"column":38,"offset":2582},"end":{"line":51,"column":69,"offset":2613}}}],"position":{"start":{"line":51,"column":1,"offset":2545},"end":{"line":51,"column":69,"offset":2613}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are at least 2 other equivalent ways to do this, but they are more verbose:","position":{"start":{"line":53,"column":1,"offset":2615},"end":{"line":53,"column":82,"offset":2696}}}],"position":{"start":{"line":53,"column":1,"offset":2615},"end":{"line":53,"column":82,"offset":2696}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Method 1: JSX.IntrinsicElements\ntype btnType = JSX.IntrinsicElements[\"button\"]; // cannot inline or will error\nexport interface ButtonProps extends btnType {} // etc\n\n// Method 2: React.[Element]HTMLAttributes\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement>\n"}],"position":{"start":{"line":55,"column":1,"offset":2698},"end":{"line":62,"column":4,"offset":3004}}}],"position":{"start":{"line":55,"column":1,"offset":2698},"end":{"line":62,"column":4,"offset":3004}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Looking at ","position":{"start":{"line":64,"column":1,"offset":3006},"end":{"line":64,"column":12,"offset":3017}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/f3134f4897c8473f590cbcdd5788da8d59796f45/types/react/index.d.ts#L821"},"children":[{"type":"text","value":"the source for ","position":{"start":{"line":64,"column":13,"offset":3018},"end":{"line":64,"column":28,"offset":3033}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":64,"column":28,"offset":3033},"end":{"line":64,"column":44,"offset":3049}}}],"position":{"start":{"line":64,"column":12,"offset":3017},"end":{"line":64,"column":171,"offset":3176}}},{"type":"text","value":" shows that this is a clever wrapper for ","position":{"start":{"line":64,"column":171,"offset":3176},"end":{"line":64,"column":212,"offset":3217}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"JSX.IntrinsicElements"}],"position":{"start":{"line":64,"column":212,"offset":3217},"end":{"line":64,"column":235,"offset":3240}}},{"type":"text","value":", whereas the second method relies on specialized interfaces with unfamiliar naming/capitalization.","position":{"start":{"line":64,"column":235,"offset":3240},"end":{"line":64,"column":334,"offset":3339}}}],"position":{"start":{"line":64,"column":1,"offset":3006},"end":{"line":64,"column":334,"offset":3339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: There are over 50 of these specialized interfaces available - look for ","position":{"start":{"line":66,"column":3,"offset":3343},"end":{"line":66,"column":80,"offset":3420}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"HTMLAttributes"}],"position":{"start":{"line":66,"column":80,"offset":3420},"end":{"line":66,"column":96,"offset":3436}}},{"type":"text","value":" in our ","position":{"start":{"line":66,"column":96,"offset":3436},"end":{"line":66,"column":104,"offset":3444}}},{"type":"element","tagName":"a","properties":{"href":"https://react-typescript-cheatsheet.netlify.app/docs/advanced/types_react_api#typesreact"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"@types/react"}],"position":{"start":{"line":66,"column":105,"offset":3445},"end":{"line":66,"column":119,"offset":3459}}},{"type":"text","value":" commentary","position":{"start":{"line":66,"column":119,"offset":3459},"end":{"line":66,"column":130,"offset":3470}}}],"position":{"start":{"line":66,"column":104,"offset":3444},"end":{"line":66,"column":221,"offset":3561}}},{"type":"text","value":".","position":{"start":{"line":66,"column":221,"offset":3561},"end":{"line":66,"column":222,"offset":3562}}}],"position":{"start":{"line":66,"column":3,"offset":3343},"end":{"line":66,"column":222,"offset":3562}}},{"type":"text","value":"\n"}],"position":{"start":{"line":66,"column":1,"offset":3341},"end":{"line":66,"column":222,"offset":3562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ultimately, ","position":{"start":{"line":68,"column":1,"offset":3564},"end":{"line":68,"column":13,"offset":3576}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/pull/276"},"children":[{"type":"text","value":"we picked the ","position":{"start":{"line":68,"column":14,"offset":3577},"end":{"line":68,"column":28,"offset":3591}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ComponentProps"}],"position":{"start":{"line":68,"column":28,"offset":3591},"end":{"line":68,"column":44,"offset":3607}}},{"type":"text","value":" method","position":{"start":{"line":68,"column":44,"offset":3607},"end":{"line":68,"column":51,"offset":3614}}}],"position":{"start":{"line":68,"column":13,"offset":3576},"end":{"line":68,"column":110,"offset":3673}}},{"type":"text","value":" as it involves the least TS specific jargon and has the most ease of use. But you'll be fine with either of these methods if you prefer.","position":{"start":{"line":68,"column":110,"offset":3673},"end":{"line":68,"column":247,"offset":3810}}}],"position":{"start":{"line":68,"column":1,"offset":3564},"end":{"line":68,"column":247,"offset":3810}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Definitely not ","position":{"start":{"line":70,"column":5,"offset":3816},"end":{"line":70,"column":20,"offset":3831}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLProps"}],"position":{"start":{"line":70,"column":20,"offset":3831},"end":{"line":70,"column":37,"offset":3848}}},{"type":"text","value":" or ","position":{"start":{"line":70,"column":37,"offset":3848},"end":{"line":70,"column":41,"offset":3852}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLAttributes"}],"position":{"start":{"line":70,"column":41,"offset":3852},"end":{"line":70,"column":63,"offset":3874}}}],"position":{"start":{"line":70,"column":1,"offset":3812},"end":{"line":70,"column":63,"offset":3874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":72,"column":1,"offset":3876},"end":{"line":72,"column":35,"offset":3910}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLProps"}],"position":{"start":{"line":72,"column":35,"offset":3910},"end":{"line":72,"column":52,"offset":3927}}},{"type":"text","value":":","position":{"start":{"line":72,"column":52,"offset":3927},"end":{"line":72,"column":53,"offset":3928}}}],"position":{"start":{"line":72,"column":1,"offset":3876},"end":{"line":72,"column":53,"offset":3928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface ButtonProps extends React.HTMLProps<HTMLButtonElement> {\n    specialProp: string;\n}\nexport function Button(props: ButtonProps) {\n    const { specialProp, ...rest } = props;\n    // ERROR: Type 'string' is not assignable to type '\"button\" | \"submit\" | \"reset\" | undefined'.\n    return <button {...rest} />;\n}\n"}],"position":{"start":{"line":74,"column":1,"offset":3930},"end":{"line":83,"column":4,"offset":4264}}}],"position":{"start":{"line":74,"column":1,"offset":3930},"end":{"line":83,"column":4,"offset":4264}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It infers a too-wide type of ","position":{"start":{"line":85,"column":1,"offset":4266},"end":{"line":85,"column":30,"offset":4295}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"string"}],"position":{"start":{"line":85,"column":30,"offset":4295},"end":{"line":85,"column":38,"offset":4303}}},{"type":"text","value":" for ","position":{"start":{"line":85,"column":38,"offset":4303},"end":{"line":85,"column":43,"offset":4308}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"type"}],"position":{"start":{"line":85,"column":43,"offset":4308},"end":{"line":85,"column":49,"offset":4314}}},{"type":"text","value":", because it ","position":{"start":{"line":85,"column":49,"offset":4314},"end":{"line":85,"column":62,"offset":4327}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/128#issuecomment-508103558"},"children":[{"type":"text","value":"uses ","position":{"start":{"line":85,"column":63,"offset":4328},"end":{"line":85,"column":68,"offset":4333}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"AllHTMLAttributes"}],"position":{"start":{"line":85,"column":68,"offset":4333},"end":{"line":85,"column":87,"offset":4352}}},{"type":"text","value":" under the hood","position":{"start":{"line":85,"column":87,"offset":4352},"end":{"line":85,"column":102,"offset":4367}}}],"position":{"start":{"line":85,"column":62,"offset":4327},"end":{"line":85,"column":186,"offset":4451}}},{"type":"text","value":".","position":{"start":{"line":85,"column":186,"offset":4451},"end":{"line":85,"column":187,"offset":4452}}}],"position":{"start":{"line":85,"column":1,"offset":4266},"end":{"line":85,"column":187,"offset":4452}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is what happens when you use ","position":{"start":{"line":87,"column":1,"offset":4454},"end":{"line":87,"column":35,"offset":4488}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.HTMLAttributes"}],"position":{"start":{"line":87,"column":35,"offset":4488},"end":{"line":87,"column":57,"offset":4510}}},{"type":"text","value":":","position":{"start":{"line":87,"column":57,"offset":4510},"end":{"line":87,"column":58,"offset":4511}}}],"position":{"start":{"line":87,"column":1,"offset":4454},"end":{"line":87,"column":58,"offset":4511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n    /* etc */\n}\n// usage\nfunction App() {\n    // Property 'type' does not exist on type 'IntrinsicAttributes & ButtonProps'\n    return <Button type=\"submit\"> text </Button>;\n}\n"}],"position":{"start":{"line":89,"column":1,"offset":4513},"end":{"line":98,"column":4,"offset":4778}}}],"position":{"start":{"line":89,"column":1,"offset":4513},"end":{"line":98,"column":4,"offset":4778}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":100,"column":1,"offset":4780},"end":{"line":100,"column":11,"offset":4790}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Wrapping/Mirroring a Component","position":{"start":{"line":102,"column":5,"offset":4796},"end":{"line":102,"column":35,"offset":4826}}}],"position":{"start":{"line":102,"column":1,"offset":4792},"end":{"line":102,"column":35,"offset":4826}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TODO: this section needs work to make it simplified.","position":{"start":{"line":104,"column":3,"offset":4830},"end":{"line":104,"column":55,"offset":4882}}}],"position":{"start":{"line":104,"column":3,"offset":4830},"end":{"line":104,"column":55,"offset":4882}}},{"type":"text","value":"\n"}],"position":{"start":{"line":104,"column":1,"offset":4828},"end":{"line":104,"column":55,"offset":4882}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usecase: same as above, but for a React Component you don't have access to the underlying props","position":{"start":{"line":106,"column":1,"offset":4884},"end":{"line":106,"column":96,"offset":4979}}}],"position":{"start":{"line":106,"column":1,"offset":4884},"end":{"line":106,"column":96,"offset":4979}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const Box = (props: React.CSSProperties) => <div style={props} />;\n\nconst Card = (\n    { title, children, ...props }: { title: string } & $ElementProps<typeof Box> // new utility, see below\n) => (\n    <Box {...props}>\n        {title}: {children}\n    </Box>\n);\n"}],"position":{"start":{"line":108,"column":1,"offset":4981},"end":{"line":118,"column":4,"offset":5251}}}],"position":{"start":{"line":108,"column":1,"offset":4981},"end":{"line":118,"column":4,"offset":5251}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Strategy: extract a component's props by inferring them","position":{"start":{"line":120,"column":1,"offset":5253},"end":{"line":120,"column":56,"offset":5308}}}],"position":{"start":{"line":120,"column":1,"offset":5253},"end":{"line":120,"column":56,"offset":5308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Example:","position":{"start":{"line":122,"column":1,"offset":5310},"end":{"line":122,"column":9,"offset":5318}}}],"position":{"start":{"line":122,"column":1,"offset":5310},"end":{"line":122,"column":9,"offset":5318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// ReactUtilityTypes.d.ts\ndeclare type $ElementProps<T> = T extends React.ComponentType<infer Props> ? (Props extends object ? Props : never) : never;\n"}],"position":{"start":{"line":124,"column":1,"offset":5320},"end":{"line":127,"column":4,"offset":5481}}}],"position":{"start":{"line":124,"column":1,"offset":5320},"end":{"line":127,"column":4,"offset":5481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage:","position":{"start":{"line":129,"column":1,"offset":5483},"end":{"line":129,"column":7,"offset":5489}}}],"position":{"start":{"line":129,"column":1,"offset":5483},"end":{"line":129,"column":7,"offset":5489}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"import * as Recompose from 'recompose';\nexport const defaultProps = <C extends React.ComponentType, D extends Partial<$ElementProps<C>>>(\n    defaults: D,\n    Component: C\n): React.ComponentType<$ElementProps<C> & Partial<D>> => Recompose.defaultProps(defaults)(Component);\n"}],"position":{"start":{"line":131,"column":1,"offset":5491},"end":{"line":137,"column":4,"offset":5775}}}],"position":{"start":{"line":131,"column":1,"offset":5491},"end":{"line":137,"column":4,"offset":5775}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks ","position":{"start":{"line":139,"column":2,"offset":5778},"end":{"line":139,"column":9,"offset":5785}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/23"},"children":[{"type":"text","value":"dmisdm","position":{"start":{"line":139,"column":10,"offset":5786},"end":{"line":139,"column":16,"offset":5792}}}],"position":{"start":{"line":139,"column":9,"offset":5785},"end":{"line":139,"column":76,"offset":5852}}}],"position":{"start":{"line":139,"column":1,"offset":5777},"end":{"line":139,"column":77,"offset":5853}}}],"position":{"start":{"line":139,"column":1,"offset":5777},"end":{"line":139,"column":77,"offset":5853}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":":new: You should also consider whether to explicitly forward refs:","position":{"start":{"line":141,"column":1,"offset":5855},"end":{"line":141,"column":67,"offset":5921}}}],"position":{"start":{"line":141,"column":1,"offset":5855},"end":{"line":141,"column":67,"offset":5921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// base button, with ref forwarding\ntype Props = { children: React.ReactNode; type: 'submit' | 'button' };\nexport type Ref = HTMLButtonElement;\nexport const FancyButton = React.forwardRef<Ref, Props>((props, ref) => (\n    <button ref={ref} className=\"MyCustomButtonClass\" type={props.type}>\n        {props.children}\n    </button>\n));\n\n// second layer button, no need for forwardRef (TODO: doublecheck this)\nexport interface DoubleWrappedProps extends React.ComponentPropsWithRef<typeof FancyButton> {\n    specialProp?: string;\n}\nexport function DoubleWrappedButton(props: DoubleWrappedProps) {\n    const { specialProp, ref, ...rest } = props;\n    return <button ref={ref} {...rest} />;\n}\n\n// usage\nfunction App() {\n    const btnRef = React.useRef<HTMLButtonElement>(null!);\n    return (\n        <DoubleWrappedButton type=\"button\" ref={btnRef}>\n            {' '}\n            text{' '}\n        </DoubleWrappedButton>\n    );\n}\n"}],"position":{"start":{"line":143,"column":1,"offset":5923},"end":{"line":172,"column":4,"offset":6857}}}],"position":{"start":{"line":143,"column":1,"offset":5923},"end":{"line":172,"column":4,"offset":6857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwCwAUIwPTNwBGaWHArjDBAB2AGjgB3YDAAWcSgTgFoY5FAAmwQQHNGMAJ5huABWJh0AXjgBvOLinAANqsqCAXJiowAdNjwwAchCqWDRwegZuAESoPOwgkhFwAD5wEex8AoIJAL70DFgAHpCwofrc2PIWABIAKgCyADIAQulCAKL2WCBYgjC5BUXwuEKo8ABiyIK4us38QnAWPvieilDKauUAPOWixhCmAHwAFIdgJqiicgCU8-twh4xwcBtps4KyWARmlnJZNvZoqD8yC6ZgitV0AGF-qhAcCsAkwlgvqc9qhPIisvsHo8rCjTJ5bA4nN0stiNswXhksQxLpdcowWGxUFghoJVHB-rosFBeK9GP1oPANDBuQQ8NwACIQGIdADqUGQYAMql2pjgBRFbPQiy8EJIkEE3RgqtQsskUk2iIg8nGk2mLUEt0s2NQBlwwGQ9lVAH43CMoBpNLlSXlCoKFDxJjBgHMpTKsPLFcqZhkTmc3HH2HKFUqsCqztdnQxHqyRlY4K6WR6vSYLh9RJ5G5Qy78LHjULlHpQYDwoG9ng73p9vh9fpZG55mzBfsx9sGGQxWHAeKhkJosIwCJH8DG3gBBJWHQvY0vwdgwQTlebuXyeFdYTY1BoptodLo9I6CHj2ewAQku2Ldr2-aZtmSZ5i+byIqClJCAkchfOel6jrcIr5PA5KgQmObJg61IhkAA"},"children":[{"type":"text","value":"TS Playground link","position":{"start":{"line":174,"column":3,"offset":6861},"end":{"line":174,"column":21,"offset":6879}}}],"position":{"start":{"line":174,"column":2,"offset":6860},"end":{"line":174,"column":817,"offset":7675}}}],"position":{"start":{"line":174,"column":1,"offset":6859},"end":{"line":174,"column":818,"offset":7676}}}],"position":{"start":{"line":174,"column":1,"offset":6859},"end":{"line":174,"column":818,"offset":7676}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Polymorphic Components (e.g. with ","position":{"start":{"line":176,"column":4,"offset":7681},"end":{"line":176,"column":38,"offset":7715}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}],"position":{"start":{"line":176,"column":38,"offset":7715},"end":{"line":176,"column":42,"offset":7719}}},{"type":"text","value":" props)","position":{"start":{"line":176,"column":42,"offset":7719},"end":{"line":176,"column":49,"offset":7726}}}],"position":{"start":{"line":176,"column":1,"offset":7678},"end":{"line":176,"column":49,"offset":7726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\"Polymorphic Components\" = passing a component to be rendered, e.g. with ","position":{"start":{"line":178,"column":3,"offset":7730},"end":{"line":178,"column":76,"offset":7803}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"as"}],"position":{"start":{"line":178,"column":76,"offset":7803},"end":{"line":178,"column":80,"offset":7807}}},{"type":"text","value":" props","position":{"start":{"line":178,"column":80,"offset":7807},"end":{"line":178,"column":86,"offset":7813}}}],"position":{"start":{"line":178,"column":3,"offset":7730},"end":{"line":178,"column":86,"offset":7813}}},{"type":"text","value":"\n"}],"position":{"start":{"line":178,"column":1,"offset":7728},"end":{"line":178,"column":86,"offset":7813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"ElementType"}],"position":{"start":{"line":180,"column":1,"offset":7815},"end":{"line":180,"column":14,"offset":7828}}},{"type":"text","value":" is pretty useful to cover most types that can be passed to createElement e.g.","position":{"start":{"line":180,"column":14,"offset":7828},"end":{"line":180,"column":92,"offset":7906}}}],"position":{"start":{"line":180,"column":1,"offset":7815},"end":{"line":180,"column":92,"offset":7906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"function PassThrough(props: { as: React.ElementType<any> }) {\n    const { as: Component } = props;\n\n    return <Component />;\n}\n"}],"position":{"start":{"line":182,"column":1,"offset":7908},"end":{"line":188,"column":4,"offset":8046}}}],"position":{"start":{"line":182,"column":1,"offset":7908},"end":{"line":188,"column":4,"offset":8046}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You might also see this with React Router:","position":{"start":{"line":190,"column":1,"offset":8048},"end":{"line":190,"column":43,"offset":8090}}}],"position":{"start":{"line":190,"column":1,"offset":8048},"end":{"line":190,"column":43,"offset":8090}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const PrivateRoute = ({ component: Component, ...rest }: PrivateRouteProps) => {\n    const { isLoggedIn } = useAuth();\n\n    return isLoggedIn ? <Component {...rest} /> : <Redirect to=\"/\" />;\n};\n"}],"position":{"start":{"line":192,"column":1,"offset":8092},"end":{"line":198,"column":4,"offset":8296}}}],"position":{"start":{"line":192,"column":1,"offset":8092},"end":{"line":198,"column":4,"offset":8296}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For more info you can refer to these resources:","position":{"start":{"line":200,"column":1,"offset":8298},"end":{"line":200,"column":48,"offset":8345}}}],"position":{"start":{"line":200,"column":1,"offset":8298},"end":{"line":200,"column":48,"offset":8345}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/polymorphic-react-components/"},"children":[{"type":"text","value":"https://blog.andrewbran.ch/polymorphic-react-components/","position":{"start":{"line":202,"column":3,"offset":8349},"end":{"line":202,"column":59,"offset":8405}}}],"position":{"start":{"line":202,"column":3,"offset":8349},"end":{"line":202,"column":59,"offset":8405}}}],"position":{"start":{"line":202,"column":1,"offset":8347},"end":{"line":202,"column":59,"offset":8405}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/kripod/react-polymorphic-box"},"children":[{"type":"text","value":"https://github.com/kripod/react-polymorphic-box","position":{"start":{"line":203,"column":3,"offset":8408},"end":{"line":203,"column":50,"offset":8455}}}],"position":{"start":{"line":203,"column":3,"offset":8408},"end":{"line":203,"column":50,"offset":8455}}}],"position":{"start":{"line":203,"column":1,"offset":8406},"end":{"line":203,"column":50,"offset":8455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom"},"children":[{"type":"text","value":"https://stackoverflow.com/questions/58200824/generic-react-typescript-component-with-as-prop-able-to-render-any-valid-dom","position":{"start":{"line":204,"column":3,"offset":8458},"end":{"line":204,"column":124,"offset":8579}}}],"position":{"start":{"line":204,"column":3,"offset":8458},"end":{"line":204,"column":124,"offset":8579}}}],"position":{"start":{"line":204,"column":1,"offset":8456},"end":{"line":204,"column":124,"offset":8579}}},{"type":"text","value":"\n"}],"position":{"start":{"line":202,"column":1,"offset":8347},"end":{"line":204,"column":124,"offset":8579}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/pull/69"},"children":[{"type":"text","value":"Thanks @eps1lon","position":{"start":{"line":206,"column":2,"offset":8582},"end":{"line":206,"column":17,"offset":8597}}}],"position":{"start":{"line":206,"column":1,"offset":8581},"end":{"line":206,"column":97,"offset":8677}}},{"type":"text","value":" and ","position":{"start":{"line":206,"column":97,"offset":8677},"end":{"line":206,"column":102,"offset":8682}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/151"},"children":[{"type":"text","value":"@karol-majewski","position":{"start":{"line":206,"column":103,"offset":8683},"end":{"line":206,"column":118,"offset":8698}}}],"position":{"start":{"line":206,"column":102,"offset":8682},"end":{"line":206,"column":179,"offset":8759}}},{"type":"text","value":" for thoughts!","position":{"start":{"line":206,"column":179,"offset":8759},"end":{"line":206,"column":193,"offset":8773}}}],"position":{"start":{"line":206,"column":1,"offset":8581},"end":{"line":206,"column":193,"offset":8773}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Generic Components","position":{"start":{"line":208,"column":4,"offset":8778},"end":{"line":208,"column":22,"offset":8796}}}],"position":{"start":{"line":208,"column":1,"offset":8775},"end":{"line":208,"column":22,"offset":8796}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just as you can make generic functions and classes in TypeScript, you can also make generic components to take advantage of the type system for reusable type safety. Both Props and State can take advantage of the same generic types, although it probably makes more sense for Props than for State. You can then use the generic type to annotate types of any variables defined inside your function / class scope.","position":{"start":{"line":210,"column":1,"offset":8798},"end":{"line":210,"column":410,"offset":9207}}}],"position":{"start":{"line":210,"column":1,"offset":8798},"end":{"line":210,"column":410,"offset":9207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\nfunction List<T>(props: Props<T>) {\n    const { items, renderItem } = props;\n    const [state, setState] = React.useState<T[]>([]); // You can use type T in List function scope.\n    return (\n        <div>\n            {items.map(renderItem)}\n            <button onClick={() => setState(items)}>Clone</button>\n            {JSON.stringify(state, null, 2)}\n        </div>\n    );\n}\n"}],"position":{"start":{"line":212,"column":1,"offset":9209},"end":{"line":228,"column":4,"offset":9681}}}],"position":{"start":{"line":212,"column":1,"offset":9209},"end":{"line":228,"column":4,"offset":9681}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can then use the generic components and get nice type safety through type inference:","position":{"start":{"line":230,"column":1,"offset":9683},"end":{"line":230,"column":89,"offset":9771}}}],"position":{"start":{"line":230,"column":1,"offset":9683},"end":{"line":230,"column":89,"offset":9771}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"ReactDOM.render(\n    <List\n        items={['a', 'b']} // type of 'string' inferred\n        renderItem={(item) => (\n            <li key={item}>\n                {/* Error: Property 'toPrecision' does not exist on type 'string'. */}\n                {item.toPrecision(3)}\n            </li>\n        )}\n    />,\n    document.body\n);\n"}],"position":{"start":{"line":232,"column":1,"offset":9773},"end":{"line":245,"column":4,"offset":10109}}}],"position":{"start":{"line":232,"column":1,"offset":9773},"end":{"line":245,"column":4,"offset":10109}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As of ","position":{"start":{"line":247,"column":1,"offset":10111},"end":{"line":247,"column":7,"offset":10117}}},{"type":"element","tagName":"a","properties":{"href":"#typescript-29"},"children":[{"type":"text","value":"TS 2.9","position":{"start":{"line":247,"column":8,"offset":10118},"end":{"line":247,"column":14,"offset":10124}}}],"position":{"start":{"line":247,"column":7,"offset":10117},"end":{"line":247,"column":31,"offset":10141}}},{"type":"text","value":", you can also supply the type parameter in your JSX to opt out of type inference:","position":{"start":{"line":247,"column":31,"offset":10141},"end":{"line":247,"column":113,"offset":10223}}}],"position":{"start":{"line":247,"column":1,"offset":10111},"end":{"line":247,"column":113,"offset":10223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"ReactDOM.render(\n    <List<number>\n        items={['a', 'b']} // Error: Type 'string' is not assignable to type 'number'.\n        renderItem={(item) => <li key={item}>{item.toPrecision(3)}</li>}\n    />,\n    document.body\n);\n"}],"position":{"start":{"line":249,"column":1,"offset":10225},"end":{"line":257,"column":4,"offset":10459}}}],"position":{"start":{"line":249,"column":1,"offset":10225},"end":{"line":257,"column":4,"offset":10459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also use Generics using fat arrow function style:","position":{"start":{"line":259,"column":1,"offset":10461},"end":{"line":259,"column":58,"offset":10518}}}],"position":{"start":{"line":259,"column":1,"offset":10461},"end":{"line":259,"column":58,"offset":10518}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\n\n// Note the <T extends unknown> before the function definition.\n// You can't use just `<T>` as it will confuse the TSX parser whether it's a JSX tag or a Generic Declaration.\n// You can also use <T,> https://github.com/microsoft/TypeScript/issues/15713#issuecomment-499474386\nconst List = <T extends unknown>(props: Props<T>) => {\n    const { items, renderItem } = props;\n    const [state, setState] = React.useState<T[]>([]); // You can use type T in List function scope.\n    return (\n        <div>\n            {items.map(renderItem)}\n            <button onClick={() => setState(items)}>Clone</button>\n            {JSON.stringify(state, null, 2)}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":261,"column":1,"offset":10520},"end":{"line":281,"column":4,"offset":11289}}}],"position":{"start":{"line":261,"column":1,"offset":10520},"end":{"line":281,"column":4,"offset":11289}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The same for using classes: (Credit: ","position":{"start":{"line":283,"column":1,"offset":11291},"end":{"line":283,"column":38,"offset":11328}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/WrocTypeScript/status/1163234064343736326"},"children":[{"type":"text","value":"Karol Majewski","position":{"start":{"line":283,"column":39,"offset":11329},"end":{"line":283,"column":53,"offset":11343}}}],"position":{"start":{"line":283,"column":38,"offset":11328},"end":{"line":283,"column":117,"offset":11407}}},{"type":"text","value":"'s ","position":{"start":{"line":283,"column":117,"offset":11407},"end":{"line":283,"column":120,"offset":11410}}},{"type":"element","tagName":"a","properties":{"href":"https://gist.github.com/karol-majewski/befaf05af73c7cb3248b4e084ae5df71"},"children":[{"type":"text","value":"gist","position":{"start":{"line":283,"column":121,"offset":11411},"end":{"line":283,"column":125,"offset":11415}}}],"position":{"start":{"line":283,"column":120,"offset":11410},"end":{"line":283,"column":199,"offset":11489}}},{"type":"text","value":")","position":{"start":{"line":283,"column":199,"offset":11489},"end":{"line":283,"column":200,"offset":11490}}}],"position":{"start":{"line":283,"column":1,"offset":11291},"end":{"line":283,"column":200,"offset":11490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface Props<T> {\n    items: T[];\n    renderItem: (item: T) => React.ReactNode;\n}\n\ninterface State<T> {\n    items: T[];\n}\n\nclass List<T> extends React.PureComponent<Props<T>, State<T>> {\n    // You can use type T inside List class.\n    state: Readonly<State<T>> = {\n        items: []\n    };\n    render() {\n        const { items, renderItem } = this.props;\n        // You can use type T inside List class.\n        const clone: T[] = items.slice(0);\n        return (\n            <div>\n                {items.map(renderItem)}\n                <button onClick={() => this.setState({ items: clone })}>Clone</button>\n                {JSON.stringify(this.state, null, 2)}\n            </div>\n        );\n    }\n}\n"}],"position":{"start":{"line":285,"column":1,"offset":11492},"end":{"line":313,"column":4,"offset":12207}}}],"position":{"start":{"line":285,"column":1,"offset":11492},"end":{"line":313,"column":4,"offset":12207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Though you can't use Generic Type Parameters for Static Members:","position":{"start":{"line":315,"column":1,"offset":12209},"end":{"line":315,"column":65,"offset":12273}}}],"position":{"start":{"line":315,"column":1,"offset":12209},"end":{"line":315,"column":65,"offset":12273}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"class List<T> extends React.PureComponent<Props<T>, State<T>> {\n    // Static members cannot reference class type parameters.ts(2302)\n    static getDerivedStateFromProps(props: Props<T>, state: State<T>) {\n        return { items: props.items };\n    }\n}\n"}],"position":{"start":{"line":317,"column":1,"offset":12275},"end":{"line":324,"column":4,"offset":12538}}}],"position":{"start":{"line":317,"column":1,"offset":12275},"end":{"line":324,"column":4,"offset":12538}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To fix this you need to convert your static function to a type inferred function:","position":{"start":{"line":326,"column":1,"offset":12540},"end":{"line":326,"column":82,"offset":12621}}}],"position":{"start":{"line":326,"column":1,"offset":12540},"end":{"line":326,"column":82,"offset":12621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"class List<T> extends React.PureComponent<Props<T>, State<T>> {\n    static getDerivedStateFromProps<T>(props: Props<T>, state: State<T>) {\n        return { items: props.items };\n    }\n}\n"}],"position":{"start":{"line":328,"column":1,"offset":12623},"end":{"line":334,"column":4,"offset":12819}}}],"position":{"start":{"line":328,"column":1,"offset":12623},"end":{"line":334,"column":4,"offset":12819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Generic components with children","position":{"start":{"line":336,"column":5,"offset":12825},"end":{"line":336,"column":37,"offset":12857}}}],"position":{"start":{"line":336,"column":1,"offset":12821},"end":{"line":336,"column":37,"offset":12857}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":338,"column":1,"offset":12859},"end":{"line":338,"column":11,"offset":12869}}},{"type":"text","value":" is usually not defined as a part of the props type. Unless ","position":{"start":{"line":338,"column":11,"offset":12869},"end":{"line":338,"column":71,"offset":12929}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":338,"column":71,"offset":12929},"end":{"line":338,"column":81,"offset":12939}}},{"type":"text","value":" are explicitly defined as a part of the ","position":{"start":{"line":338,"column":81,"offset":12939},"end":{"line":338,"column":122,"offset":12980}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props"}],"position":{"start":{"line":338,"column":122,"offset":12980},"end":{"line":338,"column":129,"offset":12987}}},{"type":"text","value":" type, an attempt to use ","position":{"start":{"line":338,"column":129,"offset":12987},"end":{"line":338,"column":154,"offset":13012}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"props.children"}],"position":{"start":{"line":338,"column":154,"offset":13012},"end":{"line":338,"column":170,"offset":13028}}},{"type":"text","value":" in JSX or in the function body will fail:","position":{"start":{"line":338,"column":170,"offset":13028},"end":{"line":338,"column":212,"offset":13070}}}],"position":{"start":{"line":338,"column":1,"offset":12859},"end":{"line":338,"column":212,"offset":13070}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n}\n\n/* Property 'children' does not exist on type 'WrapperProps<T>'. */\nconst Wrapper = <T extends {}>(props: WrapperProps<T>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n\n/*\nType '{ children: string; item: string; renderItem: (item: string) => string; }' is not assignable to type 'IntrinsicAttributes & WrapperProps<string>'.\n  Property 'children' does not exist on type 'IntrinsicAttributes & WrapperProps<string>'.\n*/\n\nconst wrapper = (\n    <Wrapper item=\"test\" renderItem={(item) => item}>\n        {test}\n    </Wrapper>\n);\n"}],"position":{"start":{"line":340,"column":1,"offset":13072},"end":{"line":366,"column":4,"offset":13781}}}],"position":{"start":{"line":340,"column":1,"offset":13072},"end":{"line":366,"column":4,"offset":13781}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoC4AOxiSk3STgHUoUwx6AFHMAZwA8AFQB8cAN4U4cYHRAAuOMIDc0uEWoATegEl5SgBRyki5QEo4AXnHJ0MAHR2MAOQg615GWgAWwADZamkrOjqFuHhQAvhQUAPQAVHC8EFywAJ4EvgFBSNT4cFoQSPxw1BDwSAAewPzwENRwMOlcBGwcaSkCIqL4DnAJcRRoDXWs7Jz01nAicNV02qUSUaKGYHz8Su2TUF1CYpY2kupEMACuUI2G6jKCWsAAbqI3MpLrqfwOmjpQ+qZrGwcJhA5hiXleMgk7wEDmygU0YIhgji9ye6nMniinniCQowhazHwEjgcNy1CUdSgNAA5ipZAY4JSaXTvnoGcYGUzqNTDuIubS4FECrUyhU4Ch+PxgNTqCgAEb+ZgwCBNAkEXS0KnUKVoACCMBgVLlZzopQAZOMOjwNoJ+b0HOouvRmlk-PC8gUiiVRZUamMGqrWvgNYaaDr9aHjaa4Bbtp0bXa+hRBrFyCNtfBTfArHBDLyZqjRAAJJD+fwqrPIwvDUbwADuEzS02u4MEcamwKsACIs12NHkfn8QFYJMDrOJgSsXhIs4iZnF21BnuQMUA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":368,"column":2,"offset":13784},"end":{"line":368,"column":35,"offset":13817}}}],"position":{"start":{"line":368,"column":1,"offset":13783},"end":{"line":368,"column":717,"offset":14499}}}],"position":{"start":{"line":368,"column":1,"offset":13783},"end":{"line":368,"column":717,"offset":14499}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To work around that, either add ","position":{"start":{"line":370,"column":1,"offset":14501},"end":{"line":370,"column":33,"offset":14533}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":370,"column":33,"offset":14533},"end":{"line":370,"column":43,"offset":14543}}},{"type":"text","value":" to the ","position":{"start":{"line":370,"column":43,"offset":14543},"end":{"line":370,"column":51,"offset":14551}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"WrapperProps"}],"position":{"start":{"line":370,"column":51,"offset":14551},"end":{"line":370,"column":65,"offset":14565}}},{"type":"text","value":" definition (possibly narrowing down its type, as needed):","position":{"start":{"line":370,"column":65,"offset":14565},"end":{"line":370,"column":123,"offset":14623}}}],"position":{"start":{"line":370,"column":1,"offset":14501},"end":{"line":370,"column":123,"offset":14623}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n    children: string; // The component will only accept a single string child\n}\n\nconst Wrapper = <T extends {}>(props: WrapperProps<T>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":372,"column":1,"offset":14625},"end":{"line":387,"column":4,"offset":14987}}}],"position":{"start":{"line":372,"column":1,"offset":14625},"end":{"line":387,"column":4,"offset":14987}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"or wrap the type of the props in ","position":{"start":{"line":389,"column":1,"offset":14989},"end":{"line":389,"column":34,"offset":15022}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.PropsWithChildren"}],"position":{"start":{"line":389,"column":34,"offset":15022},"end":{"line":389,"column":59,"offset":15047}}},{"type":"text","value":" (this is what ","position":{"start":{"line":389,"column":59,"offset":15047},"end":{"line":389,"column":74,"offset":15062}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.FC<>"}],"position":{"start":{"line":389,"column":74,"offset":15062},"end":{"line":389,"column":86,"offset":15074}}},{"type":"text","value":" does):","position":{"start":{"line":389,"column":86,"offset":15074},"end":{"line":389,"column":93,"offset":15081}}}],"position":{"start":{"line":389,"column":1,"offset":14989},"end":{"line":389,"column":93,"offset":15081}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface WrapperProps<T> {\n    item: T;\n    renderItem: (item: T) => React.ReactNode;\n}\n\nconst Wrapper = <T extends {}>(props: React.PropsWithChildren<WrapperProps<T>>) => {\n    return (\n        <div>\n            {props.renderItem(props.item)}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":391,"column":1,"offset":15083},"end":{"line":405,"column":4,"offset":15392}}}],"position":{"start":{"line":391,"column":1,"offset":15083},"end":{"line":405,"column":4,"offset":15392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Typing Children","position":{"start":{"line":407,"column":4,"offset":15397},"end":{"line":407,"column":19,"offset":15412}}}],"position":{"start":{"line":407,"column":1,"offset":15394},"end":{"line":407,"column":19,"offset":15412}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some API designs require some restriction on ","position":{"start":{"line":409,"column":1,"offset":15414},"end":{"line":409,"column":46,"offset":15459}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"children"}],"position":{"start":{"line":409,"column":46,"offset":15459},"end":{"line":409,"column":56,"offset":15469}}},{"type":"text","value":" passed to a parent component. It is common to want to enforce these in types, but you should be aware of limitations to this ability.","position":{"start":{"line":409,"column":56,"offset":15469},"end":{"line":409,"column":190,"offset":15603}}}],"position":{"start":{"line":409,"column":1,"offset":15414},"end":{"line":409,"column":190,"offset":15603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CAN Do","position":{"start":{"line":411,"column":5,"offset":15609},"end":{"line":411,"column":20,"offset":15624}}}],"position":{"start":{"line":411,"column":1,"offset":15605},"end":{"line":411,"column":20,"offset":15624}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can type the ","position":{"start":{"line":413,"column":1,"offset":15626},"end":{"line":413,"column":18,"offset":15643}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"structure","position":{"start":{"line":413,"column":20,"offset":15645},"end":{"line":413,"column":29,"offset":15654}}}],"position":{"start":{"line":413,"column":18,"offset":15643},"end":{"line":413,"column":31,"offset":15656}}},{"type":"text","value":" of your children: just one child, or a tuple of children.","position":{"start":{"line":413,"column":31,"offset":15656},"end":{"line":413,"column":89,"offset":15714}}}],"position":{"start":{"line":413,"column":1,"offset":15626},"end":{"line":413,"column":89,"offset":15714}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following are valid:","position":{"start":{"line":415,"column":1,"offset":15716},"end":{"line":415,"column":25,"offset":15740}}}],"position":{"start":{"line":415,"column":1,"offset":15716},"end":{"line":415,"column":25,"offset":15740}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type OneChild = React.ReactElement;\ntype TwoChildren = [React.ReactElement, React.ReactElement];\ntype ArrayOfProps = SomeProp[];\ntype NumbersChildren = number[];\ntype TwoNumbersChildren = [number, number];\n"}],"position":{"start":{"line":417,"column":1,"offset":15742},"end":{"line":423,"column":4,"offset":15957}}}],"position":{"start":{"line":417,"column":1,"offset":15742},"end":{"line":423,"column":4,"offset":15957}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n<summary>\nDon't forget that you can also use `prop-types` if TS fails you.\n</summary>","position":{"start":{"line":425,"column":1,"offset":15959},"end":{"line":428,"column":11,"offset":16054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"Parent.propTypes = {\n    children: PropTypes.shape({\n        props: PropTypes.shape({\n            // could share `propTypes` to the child\n            value: PropTypes.string.isRequired\n        })\n    }).isRequired\n};\n"}],"position":{"start":{"line":430,"column":1,"offset":16056},"end":{"line":439,"column":4,"offset":16282}}}],"position":{"start":{"line":430,"column":1,"offset":16056},"end":{"line":439,"column":4,"offset":16282}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":441,"column":1,"offset":16284},"end":{"line":441,"column":11,"offset":16294}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"What You CANNOT Do","position":{"start":{"line":443,"column":5,"offset":16300},"end":{"line":443,"column":23,"offset":16318}}}],"position":{"start":{"line":443,"column":1,"offset":16296},"end":{"line":443,"column":23,"offset":16318}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The thing you cannot do is ","position":{"start":{"line":445,"column":1,"offset":16320},"end":{"line":445,"column":28,"offset":16347}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"specify which components","position":{"start":{"line":445,"column":30,"offset":16349},"end":{"line":445,"column":54,"offset":16373}}}],"position":{"start":{"line":445,"column":28,"offset":16347},"end":{"line":445,"column":56,"offset":16375}}},{"type":"text","value":" the children are, e.g. If you want to express the fact that \"React Router ","position":{"start":{"line":445,"column":56,"offset":16375},"end":{"line":445,"column":131,"offset":16450}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Routes>"}],"position":{"start":{"line":445,"column":131,"offset":16450},"end":{"line":445,"column":141,"offset":16460}}},{"type":"text","value":" can only have ","position":{"start":{"line":445,"column":141,"offset":16460},"end":{"line":445,"column":156,"offset":16475}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"<Route>"}],"position":{"start":{"line":445,"column":156,"offset":16475},"end":{"line":445,"column":165,"offset":16484}}},{"type":"text","value":" as children, nothing else is allowed\" in TypeScript.","position":{"start":{"line":445,"column":165,"offset":16484},"end":{"line":445,"column":218,"offset":16537}}}],"position":{"start":{"line":445,"column":1,"offset":16320},"end":{"line":445,"column":218,"offset":16537}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This is because when you write a JSX expression (","position":{"start":{"line":447,"column":1,"offset":16539},"end":{"line":447,"column":50,"offset":16588}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const foo = <MyComponent foo='foo' />"}],"position":{"start":{"line":447,"column":50,"offset":16588},"end":{"line":447,"column":89,"offset":16627}}},{"type":"text","value":"), the resultant type is blackboxed into a generic JSX.Element type. (","position":{"start":{"line":447,"column":89,"offset":16627},"end":{"line":447,"column":159,"offset":16697}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/271"},"children":[{"type":"text","value":"thanks @ferdaber","position":{"start":{"line":447,"column":161,"offset":16699},"end":{"line":447,"column":177,"offset":16715}}}],"position":{"start":{"line":447,"column":160,"offset":16698},"end":{"line":447,"column":238,"offset":16776}}}],"position":{"start":{"line":447,"column":159,"offset":16697},"end":{"line":447,"column":239,"offset":16777}}},{"type":"text","value":")","position":{"start":{"line":447,"column":239,"offset":16777},"end":{"line":447,"column":240,"offset":16778}}}],"position":{"start":{"line":447,"column":1,"offset":16539},"end":{"line":447,"column":240,"offset":16778}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Type Narrowing based on Props","position":{"start":{"line":449,"column":4,"offset":16783},"end":{"line":449,"column":33,"offset":16812}}}],"position":{"start":{"line":449,"column":1,"offset":16780},"end":{"line":449,"column":33,"offset":16812}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"What you want:","position":{"start":{"line":451,"column":1,"offset":16814},"end":{"line":451,"column":15,"offset":16828}}}],"position":{"start":{"line":451,"column":1,"offset":16814},"end":{"line":451,"column":15,"offset":16828}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Usage\nfunction App() {\n    return (\n        <>\n            {/* ðŸ˜Ž All good */}\n            <Button target=\"_blank\" href=\"https://www.google.com\">\n                Test\n            </Button>\n            {/* ðŸ˜­ Error, `disabled` doesnt exist on anchor element */}\n            <Button disabled href=\"x\">\n                Test\n            </Button>\n        </>\n    );\n}\n"}],"position":{"start":{"line":453,"column":1,"offset":16830},"end":{"line":469,"column":4,"offset":17207}}}],"position":{"start":{"line":453,"column":1,"offset":16830},"end":{"line":469,"column":4,"offset":17207}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"How to implement: Use ","position":{"start":{"line":471,"column":1,"offset":17209},"end":{"line":471,"column":23,"offset":17231}}},{"type":"element","tagName":"a","properties":{"href":"https://basarat.gitbooks.io/typescript/docs/types/typeGuard.html#user-defined-type-guards"},"children":[{"type":"text","value":"type guards","position":{"start":{"line":471,"column":24,"offset":17232},"end":{"line":471,"column":35,"offset":17243}}}],"position":{"start":{"line":471,"column":23,"offset":17231},"end":{"line":471,"column":127,"offset":17335}}},{"type":"text","value":"!","position":{"start":{"line":471,"column":127,"offset":17335},"end":{"line":471,"column":128,"offset":17336}}}],"position":{"start":{"line":471,"column":1,"offset":17209},"end":{"line":471,"column":128,"offset":17336}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// Button props\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n    href?: undefined;\n};\n\n// Anchor props\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement> & {\n    href?: string;\n};\n\n// Input/output options\ntype Overload = {\n    (props: ButtonProps): JSX.Element;\n    (props: AnchorProps): JSX.Element;\n};\n\n// Guard to check if href exists in props\nconst hasHref = (props: ButtonProps | AnchorProps): props is AnchorProps => 'href' in props;\n\n// Component\nconst Button: Overload = (props: ButtonProps | AnchorProps) => {\n    // anchor render\n    if (hasHref(props)) return <a {...props} />;\n    // button render\n    return <button {...props} />;\n};\n"}],"position":{"start":{"line":473,"column":1,"offset":17338},"end":{"line":500,"column":4,"offset":18033}}}],"position":{"start":{"line":473,"column":1,"offset":17338},"end":{"line":500,"column":4,"offset":18033}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoAekrgCEBXGGCAOzjBzAGcKYBPMEjqNmLAAqcucALyJiMAHQMmrABIAVALIAZAIJMowAEaMkXADwady0QFEANkhBIWMAHxwAZHADeFOHAAFkSYAPwAXHD0LAAmSJjALEgxANwUAL5p5BTUcLosaIHQ7JK8AkL5hdASENwycuiKlUVQVnoGxqYWbc3QDk4u7l6+-kEhEXBcMIYsAOZZmRQ5NACSLGCMlBCMG-C1MMCsPOT8gnAA8gBuSFD2ECgx9X7kAQAUHLVckTasNdwAlJEAFIAZQAGgp+s5XFk3h9uJFelA-lxAXBQRCoYMFlllnAAOL0FBQR7MOCFJBoADWcGAmDG8TgSAAHsAplJEiVPhQ0Ed4IEUFxVCF6u9JN8RL9JHAAD55AotFFo+EcqRIlEyNyjABEwXi2tpbBVuKoNAAwrhIElXDy+cIVCxIlcbncHqKVRKHRq5erJP9NSMXnBcigFcUiLEbqM6XBXgKhSExZ9-v6iDB6FA2OYUL4FHmVelg25YcGaCYHXAI3EoKM0xms+XRLn85JC5RixkTbkAKpcFCzJAUTDRDCHNi6MBgV7+54BOuZ2OjALmLVBgIBHyUABUcEAvBuAOD28vZ7HBZhAII8t5R0kv1+YfmwYMSBzBpNqAPpGeyhqkGvWYN9AiYBFqAAd3AhQzwgWZHAUXkQG1Vd12QuB1DMGBb2XSgHyQlDNx3XdAFo9uBbCgHAoAAGjgAADGI2RQL9kmouAYggMxXCZVkpjgVg4FDKooCZRxoXgK8bzXO8HxY+jGMef832ZRDMPXNCpmU8xsMlFhcKw3D-gWIA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":502,"column":2,"offset":18036},"end":{"line":502,"column":35,"offset":18069}}}],"position":{"start":{"line":502,"column":1,"offset":18035},"end":{"line":502,"column":944,"offset":18978}}}],"position":{"start":{"line":502,"column":1,"offset":18035},"end":{"line":502,"column":944,"offset":18978}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Components, and JSX in general, are analogous to functions. When a component can render differently based on their props, it's similar to how a function can be overloaded to have multiple call signatures. In the same way, you can overload a function component's call signature to list all of its different \"versions\".","position":{"start":{"line":504,"column":1,"offset":18980},"end":{"line":504,"column":318,"offset":19297}}}],"position":{"start":{"line":504,"column":1,"offset":18980},"end":{"line":504,"column":318,"offset":19297}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A very common use case for this is to render something as either a button or an anchor, based on if it receives a ","position":{"start":{"line":506,"column":1,"offset":19299},"end":{"line":506,"column":115,"offset":19413}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"href"}],"position":{"start":{"line":506,"column":115,"offset":19413},"end":{"line":506,"column":121,"offset":19419}}},{"type":"text","value":" attribute.","position":{"start":{"line":506,"column":121,"offset":19419},"end":{"line":506,"column":132,"offset":19430}}}],"position":{"start":{"line":506,"column":1,"offset":19299},"end":{"line":506,"column":132,"offset":19430}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type ButtonProps = JSX.IntrinsicElements['button'];\ntype AnchorProps = JSX.IntrinsicElements['a'];\n\n// optionally use a custom type guard\nfunction isPropsForAnchorElement(props: ButtonProps | AnchorProps): props is AnchorProps {\n    return 'href' in props;\n}\n\nfunction Clickable(props: ButtonProps | AnchorProps) {\n    if (isPropsForAnchorElement(props)) {\n        return <a {...props} />;\n    } else {\n        return <button {...props} />;\n    }\n}\n"}],"position":{"start":{"line":508,"column":1,"offset":19432},"end":{"line":524,"column":4,"offset":19891}}}],"position":{"start":{"line":508,"column":1,"offset":19432},"end":{"line":524,"column":4,"offset":19891}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"They don't even need to be completely different props, as long as they have at least one difference in properties:","position":{"start":{"line":526,"column":1,"offset":19893},"end":{"line":526,"column":115,"offset":20007}}}],"position":{"start":{"line":526,"column":1,"offset":19893},"end":{"line":526,"column":115,"offset":20007}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type LinkProps = Omit<JSX.IntrinsicElements['a'], 'href'> & { to?: string };\n\nfunction RouterLink(props: LinkProps | AnchorProps) {\n    if ('href' in props) {\n        return <a {...props} />;\n    } else {\n        return <Link {...props} />;\n    }\n}\n"}],"position":{"start":{"line":528,"column":1,"offset":20009},"end":{"line":538,"column":4,"offset":20268}}}],"position":{"start":{"line":528,"column":1,"offset":20009},"end":{"line":538,"column":4,"offset":20268}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary><b>Approach: Generic Components</b></summary>","position":{"start":{"line":540,"column":1,"offset":20270},"end":{"line":541,"column":57,"offset":20336}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is an example solution, see the further discussion for other solutions. ","position":{"start":{"line":543,"column":1,"offset":20338},"end":{"line":543,"column":78,"offset":20415}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"thanks to ","position":{"start":{"line":543,"column":79,"offset":20416},"end":{"line":543,"column":89,"offset":20426}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/12#issuecomment-394440577"},"children":[{"type":"text","value":"@jpavon","position":{"start":{"line":543,"column":90,"offset":20427},"end":{"line":543,"column":97,"offset":20434}}}],"position":{"start":{"line":543,"column":89,"offset":20426},"end":{"line":543,"column":202,"offset":20539}}}],"position":{"start":{"line":543,"column":78,"offset":20415},"end":{"line":543,"column":203,"offset":20540}}}],"position":{"start":{"line":543,"column":1,"offset":20338},"end":{"line":543,"column":203,"offset":20540}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"interface LinkProps {}\ntype AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement>;\ntype RouterLinkProps = Omit<NavLinkProps, 'href'>;\n\nconst Link = <T extends {}>(props: LinkProps & T extends RouterLinkProps ? RouterLinkProps : AnchorProps) => {\n    if ((props as RouterLinkProps).to) {\n        return <NavLink {...(props as RouterLinkProps)} />;\n    } else {\n        return <a {...(props as AnchorProps)} />;\n    }\n};\n\n<Link<RouterLinkProps> to=\"/\">My link</Link>; // ok\n<Link<AnchorProps> href=\"/\">My link</Link>; // ok\n<Link<RouterLinkProps> to=\"/\" href=\"/\">\n    My link\n</Link>; // error\n"}],"position":{"start":{"line":545,"column":1,"offset":20542},"end":{"line":563,"column":4,"offset":21150}}}],"position":{"start":{"line":545,"column":1,"offset":20542},"end":{"line":563,"column":4,"offset":21150}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":565,"column":1,"offset":21152},"end":{"line":565,"column":11,"offset":21162}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary><b>Approach: Composition</b></summary>","position":{"start":{"line":567,"column":1,"offset":21164},"end":{"line":568,"column":50,"offset":21223}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you want to conditionally render a component, sometimes is better to use ","position":{"start":{"line":570,"column":1,"offset":21225},"end":{"line":570,"column":77,"offset":21301}}},{"type":"element","tagName":"a","properties":{"href":"https://reactjs.org/docs/composition-vs-inheritance.html"},"children":[{"type":"text","value":"React's composition model","position":{"start":{"line":570,"column":78,"offset":21302},"end":{"line":570,"column":103,"offset":21327}}}],"position":{"start":{"line":570,"column":77,"offset":21301},"end":{"line":570,"column":162,"offset":21386}}},{"type":"text","value":" to have simpler components and better to understand typings:","position":{"start":{"line":570,"column":162,"offset":21386},"end":{"line":570,"column":223,"offset":21447}}}],"position":{"start":{"line":570,"column":1,"offset":21225},"end":{"line":570,"column":223,"offset":21447}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type AnchorProps = React.AnchorHTMLAttributes<HTMLAnchorElement>;\ntype RouterLinkProps = Omit<AnchorProps, 'href'>;\n\ninterface Button {\n    as: React.ComponentClass | 'a';\n}\n\nconst Button: React.FunctionComponent<Button> = (props) => {\n    const { as: Component, children, ...rest } = props;\n    return (\n        <Component className=\"button\" {...rest}>\n            {children}\n        </Component>\n    );\n};\n\nconst AnchorButton: React.FunctionComponent<AnchorProps> = (props) => <Button as=\"a\" {...props} />;\n\nconst LinkButton: React.FunctionComponent<RouterLinkProps> = (props) => <Button as={NavLink} {...props} />;\n\n<LinkButton to=\"/login\">Login</LinkButton>;\n<AnchorButton href=\"/login\">Login</AnchorButton>;\n<AnchorButton href=\"/login\" to=\"/test\">\n    Login\n</AnchorButton>; // Error: Property 'to' does not exist on type...\n"}],"position":{"start":{"line":572,"column":1,"offset":21449},"end":{"line":598,"column":4,"offset":22289}}}],"position":{"start":{"line":572,"column":1,"offset":21449},"end":{"line":598,"column":4,"offset":22289}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":600,"column":1,"offset":22291},"end":{"line":600,"column":11,"offset":22301}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You may also want to use Discriminated Unions, please check out ","position":{"start":{"line":602,"column":1,"offset":22303},"end":{"line":602,"column":65,"offset":22367}}},{"type":"element","tagName":"a","properties":{"href":"https://blog.andrewbran.ch/expressive-react-component-apis-with-discriminated-unions/"},"children":[{"type":"text","value":"Expressive React Component APIs with Discriminated Unions","position":{"start":{"line":602,"column":66,"offset":22368},"end":{"line":602,"column":123,"offset":22425}}}],"position":{"start":{"line":602,"column":65,"offset":22367},"end":{"line":602,"column":211,"offset":22513}}},{"type":"text","value":".","position":{"start":{"line":602,"column":211,"offset":22513},"end":{"line":602,"column":212,"offset":22514}}}],"position":{"start":{"line":602,"column":1,"offset":22303},"end":{"line":602,"column":212,"offset":22514}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here is a brief intuition for ","position":{"start":{"line":604,"column":1,"offset":22516},"end":{"line":604,"column":31,"offset":22546}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Discriminated Union Types","position":{"start":{"line":604,"column":33,"offset":22548},"end":{"line":604,"column":58,"offset":22573}}}],"position":{"start":{"line":604,"column":31,"offset":22546},"end":{"line":604,"column":60,"offset":22575}}},{"type":"text","value":":","position":{"start":{"line":604,"column":60,"offset":22575},"end":{"line":604,"column":61,"offset":22576}}}],"position":{"start":{"line":604,"column":1,"offset":22516},"end":{"line":604,"column":61,"offset":22576}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type UserTextEvent = {\n    type: 'TextEvent';\n    value: string;\n    target: HTMLInputElement;\n};\ntype UserMouseEvent = {\n    type: 'MouseEvent';\n    value: [number, number];\n    target: HTMLElement;\n};\ntype UserEvent = UserTextEvent | UserMouseEvent;\nfunction handle(event: UserEvent) {\n    if (event.type === 'TextEvent') {\n        event.value; // string\n        event.target; // HTMLInputElement\n        return;\n    }\n    event.value; // [number, number]\n    event.target; // HTMLElement\n}\n"}],"position":{"start":{"line":606,"column":1,"offset":22578},"end":{"line":627,"column":4,"offset":23080}}}],"position":{"start":{"line":606,"column":1,"offset":22578},"end":{"line":627,"column":4,"offset":23080}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Take care: TypeScript does not narrow the type of a Discriminated Union on the basis of typeof checks. The type guard has to be on the value of a key and not it's type.\n  </summary>","position":{"start":{"line":629,"column":1,"offset":23082},"end":{"line":632,"column":13,"offset":23287}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"type UserTextEvent = { value: string; target: HTMLInputElement };\ntype UserMouseEvent = { value: [number, number]; target: HTMLElement };\ntype UserEvent = UserTextEvent | UserMouseEvent;\nfunction handle(event: UserEvent) {\n    if (typeof event.value === 'string') {\n        event.value; // string\n        event.target; // HTMLInputElement | HTMLElement (!!!!)\n        return;\n    }\n    event.value; // [number, number]\n    event.target; // HTMLInputElement | HTMLElement (!!!!)\n}\n"}],"position":{"start":{"line":634,"column":1,"offset":23289},"end":{"line":647,"column":4,"offset":23778}}}],"position":{"start":{"line":634,"column":1,"offset":23289},"end":{"line":647,"column":4,"offset":23778}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The above example does not work as we are not checking the value of ","position":{"start":{"line":649,"column":1,"offset":23780},"end":{"line":649,"column":69,"offset":23848}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"event.value"}],"position":{"start":{"line":649,"column":69,"offset":23848},"end":{"line":649,"column":82,"offset":23861}}},{"type":"text","value":" but only it's type. Read more about it ","position":{"start":{"line":649,"column":82,"offset":23861},"end":{"line":649,"column":122,"offset":23901}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/microsoft/TypeScript/issues/30506#issuecomment-474858198"},"children":[{"type":"text","value":"microsoft/TypeScript#30506 (comment)","position":{"start":{"line":649,"column":123,"offset":23902},"end":{"line":649,"column":159,"offset":23938}}}],"position":{"start":{"line":649,"column":122,"offset":23901},"end":{"line":649,"column":237,"offset":24016}}}],"position":{"start":{"line":649,"column":1,"offset":23780},"end":{"line":649,"column":237,"offset":24016}}},{"type":"text","value":"\n"},{"type":"raw","value":"</details>","position":{"start":{"line":651,"column":1,"offset":24018},"end":{"line":651,"column":11,"offset":24028}}},{"type":"text","value":"\n"},{"type":"raw","value":"<details>\n  <summary>\n  Discriminated Unions in TypeScript can also work with hook dependencies in React. The type matched is automatically updated when the corresponding union member based on which a hook depends, changes. Expand more to see an example usecase.\n   <br/><br/>\n  </summary>","position":{"start":{"line":653,"column":1,"offset":24030},"end":{"line":657,"column":13,"offset":24319}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type SingleElement = {\n    isArray: true;\n    value: string[];\n};\ntype MultiElement = {\n    isArray: false;\n    value: string;\n};\ntype Props = SingleElement | MultiElement;\nfunction Sequence(p: Props) {\n    return React.useMemo(\n        () => (\n            <div>\n                value(s):\n                {p.isArray && p.value.join(',')}\n                {!p.isArray && p.value}\n            </div>\n        ),\n        [p.isArray, p.value] // TypeScript automatically matches the corresponding value type based on dependency change\n    );\n}\nfunction App() {\n    return (\n        <div>\n            <Sequence isArray={false} value={'foo'} />\n            <Sequence isArray={true} value={['foo', 'bar', 'baz']} />\n        </div>\n    );\n}\n"}],"position":{"start":{"line":659,"column":1,"offset":24321},"end":{"line":689,"column":4,"offset":25062}}}],"position":{"start":{"line":659,"column":1,"offset":24321},"end":{"line":689,"column":4,"offset":25062}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<a href=\"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAKjgQwM5wEoFNkGN4BmUEIcA5FDvmQNwBQdMAnmFnAArFjoC8dccAD5wA3vwETgqAIJQoyJgC44MKAFcs9CRIBuyADYblqVcAB2AcwDaAXRpxxAgL7jhY7QKmz5SuAQOomo66BkZwJlDmFloSTvS4EGYmcAAacDxwABRgypwQ3ACU6QB8ouKUMGpQZphUMAB0aoEAslggEJnBmUU8pZ0ecAA8ACbAOsXB2nqGWJmoBYqTEiJg9V5yCnAAZFtwq9Ma9QBWEOaZZAA0ZAUuAwIiAISr6z7bu-uhWLcegwD0o+NggULsErM8ZBsmBc9vUDlgbNDfr84AAVFhYVC4SJgeDINQwEjIGDAXAGfRMOAgIm4AAWGJUdLgCTkGMgZlGljgcJU6PEBXocToBDUZnwwEScGkYDA3TKAgqVRq-QkIzGTP0aFQADlkCAsDwAERSsAGiYDQZpF4KHgifz6QJOLmfG1kAgQCBkR2-M0-S0Qnw21QaR1wm1WV3uy7kABGyCgUbIsYAXmQbF6fQI-gCffy6E4gA\">","position":{"start":{"line":691,"column":1,"offset":25064},"end":{"line":691,"column":605,"offset":25668}}},{"type":"raw","value":"<i>","position":{"start":{"line":691,"column":605,"offset":25668},"end":{"line":691,"column":608,"offset":25671}}},{"type":"text","value":"See this in TS Playground","position":{"start":{"line":691,"column":608,"offset":25671},"end":{"line":691,"column":633,"offset":25696}}},{"type":"raw","value":"</i>","position":{"start":{"line":691,"column":633,"offset":25696},"end":{"line":691,"column":637,"offset":25700}}},{"type":"text","value":"\n","position":{"start":{"line":691,"column":637,"offset":25700},"end":{"line":692,"column":1,"offset":25701}}},{"type":"raw","value":"</a>","position":{"start":{"line":692,"column":1,"offset":25701},"end":{"line":692,"column":5,"offset":25705}}}],"position":{"start":{"line":691,"column":1,"offset":25064},"end":{"line":692,"column":5,"offset":25705}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the above example, based on the ","position":{"start":{"line":694,"column":1,"offset":25707},"end":{"line":694,"column":36,"offset":25742}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isArray"}],"position":{"start":{"line":694,"column":36,"offset":25742},"end":{"line":694,"column":45,"offset":25751}}},{"type":"text","value":" union member, the type of the ","position":{"start":{"line":694,"column":45,"offset":25751},"end":{"line":694,"column":76,"offset":25782}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value"}],"position":{"start":{"line":694,"column":76,"offset":25782},"end":{"line":694,"column":83,"offset":25789}}},{"type":"text","value":" hook dependency changes.","position":{"start":{"line":694,"column":83,"offset":25789},"end":{"line":694,"column":108,"offset":25814}}}],"position":{"start":{"line":694,"column":1,"offset":25707},"end":{"line":694,"column":108,"offset":25814}}},{"type":"text","value":"\n"},{"type":"raw","value":" </details>","position":{"start":{"line":696,"column":1,"offset":25816},"end":{"line":696,"column":12,"offset":25827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To streamline this you may also combine this with the concept of ","position":{"start":{"line":698,"column":1,"offset":25829},"end":{"line":698,"column":66,"offset":25894}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"User-Defined Type Guards","position":{"start":{"line":698,"column":68,"offset":25896},"end":{"line":698,"column":92,"offset":25920}}}],"position":{"start":{"line":698,"column":66,"offset":25894},"end":{"line":698,"column":94,"offset":25922}}},{"type":"text","value":":","position":{"start":{"line":698,"column":94,"offset":25922},"end":{"line":698,"column":95,"offset":25923}}}],"position":{"start":{"line":698,"column":1,"offset":25829},"end":{"line":698,"column":95,"offset":25923}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"function isString(a: unknown): a is string {\n    return typeof a === 'string';\n}\n"}],"position":{"start":{"line":700,"column":1,"offset":25925},"end":{"line":704,"column":4,"offset":26015}}}],"position":{"start":{"line":700,"column":1,"offset":25925},"end":{"line":704,"column":4,"offset":26015}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards"},"children":[{"type":"text","value":"Read more about User-Defined Type Guards in the Handbook","position":{"start":{"line":706,"column":2,"offset":26018},"end":{"line":706,"column":58,"offset":26074}}}],"position":{"start":{"line":706,"column":1,"offset":26017},"end":{"line":706,"column":150,"offset":26166}}},{"type":"text","value":".","position":{"start":{"line":706,"column":150,"offset":26166},"end":{"line":706,"column":151,"offset":26167}}}],"position":{"start":{"line":706,"column":1,"offset":26017},"end":{"line":706,"column":151,"offset":26167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: One or the Other but not Both","position":{"start":{"line":708,"column":4,"offset":26172},"end":{"line":708,"column":40,"offset":26208}}}],"position":{"start":{"line":708,"column":1,"offset":26169},"end":{"line":708,"column":40,"offset":26208}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":710,"column":1,"offset":26210},"end":{"line":710,"column":9,"offset":26218}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"in"}],"position":{"start":{"line":710,"column":9,"offset":26218},"end":{"line":710,"column":13,"offset":26222}}},{"type":"text","value":" keyword, function overloading, and union types to make components that take either one or another sets of props, but not both:","position":{"start":{"line":710,"column":13,"offset":26222},"end":{"line":710,"column":140,"offset":26349}}}],"position":{"start":{"line":710,"column":1,"offset":26210},"end":{"line":710,"column":140,"offset":26349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type Props1 = { foo: string };\ntype Props2 = { bar: string };\n\nfunction MyComponent(props: Props1 | Props2) {\n    if ('foo' in props) {\n        // props.bar // error\n        return <div>{props.foo}</div>;\n    } else {\n        // props.foo // error\n        return <div>{props.bar}</div>;\n    }\n}\nconst UsageComponent: React.FC = () => (\n    <div>\n        <MyComponent foo=\"foo\" />\n        <MyComponent bar=\"bar\" />\n        {/* <MyComponent foo=\"foo\" bar=\"bar\"/> // invalid */}\n    </div>\n);\n"}],"position":{"start":{"line":712,"column":1,"offset":26351},"end":{"line":732,"column":4,"offset":26851}}}],"position":{"start":{"line":712,"column":1,"offset":26351},"end":{"line":732,"column":4,"offset":26851}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCmATzCTgAUcwBnARjgF44BvOTCBABccFjCjAAdgHM4AXwDcVWvSYRWAJi684AIxRQRYiTPlLK5TAFdJGYBElwAstQDCuSJKSSYACjDMLCJqrBwAPoyBGgCUvBRwcMCYcL4ARAIQqYmOAeossTzxCXAA9CVwuawAdPpQpeVIUDhQRQlEMFZQjgA8ACbAAG4AfDyVLFUZct0l-cPmCXJwSAA2LPSF5MX1FYETgtuNza1w7Z09syNjNQZTM4ND8-IUchRoDmJwAKosKNJI7uAHN4YCJkOgYFUAGKubS+WKcIYpIp9e7HbouAGeYH8QScdKCLIlIZojEeIE+PQGPG1QnEzbFHglABUcHRbjJXgpGTxGSytWpBlSRO2UgGKGWwF6cCZJRe9OmFwo0QUQA"},"children":[{"type":"text","value":"View in the TypeScript Playground","position":{"start":{"line":734,"column":2,"offset":26854},"end":{"line":734,"column":35,"offset":26887}}}],"position":{"start":{"line":734,"column":1,"offset":26853},"end":{"line":734,"column":525,"offset":27377}}}],"position":{"start":{"line":734,"column":1,"offset":26853},"end":{"line":734,"column":525,"offset":27377}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Further reading: ","position":{"start":{"line":736,"column":1,"offset":27379},"end":{"line":736,"column":18,"offset":27396}}},{"type":"element","tagName":"a","properties":{"href":"http://www.javiercasas.com/articles/typescript-impossible-states-irrepresentable"},"children":[{"type":"text","value":"how to ban passing ","position":{"start":{"line":736,"column":19,"offset":27397},"end":{"line":736,"column":38,"offset":27416}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":736,"column":38,"offset":27416},"end":{"line":736,"column":42,"offset":27420}}},{"type":"text","value":" if you have a ","position":{"start":{"line":736,"column":42,"offset":27420},"end":{"line":736,"column":57,"offset":27435}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NoFields"}],"position":{"start":{"line":736,"column":57,"offset":27435},"end":{"line":736,"column":67,"offset":27445}}},{"type":"text","value":" type.","position":{"start":{"line":736,"column":67,"offset":27445},"end":{"line":736,"column":73,"offset":27451}}}],"position":{"start":{"line":736,"column":18,"offset":27396},"end":{"line":736,"column":156,"offset":27534}}}],"position":{"start":{"line":736,"column":1,"offset":27379},"end":{"line":736,"column":156,"offset":27534}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Must Pass Both","position":{"start":{"line":738,"column":4,"offset":27539},"end":{"line":738,"column":25,"offset":27560}}}],"position":{"start":{"line":738,"column":1,"offset":27536},"end":{"line":738,"column":25,"offset":27560}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type OneOrAnother<T1, T2> = (T1 & { [K in keyof T2]?: undefined }) | (T2 & { [K in keyof T1]?: undefined });\n\ntype Props = OneOrAnother<{ a: string; b: string }, {}>;\n\nconst a: Props = { a: 'a' }; // error\nconst b: Props = { b: 'b' }; // error\nconst ab: Props = { a: 'a', b: 'b' }; // ok\n"}],"position":{"start":{"line":740,"column":1,"offset":27562},"end":{"line":748,"column":4,"offset":27860}}}],"position":{"start":{"line":740,"column":1,"offset":27562},"end":{"line":748,"column":4,"offset":27860}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thanks ","position":{"start":{"line":750,"column":1,"offset":27862},"end":{"line":750,"column":8,"offset":27869}}},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/kentcdodds/status/1085655423611367426"},"children":[{"type":"text","value":"diegohaz","position":{"start":{"line":750,"column":9,"offset":27870},"end":{"line":750,"column":17,"offset":27878}}}],"position":{"start":{"line":750,"column":8,"offset":27869},"end":{"line":750,"column":77,"offset":27938}}}],"position":{"start":{"line":750,"column":1,"offset":27862},"end":{"line":750,"column":77,"offset":27938}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Pass One ONLY IF the Other Is Passed","position":{"start":{"line":752,"column":4,"offset":27943},"end":{"line":752,"column":47,"offset":27986}}}],"position":{"start":{"line":752,"column":1,"offset":27940},"end":{"line":752,"column":47,"offset":27986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Say you want a Text component that gets truncated if ","position":{"start":{"line":754,"column":1,"offset":27988},"end":{"line":754,"column":54,"offset":28041}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"truncate"}],"position":{"start":{"line":754,"column":54,"offset":28041},"end":{"line":754,"column":64,"offset":28051}}},{"type":"text","value":" prop is passed but expands to show the full text when ","position":{"start":{"line":754,"column":64,"offset":28051},"end":{"line":754,"column":119,"offset":28106}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":754,"column":119,"offset":28106},"end":{"line":754,"column":129,"offset":28116}}},{"type":"text","value":" prop is passed (e.g. when the user clicks the text).","position":{"start":{"line":754,"column":129,"offset":28116},"end":{"line":754,"column":182,"offset":28169}}}],"position":{"start":{"line":754,"column":1,"offset":27988},"end":{"line":754,"column":182,"offset":28169}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You want to allow ","position":{"start":{"line":756,"column":1,"offset":28171},"end":{"line":756,"column":19,"offset":28189}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":756,"column":19,"offset":28189},"end":{"line":756,"column":29,"offset":28199}}},{"type":"text","value":" to be passed only if ","position":{"start":{"line":756,"column":29,"offset":28199},"end":{"line":756,"column":51,"offset":28221}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"truncate"}],"position":{"start":{"line":756,"column":51,"offset":28221},"end":{"line":756,"column":61,"offset":28231}}},{"type":"text","value":" is also passed, because there is no use for ","position":{"start":{"line":756,"column":61,"offset":28231},"end":{"line":756,"column":106,"offset":28276}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"expanded"}],"position":{"start":{"line":756,"column":106,"offset":28276},"end":{"line":756,"column":116,"offset":28286}}},{"type":"text","value":" if the text is not truncated.","position":{"start":{"line":756,"column":116,"offset":28286},"end":{"line":756,"column":146,"offset":28316}}}],"position":{"start":{"line":756,"column":1,"offset":28171},"end":{"line":756,"column":146,"offset":28316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Usage example:","position":{"start":{"line":758,"column":1,"offset":28318},"end":{"line":758,"column":15,"offset":28332}}}],"position":{"start":{"line":758,"column":1,"offset":28318},"end":{"line":758,"column":15,"offset":28332}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"const App: React.FC = () => (\n    <>\n        {/* these all typecheck */}\n        <Text>not truncated</Text>\n        <Text truncate>truncated</Text>\n        <Text truncate expanded>\n            truncate-able but expanded\n        </Text>\n        {/* TS error: Property 'truncate' is missing in type '{ children: string; expanded: true; }' but required in type '{ truncate: true; expanded?: boolean | undefined; }'. */}\n        <Text expanded>truncate-able but expanded</Text>\n    </>\n);\n"}],"position":{"start":{"line":760,"column":1,"offset":28334},"end":{"line":773,"column":4,"offset":28829}}}],"position":{"start":{"line":760,"column":1,"offset":28334},"end":{"line":773,"column":4,"offset":28829}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can implement this by function overloads:","position":{"start":{"line":775,"column":1,"offset":28831},"end":{"line":775,"column":46,"offset":28876}}}],"position":{"start":{"line":775,"column":1,"offset":28831},"end":{"line":775,"column":46,"offset":28876}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"type CommonProps = {\n    children: React.ReactNode;\n    miscProps?: any;\n};\n\ntype NoTruncateProps = CommonProps & { truncate?: false };\n\ntype TruncateProps = CommonProps & { truncate: true; expanded?: boolean };\n\n// Function overloads to accept both prop types NoTruncateProps & TruncateProps\nfunction Text(props: NoTruncateProps): JSX.Element;\nfunction Text(props: TruncateProps): JSX.Element;\nfunction Text(props: CommonProps & { truncate?: boolean; expanded?: boolean }) {\n    const { children, truncate, expanded, ...otherProps } = props;\n    const classNames = truncate ? '.truncate' : '';\n    return (\n        <div className={classNames} aria-expanded={!!expanded} {...otherProps}>\n            {children}\n        </div>\n    );\n}\n"}],"position":{"start":{"line":777,"column":1,"offset":28878},"end":{"line":799,"column":4,"offset":29623}}}],"position":{"start":{"line":777,"column":1,"offset":28878},"end":{"line":799,"column":4,"offset":29623}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Omit prop from a type","position":{"start":{"line":801,"column":4,"offset":29628},"end":{"line":801,"column":32,"offset":29656}}}],"position":{"start":{"line":801,"column":1,"offset":29625},"end":{"line":801,"column":32,"offset":29656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Note: ","position":{"start":{"line":803,"column":1,"offset":29658},"end":{"line":803,"column":7,"offset":29664}}},{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittk"},"children":[{"type":"text","value":"Omit was added as a first class utility in TS 3.5","position":{"start":{"line":803,"column":8,"offset":29665},"end":{"line":803,"column":57,"offset":29714}}}],"position":{"start":{"line":803,"column":7,"offset":29664},"end":{"line":803,"column":130,"offset":29787}}},{"type":"text","value":"! ðŸŽ‰","position":{"start":{"line":803,"column":130,"offset":29787},"end":{"line":803,"column":134,"offset":29791}}}],"position":{"start":{"line":803,"column":1,"offset":29658},"end":{"line":803,"column":134,"offset":29791}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes when intersecting types, we want to define our own version of a prop. For example, I want my component to have a ","position":{"start":{"line":805,"column":1,"offset":29793},"end":{"line":805,"column":124,"offset":29916}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":805,"column":124,"offset":29916},"end":{"line":805,"column":131,"offset":29923}}},{"type":"text","value":", but the type I am intersecting with also has a ","position":{"start":{"line":805,"column":131,"offset":29923},"end":{"line":805,"column":180,"offset":29972}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"label"}],"position":{"start":{"line":805,"column":180,"offset":29972},"end":{"line":805,"column":187,"offset":29979}}},{"type":"text","value":" prop. Here's how to extract that out:","position":{"start":{"line":805,"column":187,"offset":29979},"end":{"line":805,"column":225,"offset":30017}}}],"position":{"start":{"line":805,"column":1,"offset":29793},"end":{"line":805,"column":225,"offset":30017}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label: React.ReactNode; // this will conflict with the InputElement's label\n}\n\n// this comes inbuilt with TS 3.5\ntype Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n// usage\nexport const Checkbox = (props: Props & Omit<React.HTMLProps<HTMLInputElement>, 'label'>) => {\n    const { label } = props;\n    return (\n        <div className=\"Checkbox\">\n            <label className=\"Checkbox-label\">\n                <input type=\"checkbox\" {...props} />\n            </label>\n            <span>{label}</span>\n        </div>\n    );\n};\n"}],"position":{"start":{"line":807,"column":1,"offset":30019},"end":{"line":827,"column":4,"offset":30596}}}],"position":{"start":{"line":807,"column":1,"offset":30019},"end":{"line":827,"column":4,"offset":30596}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When your component defines multiple props, chances of those conflicts increase. However you can explicitly state that all your fields should be removed from the underlying component using the ","position":{"start":{"line":829,"column":1,"offset":30598},"end":{"line":829,"column":194,"offset":30791}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"keyof"}],"position":{"start":{"line":829,"column":194,"offset":30791},"end":{"line":829,"column":201,"offset":30798}}},{"type":"text","value":" operator:","position":{"start":{"line":829,"column":201,"offset":30798},"end":{"line":829,"column":211,"offset":30808}}}],"position":{"start":{"line":829,"column":1,"offset":30598},"end":{"line":829,"column":211,"offset":30808}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label: React.ReactNode; // conflicts with the InputElement's label\n    onChange: (text: string) => void; // conflicts with InputElement's onChange\n}\n\nexport const Textbox = (props: Props & Omit<React.HTMLProps<HTMLInputElement>, keyof Props>) => {\n    // implement Textbox component ...\n};\n"}],"position":{"start":{"line":831,"column":1,"offset":30810},"end":{"line":840,"column":4,"offset":31139}}}],"position":{"start":{"line":831,"column":1,"offset":30810},"end":{"line":840,"column":4,"offset":31139}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As you can see from the Omit example above, you can write significant logic in your types as well. ","position":{"start":{"line":842,"column":1,"offset":31141},"end":{"line":842,"column":100,"offset":31240}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/pelotom/type-zoo"},"children":[{"type":"text","value":"type-zoo","position":{"start":{"line":842,"column":101,"offset":31241},"end":{"line":842,"column":109,"offset":31249}}}],"position":{"start":{"line":842,"column":100,"offset":31240},"end":{"line":842,"column":147,"offset":31287}}},{"type":"text","value":" is a nice toolkit of operators you may wish to check out (includes Omit), as well as ","position":{"start":{"line":842,"column":147,"offset":31287},"end":{"line":842,"column":233,"offset":31373}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/piotrwitek/utility-types"},"children":[{"type":"text","value":"utility-types","position":{"start":{"line":842,"column":234,"offset":31374},"end":{"line":842,"column":247,"offset":31387}}}],"position":{"start":{"line":842,"column":233,"offset":31373},"end":{"line":842,"column":293,"offset":31433}}},{"type":"text","value":" (especially for those migrating from Flow).","position":{"start":{"line":842,"column":293,"offset":31433},"end":{"line":842,"column":337,"offset":31477}}}],"position":{"start":{"line":842,"column":1,"offset":31141},"end":{"line":842,"column":337,"offset":31477}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Extracting Prop Types of a Component","position":{"start":{"line":844,"column":4,"offset":31482},"end":{"line":844,"column":47,"offset":31525}}}],"position":{"start":{"line":844,"column":1,"offset":31479},"end":{"line":844,"column":47,"offset":31525}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you want the prop types of a component, but it isn't exported.","position":{"start":{"line":846,"column":1,"offset":31527},"end":{"line":846,"column":73,"offset":31599}}}],"position":{"start":{"line":846,"column":1,"offset":31527},"end":{"line":846,"column":73,"offset":31599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A simple solution is to use ","position":{"start":{"line":848,"column":1,"offset":31601},"end":{"line":848,"column":29,"offset":31629}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ComponentProps"}],"position":{"start":{"line":848,"column":29,"offset":31629},"end":{"line":848,"column":51,"offset":31651}}},{"type":"text","value":":","position":{"start":{"line":848,"column":51,"offset":31651},"end":{"line":848,"column":52,"offset":31652}}}],"position":{"start":{"line":848,"column":1,"offset":31601},"end":{"line":848,"column":52,"offset":31652}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"// a Modal component defined elsewhere\nconst defaultProps: React.ComponentProps<typeof Modal> = {\n    title: 'Hello World',\n    visible: true,\n    onClick: jest.fn()\n};\n"}],"position":{"start":{"line":850,"column":1,"offset":31654},"end":{"line":857,"column":4,"offset":31833}}}],"position":{"start":{"line":850,"column":1,"offset":31654},"end":{"line":857,"column":4,"offset":31833}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are advanced edge cases if you want to extract the prop types of a component taking into account internal props, ","position":{"start":{"line":859,"column":1,"offset":31835},"end":{"line":859,"column":120,"offset":31954}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"propTypes"}],"position":{"start":{"line":859,"column":120,"offset":31954},"end":{"line":859,"column":131,"offset":31965}}},{"type":"text","value":", and ","position":{"start":{"line":859,"column":131,"offset":31965},"end":{"line":859,"column":137,"offset":31971}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"defaultProps"}],"position":{"start":{"line":859,"column":137,"offset":31971},"end":{"line":859,"column":151,"offset":31985}}},{"type":"text","value":" - ","position":{"start":{"line":859,"column":151,"offset":31985},"end":{"line":859,"column":154,"offset":31988}}},{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react/issues/63"},"children":[{"type":"text","value":"check our issue here for helper utilities that resolve these","position":{"start":{"line":859,"column":155,"offset":31989},"end":{"line":859,"column":215,"offset":32049}}}],"position":{"start":{"line":859,"column":154,"offset":31988},"end":{"line":859,"column":275,"offset":32109}}},{"type":"text","value":".","position":{"start":{"line":859,"column":275,"offset":32109},"end":{"line":859,"column":276,"offset":32110}}}],"position":{"start":{"line":859,"column":1,"offset":31835},"end":{"line":859,"column":276,"offset":32110}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Props: Render Props","position":{"start":{"line":861,"column":4,"offset":32115},"end":{"line":861,"column":23,"offset":32134}}}],"position":{"start":{"line":861,"column":1,"offset":32112},"end":{"line":861,"column":23,"offset":32134}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advice: Where possible, you should try to use Hooks instead of Render Props. We include this merely for completeness.","position":{"start":{"line":863,"column":3,"offset":32138},"end":{"line":863,"column":120,"offset":32255}}}],"position":{"start":{"line":863,"column":3,"offset":32138},"end":{"line":863,"column":120,"offset":32255}}},{"type":"text","value":"\n"}],"position":{"start":{"line":863,"column":1,"offset":32136},"end":{"line":863,"column":120,"offset":32255}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometimes you will want to write a function that can take a React element or a string or something else as a prop. The best Type to use for such a situation is ","position":{"start":{"line":865,"column":1,"offset":32257},"end":{"line":865,"column":161,"offset":32417}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"React.ReactNode"}],"position":{"start":{"line":865,"column":161,"offset":32417},"end":{"line":865,"column":178,"offset":32434}}},{"type":"text","value":" which fits anywhere a normal, well, React Node would fit:","position":{"start":{"line":865,"column":178,"offset":32434},"end":{"line":865,"column":236,"offset":32492}}}],"position":{"start":{"line":865,"column":1,"offset":32257},"end":{"line":865,"column":236,"offset":32492}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    label?: React.ReactNode;\n    children: React.ReactNode;\n}\nexport const Card = (props: Props) => {\n    return (\n        <div>\n            {props.label && <div>{props.label}</div>}\n            {props.children}\n        </div>\n    );\n};\n"}],"position":{"start":{"line":867,"column":1,"offset":32494},"end":{"line":880,"column":4,"offset":32766}}}],"position":{"start":{"line":867,"column":1,"offset":32494},"end":{"line":880,"column":4,"offset":32766}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you are using a function-as-a-child render prop:","position":{"start":{"line":882,"column":1,"offset":32768},"end":{"line":882,"column":52,"offset":32819}}}],"position":{"start":{"line":882,"column":1,"offset":32768},"end":{"line":882,"column":52,"offset":32819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-tsx"]},"children":[{"type":"text","value":"export interface Props {\n    children: (foo: string) => React.ReactNode;\n}\n"}],"position":{"start":{"line":884,"column":1,"offset":32821},"end":{"line":888,"column":4,"offset":32906}}}],"position":{"start":{"line":884,"column":1,"offset":32821},"end":{"line":888,"column":4,"offset":32906}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/typescript-cheatsheets/react-typescript-cheatsheet/issues/new/choose"},"children":[{"type":"text","value":"Something to add? File an issue","position":{"start":{"line":890,"column":2,"offset":32909},"end":{"line":890,"column":33,"offset":32940}}}],"position":{"start":{"line":890,"column":1,"offset":32908},"end":{"line":890,"column":123,"offset":33030}}},{"type":"text","value":".","position":{"start":{"line":890,"column":123,"offset":33030},"end":{"line":890,"column":124,"offset":33031}}}],"position":{"start":{"line":890,"column":1,"offset":32908},"end":{"line":890,"column":124,"offset":33031}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Handling Exceptions","position":{"start":{"line":892,"column":4,"offset":33036},"end":{"line":892,"column":23,"offset":33055}}}],"position":{"start":{"line":892,"column":1,"offset":33033},"end":{"line":892,"column":23,"offset":33055}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can provide good information when bad things happen.","position":{"start":{"line":894,"column":1,"offset":33057},"end":{"line":894,"column":57,"offset":33113}}}],"position":{"start":{"line":894,"column":1,"offset":33057},"end":{"line":894,"column":57,"offset":33113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"class InvalidDateFormatError extends RangeError {}\nclass DateIsInFutureError extends RangeError {}\n\n/**\n * // optional docblock\n * @throws {InvalidDateFormatError} The user entered date incorrectly\n * @throws {DateIsInFutureError} The user entered date in future\n *\n */\nfunction parse(date: string) {\n    if (!isValid(date)) throw new InvalidDateFormatError('not a valid date format');\n    if (isInFuture(date)) throw new DateIsInFutureError('date is in the future');\n    // ...\n}\n\ntry {\n    // call parse(date) somewhere\n} catch (e) {\n    if (e instanceof InvalidDateFormatError) {\n        console.error('invalid date format', e);\n    } else if (e instanceof DateIsInFutureError) {\n        console.warn('date is in future', e);\n    } else {\n        throw e;\n    }\n}\n"}],"position":{"start":{"line":896,"column":1,"offset":33115},"end":{"line":923,"column":4,"offset":33891}}}],"position":{"start":{"line":896,"column":1,"offset":33115},"end":{"line":923,"column":4,"offset":33891}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.typescriptlang.org/play/?jsx=2#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wFgAoCtAGxQGc64BJAOwDcVrgATAERRhIAYtBACAolBxQ4SAB6CW3RghQsA5kknS4AbwC+VWgzj9BTOqyEBXGNaLboshUiUq1mxzIMUKmaywYwBAscMB0AGqcPAAU3AJIAFxwdDBQwBoAlHoUcHBEdlCh8YJwAPxwadZIcMmYnHRIANwUhpTk-oEwwaHhVrb2SHEJyanpWTnkeWghqXAlSAByEADucAC8cCxIa2ZDmS1TcDMsc2j2RCwwextbO6YJw4KZuXCvBfah51Ku1wkAdJoYAAVUD7OAAPnmCWWK0BSBBYJiB1avnIAHoAFSY3KYuDo9FwCBgbohTjzCBoABG1EpAGtcXAAAIwAAWOBWjF0rA4XD4CREUDEMC8+jgwNZNWsjRkvyQRG40NKGRmPww1AAnoyWezVly9hZ+oUtFJoGKJVKZbIrvKkIqFmFQv5jbjcei-AEgiE4GAUFBGk8kik0hl1NldK9gJg4DEAIThKJ8wOZF5HPJsjl3NY86L8wSC4VeGIAIhYEHgKDgvJ4SpqmFEAmLKKOUZjfRYNmNyeyGdWWYe5ksHYGDlNUBLDvCjsqkrgzsGTcOeQJcH+a9R7TSGsmy8JaE41B9foDC2ydFwO0lRFaxwEaFZMaQ4cj0ZiNQyqTUaCQEGjOb5ewFhIY7PmmxyzBA1BIP88rSCWGTVvaCRzg2MDFgANLIzZ5GKSDUI0YSvu+pwwF+P7RgaQ6doMXigXk0wQVB-wrH6LATshU4ZHOI5IBhWFLnAuH4TUEZgb2azNK8bT6EAA"},"children":[{"type":"text","value":"View in TypeScript Playground","position":{"start":{"line":925,"column":2,"offset":33894},"end":{"line":925,"column":31,"offset":33923}}}],"position":{"start":{"line":925,"column":1,"offset":33893},"end":{"line":925,"column":904,"offset":34796}}}],"position":{"start":{"line":925,"column":1,"offset":33893},"end":{"line":925,"column":904,"offset":34796}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Simply throwing an exception is fine, however it would be nice to make TypeScript remind the consumer of your code to handle your exception. We can do that just by returning instead of throwing:","position":{"start":{"line":927,"column":1,"offset":34798},"end":{"line":927,"column":195,"offset":34992}}}],"position":{"start":{"line":927,"column":1,"offset":34798},"end":{"line":927,"column":195,"offset":34992}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"function parse(date: string): Date | InvalidDateFormatError | DateIsInFutureError {\n    if (!isValid(date)) return new InvalidDateFormatError('not a valid date format');\n    if (isInFuture(date)) return new DateIsInFutureError('date is in the future');\n    // ...\n}\n\n// now consumer *has* to handle the errors\nlet result = parse('mydate');\nif (result instanceof InvalidDateFormatError) {\n    console.error('invalid date format', result.message);\n} else if (result instanceof DateIsInFutureError) {\n    console.warn('date is in future', result.message);\n} else {\n    /// use result safely\n}\n\n// alternately you can just handle all errors\nif (result instanceof Error) {\n    console.error('error', result);\n} else {\n    /// use result safely\n}\n"}],"position":{"start":{"line":929,"column":1,"offset":34994},"end":{"line":952,"column":4,"offset":35744}}}],"position":{"start":{"line":929,"column":1,"offset":34994},"end":{"line":952,"column":4,"offset":35744}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"You can also describe exceptions with special-purpose data types (don't say monads...) like the ","position":{"start":{"line":954,"column":1,"offset":35746},"end":{"line":954,"column":97,"offset":35842}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Try"}],"position":{"start":{"line":954,"column":97,"offset":35842},"end":{"line":954,"column":102,"offset":35847}}},{"type":"text","value":", ","position":{"start":{"line":954,"column":102,"offset":35847},"end":{"line":954,"column":104,"offset":35849}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Option"}],"position":{"start":{"line":954,"column":104,"offset":35849},"end":{"line":954,"column":112,"offset":35857}}},{"type":"text","value":" (or ","position":{"start":{"line":954,"column":112,"offset":35857},"end":{"line":954,"column":117,"offset":35862}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Maybe"}],"position":{"start":{"line":954,"column":117,"offset":35862},"end":{"line":954,"column":124,"offset":35869}}},{"type":"text","value":"), and ","position":{"start":{"line":954,"column":124,"offset":35869},"end":{"line":954,"column":131,"offset":35876}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Either"}],"position":{"start":{"line":954,"column":131,"offset":35876},"end":{"line":954,"column":139,"offset":35884}}},{"type":"text","value":" data types:","position":{"start":{"line":954,"column":139,"offset":35884},"end":{"line":954,"column":151,"offset":35896}}}],"position":{"start":{"line":954,"column":1,"offset":35746},"end":{"line":954,"column":151,"offset":35896}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{"className":["language-ts"]},"children":[{"type":"text","value":"interface Option<T> {\n    flatMap<U>(f: (value: T) => None): None;\n    flatMap<U>(f: (value: T) => Option<U>): FormikOption<U>;\n    getOrElse(value: T): T;\n}\nclass Some<T> implements Option<T> {\n    constructor(private value: T) {}\n    flatMap<U>(f: (value: T) => None): None;\n    flatMap<U>(f: (value: T) => Some<U>): Some<U>;\n    flatMap<U>(f: (value: T) => Option<U>): Option<U> {\n        return f(this.value);\n    }\n    getOrElse(): T {\n        return this.value;\n    }\n}\nclass None implements Option<never> {\n    flatMap<U>(): None {\n        return this;\n    }\n    getOrElse<U>(value: U): U {\n        return value;\n    }\n}\n\n// now you can use it like:\nlet result = Option(6) // Some<number>\n    .flatMap((n) => Option(n * 3)) // Some<number>\n    .flatMap((n = new None())) // None\n    .getOrElse(7);\n\n// or:\nlet result = ask() // Option<string>\n    .flatMap(parse) // Option<Date>\n    .flatMap((d) => new Some(d.toISOString())) // Option<string>\n    .getOrElse('error parsing string');\n"}],"position":{"start":{"line":956,"column":1,"offset":35898},"end":{"line":993,"column":4,"offset":36898}}}],"position":{"start":{"line":956,"column":1,"offset":35898},"end":{"line":993,"column":4,"offset":36898}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":994,"column":1,"offset":36899}}}}