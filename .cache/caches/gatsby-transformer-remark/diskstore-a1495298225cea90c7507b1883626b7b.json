{"expireTime":9007200904307322000,"key":"transformer-remark-markdown-ast-8097fb94f8eefed1d59718666f387d8f--","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The simplest way to read a file in Node.js is to use the ","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":58,"offset":59},"indent":[]}},{"type":"inlineCode","value":"fs.readFile()","position":{"start":{"line":3,"column":58,"offset":59},"end":{"line":3,"column":73,"offset":74},"indent":[]}},{"type":"text","value":" method, passing it the file path, encoding and a callback function that will be called with the file data (and the error):","position":{"start":{"line":3,"column":73,"offset":74},"end":{"line":3,"column":196,"offset":197},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":196,"offset":197},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const fs = require('fs');\n\nfs.readFile('/Users/joe/test.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});","position":{"start":{"line":5,"column":1,"offset":199},"end":{"line":15,"column":4,"offset":387},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively, you can use the synchronous version ","position":{"start":{"line":17,"column":1,"offset":389},"end":{"line":17,"column":52,"offset":440},"indent":[]}},{"type":"inlineCode","value":"fs.readFileSync()","position":{"start":{"line":17,"column":52,"offset":440},"end":{"line":17,"column":71,"offset":459},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":17,"column":71,"offset":459},"end":{"line":17,"column":72,"offset":460},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":389},"end":{"line":17,"column":72,"offset":460},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"const fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('/Users/joe/test.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}","position":{"start":{"line":19,"column":1,"offset":462},"end":{"line":28,"column":4,"offset":634},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Both ","position":{"start":{"line":30,"column":1,"offset":636},"end":{"line":30,"column":6,"offset":641},"indent":[]}},{"type":"inlineCode","value":"fs.readFile()","position":{"start":{"line":30,"column":6,"offset":641},"end":{"line":30,"column":21,"offset":656},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":30,"column":21,"offset":656},"end":{"line":30,"column":26,"offset":661},"indent":[]}},{"type":"inlineCode","value":"fs.readFileSync()","position":{"start":{"line":30,"column":26,"offset":661},"end":{"line":30,"column":45,"offset":680},"indent":[]}},{"type":"text","value":" read the full content of the file in memory before returning the data.","position":{"start":{"line":30,"column":45,"offset":680},"end":{"line":30,"column":116,"offset":751},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":636},"end":{"line":30,"column":116,"offset":751},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This means that big files are going to have a major impact on your memory consumption and speed of execution of the program.","position":{"start":{"line":32,"column":1,"offset":753},"end":{"line":32,"column":125,"offset":877},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":753},"end":{"line":32,"column":125,"offset":877},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this case, a better option is to read the file content using streams.","position":{"start":{"line":34,"column":1,"offset":879},"end":{"line":34,"column":73,"offset":951},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":879},"end":{"line":34,"column":73,"offset":951},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":35,"column":1,"offset":952}}}}